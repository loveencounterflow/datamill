{
  "version": 3,
  "file": "render-as-html.js",
  "sourceRoot": "..",
  "sources": [
    "src/render-as-html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nMIRAGE                    = require 'mkts-mirage'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n#...........................................................................................................\nH                         = require './helpers'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  project_abspath }       = H\n#...........................................................................................................\nDM                        = require '..'\n\n#-----------------------------------------------------------------------------------------------------------\n@$decorations = ( S ) -> $ { first, last, }, ( d, send ) =>\n  if d is first\n    send H.fresh_datom '^html', { text: '<html><body>', ref: 'rdh/deco-1', $vnr: [ -Infinity, ], }\n  if d is last\n    send H.fresh_datom '^html', { text: '</body></html>', ref: 'rdh/deco-2', $vnr: [ Infinity, ], }\n  else\n    send d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$p = ( S ) ->\n  return PD.lookaround $ ( d3, send ) =>\n    [ prv, d, nxt, ] = d3\n    return send d unless select d, '^mktscript'\n    text = d.text\n    if select prv, '<p'\n      text  = \"<p>#{text}\"\n      send stamp prv\n    if select nxt, '>p'\n      text  = \"#{text}</p>\"\n      send stamp nxt\n    $vnr = VNR.deepen d.$vnr\n    send H.fresh_datom '^html', { text: text, ref: 'rdh/p', $vnr, }\n    send stamp d\n    return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$mktscript = ( S ) -> $ ( d, send ) =>\n#   if select d, '^mktscript'\n#     $vnr = VNR.deepen d.$vnr\n#     send H.fresh_datom '^html', { text: d.text, ref: 'rdh/mkts-1', $vnr, }\n#     send d\n#   else\n#     send d\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$blank = ( S ) -> $ ( d, send ) =>\n  return send d unless select d, '^blank'\n  $vnr = VNR.deepen d.$vnr\n  for _ in [ 1 .. ( d.linecount ? 0 ) ] by +1\n    $vnr = VNR.advance $vnr\n    send H.fresh_datom '^html', { text: '', ref: 'rdh/mkts-1', $vnr, }\n  send stamp d\n\n#-----------------------------------------------------------------------------------------------------------\n@$set_realm = ( S, realm ) -> $ ( d, send ) =>\n  return send if d.realm? then d else PD.set d, { realm, }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@settings =\n  from_realm:   'html'\n  to_realm:     'html'\n\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  H.register_key    S, '^html', { is_block: false, }\n  H.register_realm  S, @settings.to_realm\n  H.copy_realm      S, 'input', 'html'\n  pipeline = []\n  # pipeline.push @$decorations S\n  pipeline.push @$p           S\n  pipeline.push @$blank       S\n  pipeline.push @$set_realm   S, @settings.to_realm\n  return PD.pull pipeline...\n\n\n\n\n\n"
  ]
}