// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, MIRAGE, PD, VNR, assign, badge, cwd_abspath, cwd_relpath, debug, declare, echo, first, help, here_abspath, info, isa, jr, last, project_abspath, rpr, select, size_of, stamp, type_of, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'DATAMILL/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  MIRAGE = require('mkts-mirage');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  this.types = require('./types');

  ({isa, validate, declare, size_of, type_of} = this.types);

  //...........................................................................................................
  H = require('./helpers');

  ({cwd_abspath, cwd_relpath, here_abspath, project_abspath} = H);

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.run_phase = function(S, transform) {
    return new Promise((resolve, reject) => {
      var pipeline, source;
      source = PD.new_push_source();
      pipeline = [];
      pipeline.push(source);
      pipeline.push(transform);
      // pipeline.push @$validate_symmetric_keys()
      pipeline.push(H.$feed_db(S));
      pipeline.push(PD.$drain(() => {
        return resolve();
      }));
      PD.pull(...pipeline);
      return H.feed_source(S, source);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_datamill = function(mirage) {
    var R;
    R = {
      mirage: mirage,
      /* TAINT consider to store these values in DB */
      dests: {
        preamble: {
          from: null,
          to: null
        },
        body: {
          from: null,
          to: null
        },
        postscript: {
          from: null,
          to: null
        }
      }
    };
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.translate_document = function(mirage) {
    return new Promise(async(resolve, reject) => {
      var S, i, len, limit, pass, pass_max, phase, phase_name, phase_names;
      S = this.new_datamill(mirage);
      limit = 2e308;
      phase_names = [
        './005-start-stop',
        './006-ignore',
        './010-consolidate-whitespace',
        './020-blocks',
        './030-paragraphs',
        // './040-markdown-inline'
        // './030-escapes'
        // './035-special-forms'
        './xxx-validation'
      ];
//.........................................................................................................
      for (i = 0, len = phase_names.length; i < len; i++) {
        phase_name = phase_names[i];
        phase = require(phase_name);
        pass_max = 5;
        pass = 0;
        while (true) {
          pass += +1;
          if (pass >= pass_max) {
            warn(`µ44343 enforced break, pass_max is ${pass_max}`);
            break;
          }
          help('µ55567 ' + (CND.reverse(CND.yellow(` pass ${pass} `))) + (CND.lime(` phase ${phase_name} `)));
          await this.run_phase(S, phase.$transform(S));
          if (!H.repeat_phase(S, phase)) {
            break;
          }
          warn(`µ33443 repeating phase ${phase_name}`);
        }
      }
      //.........................................................................................................
      H.show_overview(S, {
        hilite: '^break'
      });
      // H.show_overview S, true
      resolve();
      //.........................................................................................................
      return null;
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    (async() => {
      var mirage, settings;
      //.......................................................................................................
      settings = {
        file_path: project_abspath('./src/tests/demo.md'),
        db_path: '/tmp/mirage.db',
        icql_path: project_abspath('./db/datamill.icql'),
        default_key: '^line'
      };
      help(`using database at ${settings.db_path}`);
      mirage = (await MIRAGE.create(settings));
      await this.translate_document(mirage);
      // help 'ok'
      return null;
    })();
  }

}).call(this);

//# sourceMappingURL=main.js.map
