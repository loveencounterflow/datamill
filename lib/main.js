// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, MIRAGE, PD, VNR, assign, badge, cwd_abspath, cwd_relpath, debug, declare, echo, first, first_of, help, here_abspath, info, isa, jr, last, last_of, project_abspath, rpr, select, size_of, stamp, type_of, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'DATAMILL/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  MIRAGE = require('mkts-mirage');

  VNR = require('./vnr');

  this.RENDER_AS_HTML = require('./render-as-html');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  this.types = require('./types');

  ({isa, validate, declare, first_of, last_of, size_of, type_of} = this.types);

  //...........................................................................................................
  H = require('./helpers');

  ({cwd_abspath, cwd_relpath, here_abspath, project_abspath} = H);

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.run_phase = function(S, transform) {
    return new Promise((resolve, reject) => {
      var R, pipeline, source;
      source = PD.new_push_source();
      pipeline = [];
      pipeline.push(source);
      pipeline.push(transform);
      pipeline.push(H.$feed_db(S));
      pipeline.push(PD.$drain(() => {
        return resolve();
      }));
      R = PD.pull(...pipeline);
      H.feed_source(S, source);
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.create_datamill = async function(settings) {
    var R, mirage;
    mirage = (await MIRAGE.create(settings));
    R = {
      mirage: mirage,
      control: {
        active_phase: null,
        queue: [],
        /* A queue for flow control messages */reprise_nr: 1,
        reprise: {
          start_vnr: null,
          stop_vnr: null,
          phase: null
        }
      }
    };
/* name of phase that queued control messages */    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._set_active_phase = (S, phase_name) => {
    return S.control.active_phase = phase_name;
  };

  this._cancel_active_phase = (S) => {
    return S.control.active_phase = null;
  };

  this._length_of_control_queue = (S) => {
    return S.control.queue.length;
  };

  this._control_queue_has_messages = (S) => {
    return (this._length_of_control_queue(S)) > 0;
  };

  this._next_control_message_is_from = (S, phase_name) => {
    var ref;
    return ((ref = S.control.queue[0]) != null ? ref.phase : void 0) === phase_name;
  };

  this._is_reprising = (S) => {
    return S.control.reprise.phase != null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._set_to_reprising = (S, message) => {
    validate.datamill_reprising_message(message);
    assign(S.control.reprise.phase, message);
    S.control.reprise_nr += +1;
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._conclude_current_reprise = (S) => {
    var key;
    for (key in S.control.reprise) {
      S.control.reprise[key] = null;
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._pluck_next_control_message = (S) => {
    var message;
    if (!(S.control.queue.length > 0)) {
      throw new Error("µ11092 queue is empty");
    }
    message = S.control.queue.shift();
    assign(S.control.reprise, message);
    return message;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.reprise = (S, region) => {
    var first_vnr, last_vnr;
    validate.datamill_inclusive_region(region);
    validate.nonempty_text(S.control.active_phase);
    ({first_vnr, last_vnr} = region);
    S.control.queue.push(PD.new_datom('~reprise', {
      first_vnr,
      last_vnr,
      phase: S.control.active_phase
    }));
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.parse_document = function(S) {
    return new Promise(async(resolve, reject) => {
      var i, len, limit, message, msg_1, msg_2, msg_2a, msg_3, pass, phase, phase_name, phase_names;
      limit = 2e308;
      phase_names = ['./000-initialize', './005-start-stop', './006-ignore', './010-1-whitespace', './010-2-whitespace-dst', './020-blocks', './030-paragraphs', './040-markdown-inline'];
      //.........................................................................................................
      // # './030-escapes'
      // # './035-special-forms'
      // './xxx-validation'
      msg_1 = function() {
        var nrs_txt;
        nrs_txt = CND.reverse(CND.yellow(` r${S.control.reprise_nr} p${pass} `));
        return help('µ55567 ' + nrs_txt + (CND.lime(` phase ${phase_name} `)));
      };
      //.........................................................................................................
      msg_2 = function(phase_name) {
        var nrs_txt;
        nrs_txt = CND.reverse(CND.yellow(` r${S.control.reprise_nr} `));
        info('µ22872', nrs_txt + CND.blue(` finished reprise for ${phase_name}`));
        return info();
      };
      //.........................................................................................................
      msg_2a = function(phase_name) {
        info('µ22872', CND.blue("continuing without limits"));
        return info();
      };
      //.........................................................................................................
      msg_3 = function(message) {
        var nrs_txt;
        nrs_txt = CND.reverse(CND.yellow(` r${S.control.reprise_nr} `));
        info();
        return info('µ33324', nrs_txt + CND.blue(` reprise for ${message.phase} with fragment ${jr(message.first_vnr)} <= vnr <= ${jr(message.last_vnr)}`));
      };
      while (true) {
        try {
        // ### TAINT use API ###
        // S.confine_to = null
        // S.confine_from_phase = null
        //.........................................................................................................
          for (i = 0, len = phase_names.length; i < len; i++) {
            phase_name = phase_names[i];
            this._set_active_phase(S, phase_name);
            // length_of_queue = @_length_of_control_queue S
            phase = require(phase_name);
            pass = 1;
            msg_1();
            await this.run_phase(S, phase.$transform(S));
            //...................................................................................................
            if (S.control.reprise.phase === phase_name) {
              /* Conclude reprise; continue with upcoming phase and entire document */
              /* TAINT do we have to stack boundaries? */
              msg_2(phase_name);
              this._conclude_current_reprise(S);
            }
            //...................................................................................................
            if (this._next_control_message_is_from(S, phase_name)) {
              throw this._pluck_next_control_message(S);
            }
            // msg_2a() unless @_control_queue_has_messages S
            //...................................................................................................
            if (H.repeat_phase(S, phase)) {
              throw new Error(`µ33443 phase repeating not implemented (${rpr(phase_name)})`);
            }
            this._cancel_active_phase(S);
          }
        } catch (error) {
          //.......................................................................................................
          message = error;
          if (!(select(message, '~reprise'))) {
            throw message;
          }
          this._set_to_reprising(S, message);
          msg_3(message);
          /* TAINT use API */
          continue;
        }
        break;
      }
      //.........................................................................................................
      resolve();
      //.........................................................................................................
      return null;
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    (async() => {
      var $vnr, d, datamill, db, lnr, ref, row, settings, text, to_width, width_of;
      //.......................................................................................................
      settings = {
        // file_path:    project_abspath './src/tests/demo.md'
        file_path: project_abspath('./src/tests/demo-medium.md'),
        // file_path:    project_abspath './src/tests/demo-simple-paragraphs.md'
        // db_path:      ':memory:'
        db_path: project_abspath('./db/datamill.db'),
        icql_path: project_abspath('./db/datamill.icql'),
        default_key: '^line',
        default_dest: 'main',
        clear: true
      };
      help(`using database at ${settings.db_path}`);
      datamill = (await this.create_datamill(settings));
      await this.parse_document(datamill);
      await this.RENDER_AS_HTML.render(datamill);
      await H.show_overview(datamill);
      //.......................................................................................................
      ({to_width, width_of} = require('to-width'));
      db = datamill.mirage.db;
      ref = db.$.query("select * from main where key = '^html' order by vnr_blob;");
      for (row of ref) {
        d = H.datom_from_row(datamill, row);
        ({text, $vnr} = d);
        lnr = $vnr[0];
        // echo text, "<!-- #{lnr} -->"
        echo((CND.reverse(CND.BLUE(to_width(text, 100)))) + (CND.grey(lnr)));
      }
      //.......................................................................................................
      //   info jr H.datom_from_row null, row
      // { prv_dest, dest, stamped, key, } = row
      // info jr { prv_dest, dest, stamped, key, }
      //.......................................................................................................
      // for row from db.$.query "select * from dest_changes_forward order by vnr_blob;"
      //   { prv_dest, dest, stamped, key, } = row
      //   info jr { prv_dest, dest, stamped, key, }
      // for row from db.read_changed_dest_last_lines()
      //   delete row.vnr_blob
      //   help jr row
      // for row from db.read_changed_dest_first_lines()
      //   delete row.vnr_blob
      //   info jr row
      // help 'ok'
      return null;
    })();
  }

}).call(this);

//# sourceMappingURL=main.js.map
