// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, MIRAGE, PD, VNR, assign, badge, cwd_abspath, cwd_relpath, debug, declare, echo, first, help, here_abspath, info, isa, jr, last, project_abspath, rpr, select, size_of, stamp, type_of, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'DATAMILL/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  MIRAGE = require('mkts-mirage');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  this.types = require('./types');

  ({isa, validate, declare, size_of, type_of} = this.types);

  //...........................................................................................................
  H = require('./helpers');

  ({cwd_abspath, cwd_relpath, here_abspath, project_abspath} = H);

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.run_phase = function(S, transform) {
    return new Promise((resolve, reject) => {
      var $capture_control_messages, pipeline, source;
      //.........................................................................................................
      $capture_control_messages = function(S) {
        return $((d, send) => {
          if (select(d, '~')) {
            switch (d.key) {
              case '~datamill-break-phase-and-repeat':
                return S.control.push(d);
              default:
                throw new Error(`µ98401 unknown system key ${rpr(d.key)}`);
            }
          } else {
            return send(d);
          }
        });
      };
      //.........................................................................................................
      source = PD.new_push_source();
      pipeline = [];
      pipeline.push(source);
      pipeline.push(transform);
      pipeline.push($capture_control_messages(S));
      pipeline.push(H.$feed_db(S));
      pipeline.push(PD.$drain(() => {
        return resolve();
      }));
      PD.pull(...pipeline);
      return H.feed_source(S, source);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_datamill = function(mirage) {
    var R;
    R = {
      mirage: mirage,
      control: [],
      /* A queue for flow control messages */confine_to: null
    };
/* when set, indicates start_vnr, stop_vnr */    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.translate_document = function(mirage) {
    return new Promise(async(resolve, reject) => {
      var S, i, len, limit, m, message, pass, phase, phase_name, phase_names;
      S = this.new_datamill(mirage);
      limit = 2e308;
      phase_names = [
        './000-initialize',
        './005-start-stop',
        './006-ignore',
        './010-whitespace-1',
        './020-blocks',
        './025-whitespace-2',
        './030-1-paragraphs-breaks',
        './030-2-paragraphs-consolidate',
        './040-markdown-inline',
        // './030-escapes'
        // './035-special-forms'
        './xxx-validation'
      ];
      while (true) {
        try {
        //.........................................................................................................
          for (i = 0, len = phase_names.length; i < len; i++) {
            phase_name = phase_names[i];
            phase = require(phase_name);
            pass = 1;
            help('µ55567 ' + (CND.reverse(CND.yellow(` pass ${pass} `))) + (CND.lime(` phase ${phase_name} `)));
            await this.run_phase(S, phase.$transform(S));
            //.....................................................................................................
            /* TAINT use proper flag / API */
            if (S.confine_to == null) {
              if ((message = S.control.shift()) != null) {
                throw message;
              }
            }
            //.....................................................................................................
            if (H.repeat_phase(S, phase)) {
              throw new Error(`µ33443 phase repeating not implemented (${rpr(phase_name)})`);
            }
          }
        } catch (error) {
          //.........................................................................................................
          m = error;
          if (!(select(m, '~break_phase_and_repeat_confined_to'))) {
            throw m;
          }
          info(`µ33324 breaking to repeat with ${jr(m.start_vnr)}...${jr(m.stop_vnr)}`);
          S.confine_to = m;
          continue;
        }
        break;
      }
      //.........................................................................................................
      // H.show_overview S, { hilite: '^blank', }
      H.show_overview(S);
      resolve();
      //.........................................................................................................
      return null;
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    (async() => {
      var mirage, settings;
      //.......................................................................................................
      settings = {
        file_path: project_abspath('./src/tests/demo.md'),
        // file_path:    project_abspath './src/tests/demo-simple-paragraphs.md'
        // db_path:      ':memory:'
        db_path: project_abspath('./db/datamill.db'),
        icql_path: project_abspath('./db/datamill.icql'),
        default_key: '^line',
        default_dest: 'main',
        clear: true
      };
      help(`using database at ${settings.db_path}`);
      mirage = (await MIRAGE.create(settings));
      await this.translate_document(mirage);
      // db      = mirage.db
      // for row from db.$.query "select * from dest_changes_backward order by vnr_blob;"
      //   delete row.vnr_blob
      //   help jr row
      // for row from db.$.query "select * from dest_changes_forward order by vnr_blob;"
      //   delete row.vnr_blob
      //   info jr row
      // for row from db.read_changed_dest_last_lines()
      //   delete row.vnr_blob
      //   help jr row
      // for row from db.read_changed_dest_first_lines()
      //   delete row.vnr_blob
      //   info jr row
      // help 'ok'
      return null;
    })();
  }

}).call(this);

//# sourceMappingURL=main.js.map
