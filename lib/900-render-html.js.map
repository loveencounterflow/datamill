{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/900-render-html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nMIRAGE                    = require 'mkts-mirage'\nVNR                       = require './vnr'\nFS                        = require 'fs'\nPATH                      = require 'path'\n#...........................................................................................................\nPD                        = require 'steampipes'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD.export()\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n#...........................................................................................................\nH                         = require './helpers'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  project_abspath }       = H\n#...........................................................................................................\nDM                        = require '..'\n{ xr, }                   = require './xr'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$decorations = ( S ) -> $ { first, last, }, ( d, send ) =>\n#   if d is first\n#     send H.fresh_datom '^html', { text: '<html><body>', ref: 'rdh/deco-1', $vnr: [ -Infinity, ], }\n#   if d is last\n#     send H.fresh_datom '^html', { text: '</body></html>', ref: 'rdh/deco-2', $vnr: [ Infinity, ], }\n#   else\n#     send d\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$headings = ( S ) ->\n  pipeline = []\n  pipeline.push H.leapfrog_stamped PD.lookaround $ ( d3, send ) =>\n    [ prv, d, nxt, ] = d3\n    return unless ( select prv, '<h' ) and ( select d, '^mktscript' ) and ( select nxt, '>h' )\n    $vnr    = VNR.deepen d.$vnr\n    tagname = \"h#{prv.level}\"\n    text    = \"<#{tagname}>#{d.text}</#{tagname}>\"\n    send H.fresh_datom '^html', { text, ref: 'rdh/h', $vnr, }\n    send stamp prv\n    send stamp d\n    send stamp nxt\n  #.........................................................................................................\n  ### Make sure ordering is preserved for downstream transforms: ###\n  pipeline.push H.$resume_from_db S, { realm: 'html', }\n  return PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$blockquotes = ( S ) ->\n  return $ ( d, send ) =>\n    if select d, '<blockquote'\n      $vnr  = VNR.deepen d.$vnr\n      text  = \"<blockquote>\"\n      send H.fresh_datom '^html', { text, ref: 'rdh/blqt1', $vnr, }\n      send stamp d\n    else if select d, '>blockquote'\n      $vnr  = VNR.deepen d.$vnr\n      text  = \"</blockquote>\"\n      send H.fresh_datom '^html', { text, ref: 'rdh/blqt2', $vnr, }\n      send stamp d\n    else\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$codeblocks = ( S ) ->\n  return H.leapfrog_stamped PD.lookaround $ ( d3, send ) =>\n    [ prv, d, nxt, ] = d3\n    return send d unless select d, '^literal'\n    if select prv,  '<codeblock'\n      $vnr  = VNR.deepen prv.$vnr\n      text  = \"<pre><code>\"\n      send H.fresh_datom '^html', { text, ref: 'rdh/cdb1', $vnr, }\n      send stamp prv\n    if select nxt,  '>codeblock'\n      $vnr  = VNR.deepen nxt.$vnr\n      text  = \"</code></pre>\"\n      send H.fresh_datom '^html', { text, ref: 'rdh/cdb2', $vnr, }\n      send stamp nxt\n    $vnr  = VNR.deepen d.$vnr\n    send H.fresh_datom '^html', { text: d.text, ref: 'rdh/cdb3', $vnr, }\n    send stamp d\n\n#-----------------------------------------------------------------------------------------------------------\n@$blocks_with_mktscript = ( S ) ->\n  key_registry    = H.get_key_registry S\n  is_block        = ( d ) -> key_registry[ d.key ]?.is_block\n  pipeline        = []\n  pipeline.push H.leapfrog_stamped PD.lookaround $ ( d3, send ) =>\n    [ prv, d, nxt, ] = d3\n    return send d unless select d, '^mktscript'\n    text = d.text\n    ### TAINT use proper API to detect open, close ###\n    if ( is_block prv ) and ( prv.key.startsWith '<' )\n      tagname = prv.key[ 1 .. ]\n      ### TAINT use proper HTML generation ###\n      text    = \"<#{tagname}>#{text}\"\n      send stamp prv\n    ### TAINT use proper API to detect open, close ###\n    if ( is_block nxt ) and ( nxt.key.startsWith '>' )\n      # debug 'µ10981-1', xr prv\n      # debug 'µ10981-2', xr d\n      # debug 'µ10981-3', xr nxt\n      tagname = nxt.key[ 1 .. ]\n      text    = \"#{text}</#{tagname}>\"\n      send stamp nxt\n    $vnr = VNR.deepen d.$vnr\n    send H.fresh_datom '^html', { text, ref: 'rdh/bwm', $vnr, }\n    send stamp d\n    return null\n  #.........................................................................................................\n  ### Make sure ordering is preserved for downstream transforms: ###\n  pipeline.push H.$resume_from_db S, { realm: 'html', }\n  return PD.pull pipeline...\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$other_blocks = ( S ) ->\n#   key_registry    = H.get_key_registry S\n#   is_block        = ( d ) -> key_registry[ d.key ]?.is_block\n#   return H.resume_from_db S, { realm: 'html', }, $ ( d, send ) =>\n#     return send d unless ( select d, '<>' ) and ( is_block d )\n#     debug 'µ29882', '$other_blocks', jr d\n#     tagname = d.key[ 1 .. ]\n#     ### TAINT use proper HTML generation ###\n#     if select d, '<' then text = \"<#{tagname}>\"\n#     else                  text = \"</#{tagname}>\"\n#     $vnr = VNR.deepen d.$vnr\n#     send H.fresh_datom '^html', { text: text, ref: 'rdh/ob', $vnr, }\n#     send stamp d\n#     return null\n\n#-----------------------------------------------------------------------------------------------------------\n# @$blank = ( S ) -> $ ( d, send ) =>\n@$blank = ( S ) -> H.resume_from_db_after S, { realm: 'html', }, $ ( d, send ) =>\n  return send d unless select d, '^blank'\n  $vnr = VNR.deepen d.$vnr\n  send stamp d\n  if ( linecount = ( d.linecount ? 0 ) - 1 ) > -1\n    text = '\\n'.repeat linecount\n    send H.fresh_datom '^html', { text, ref: 'rdh/blnk', $vnr, }\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n### TAINT refactor to PipeStreams ###\nPD.$send_as_first = ( x ) -> $ { first, }, ( d, send ) -> send if d is first then x else d\nPD.$send_as_last  = ( x ) -> $ { last,  }, ( d, send ) -> send if d is last  then x else d\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_preamble = ->\n  path = PATH.join __dirname, '../public/preamble.html'\n  return FS.readFileSync path, { encoding: 'utf-8', }\n\n#-----------------------------------------------------------------------------------------------------------\n@retrieve_html = ( S ) -> new Promise ( resolve ) =>\n  ### TAINT code duplication ###\n  collector = []\n  pipeline  = []\n  pipeline.push H.new_db_source S, 'html'\n  pipeline.push PD.$filter ( d ) -> select d, '^html'\n  pipeline.push $ ( d, send ) -> send d.text\n  pipeline.push PD.$collect { collector, }\n  pipeline.push PD.$send_as_first @_get_preamble S\n  pipeline.push PD.$drain -> resolve collector.join '\\n'\n  return PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@write_to_file = ( S ) => new Promise ( resolve ) =>\n  ### TAINT code duplication ###\n  pipeline  = []\n  pipeline.push H.new_db_source S, 'html'\n  pipeline.push PD.$filter ( d ) -> select d, '^html'\n  pipeline.push $ ( d, send ) -> send d.text + '\\n'\n  pipeline.push PD.$send_as_first @_get_preamble S\n  pipeline.push PD.$tee PD.write_to_file '/tmp/datamill.html'\n  pipeline.push PD.$drain -> resolve()\n  return PD.$tee PD.pull pipeline...\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@settings =\n  from_realm:   'html'\n  to_realm:     'html'\n\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  H.register_key    S, '^html', { is_block: false, }\n  H.register_realm  S, @settings.to_realm\n  H.copy_realm      S, 'input', 'html'\n  pipeline = []\n  pipeline.push @$headings                  S\n  pipeline.push @$blockquotes               S\n  pipeline.push @$codeblocks                S\n  pipeline.push @$blocks_with_mktscript     S\n  pipeline.push @$blank                     S\n  pipeline.push H.$set_realm_where_missing  S, @settings.to_realm\n  # pipeline.push @$write_to_file             S\n  return PD.pull pipeline...\n\n\n\n\n\n"
  ]
}