// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, PD, VNR, alert, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, last_of, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  alert = CND.get_logger('alert', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, last_of, type_of} = types);

  //...........................................................................................................
  // ### Whether in-place updates are OK ###
  // prefer_updates = true

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT consider to move this to pipedreams */
  this.$validate_symmetric_keys = function(settings) {
    var stack, vnr;
    stack = [];
    vnr = null;
    return $({last}, (d, send) => {
      /* TAINT make configurable whether to throw or warn */
      var entry, i, is_vnr, key, len, message, name, sigil, was_vnr;
      //.......................................................................................................
      if (d === last) {
        if (!isa.empty(stack)) {
          is_vnr = jr(vnr);
          message = ['µ44333'];
          message = [`at document end (VNR ${is_vnr}), encountered dangling open tag(s):`];
          for (i = 0, len = stack.length; i < len; i++) {
            entry = stack[i];
            was_vnr = jr(entry.$vnr);
            message.push(`\`>${entry.name}\` (VNR ${was_vnr})`);
          }
          throw new Error(message.join(' '));
        }
        return null;
      }
      //.......................................................................................................
      vnr = d.$vnr;
      is_vnr = jr(vnr);
      key = d.key;
      sigil = key[0];
      name = key.slice(1);
      //.......................................................................................................
      switch (sigil) {
        case '<':
          stack.push({
            name,
            $vnr: d.$vnr
          });
          break;
        case '>':
          if (isa.empty(stack)) {
            throw new Error(`µ44332 extraneous closing key \`>${name}\` found at (VNR ${is_vnr}), stack empty`);
          }
          entry = last_of(stack);
          if (entry.name !== name) {
            was_vnr = jr(entry.$vnr);
            throw new Error(`µ44332 expected \`>${entry.name}\` (VNR ${was_vnr}), found \`${key}\` (VNR ${is_vnr})`);
          }
          stack.pop();
          break;
        default:
          send(d);
      }
      return null;
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$validate_symmetric_keys(S));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=xxx-validation.js.map
