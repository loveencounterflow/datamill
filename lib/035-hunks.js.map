{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/035-hunks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'steampipes'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD.export()\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  last_of\n  type_of }               = types\n#...........................................................................................................\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$assemble_hunks = ( S ) ->\n  prv_was_line    = false\n  send            = null\n  first_vnr       = null\n  collector       = null\n  H.register_key S, '^hunk', { is_block: false, }\n  #.........................................................................................................\n  collect = ( d ) ->\n    unless collector?\n      first_vnr = d.$vnr\n      collector = []\n    collector.push d\n    send stamp d\n    return null\n  #.........................................................................................................\n  flush = ->\n    return null unless collector?\n    text          = ( x.text for x in collector ).join '\\n'\n    collector     = null\n    $vnr          = VNR.deepen first_vnr\n    prv_was_line  = false\n    send H.fresh_datom '^hunk', { text, $vnr, ref: 'pco/asp', }\n    return null\n  #.........................................................................................................\n  return H.leapfrog_stamped $ { last, }, ( d, send_ ) =>\n    send              = send_\n    #.......................................................................................................\n    if d is last\n      return flush()\n    #.......................................................................................................\n    unless select d, '^line'\n      flush()\n      return send d\n    #.......................................................................................................\n    return collect d\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$assemble_hunks S\n  return PD.pull pipeline...\n\n"
  ]
}