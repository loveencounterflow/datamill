{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\n@SF                       = require './special-forms'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nMIRAGE                    = require 'mkts-mirage'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = @types\n#...........................................................................................................\nH                         = require './helpers'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  project_abspath }       = H\n\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT to be written; observe this will simplify `$blank_lines()`. ###\n@$trim = ( S ) ->\n  return $ ( d, send ) => send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$blank_lines = ( S ) ->\n  prv_vnr       = null\n  linecount     = 0\n  send          = null\n  within_blank  = false\n  # is_first      = true\n  #.........................................................................................................\n  flush = ( n ) =>\n    within_blank  = false\n    $vnr          = VNR.new_level prv_vnr\n    send H.fresh_datom '^blank', { value: { linecount, }, $vnr, }\n    linecount     = 0\n  #.........................................................................................................\n  return $ { last, }, ( d, send_ ) =>\n    send = send_\n    #.......................................................................................................\n    if d is last\n      flush()# if within_blank\n      return null\n    #.......................................................................................................\n    return send d unless select d, '^mktscript'\n    #.......................................................................................................\n    unless isa.blank_text d.value\n      flush() if within_blank\n      prv_vnr       = d.$vnr\n      return send d\n    #.......................................................................................................\n    send stamp d\n    prv_vnr       = d.$vnr\n    linecount     = 0 unless within_blank\n    linecount    += +1\n    within_blank  = true\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$codeblocks = ( S ) ->\n  ### Recognize codeblocks as regions delimited by triple backticks. Possible extensions include\n  markup for source code category and double service as pre-formatted blocks. ###\n  pattern           = /// ^ (?<backticks> ``` ) $ ///\n  within_codeblock  = false\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless select d, '^mktscript'\n    ### TAINT should send `<codeblock` datom ###\n    if ( match = d.value.match pattern )?\n      within_codeblock = not within_codeblock\n      send stamp d\n    else\n      if within_codeblock\n        send stamp d\n        $vnr  = VNR.new_level d.$vnr, 1\n        ### TAINT should somehow make sure properties are OK for a `^literal` ###\n        d1    = d\n        d1    = PD.set d1, 'key',    '^literal'\n        d1    = PD.set d1, '$vnr',   $vnr\n        d1    = PD.set d1, '$fresh', true\n        send d1\n      else\n        send d\n    # $vnr  = VNR.new_level d.$vnr, 0\n    # $vnr  = VNR.advance $vnr; send H.fresh_datom '<codeblock',        { level, $vnr, }\n    # $vnr  = VNR.advance $vnr; send H.fresh_datom '>codeblock',        { level, $vnr, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$heading = ( S ) ->\n  ### Recognize heading as any line that starts with a `#` (hash). Current behavior is to\n  check whether both prv and nxt lines are blank and if not so issue a warning; this detail may change\n  in the future. ###\n  pattern = /// ^ (?<hashes> \\#+ ) (?<text> .* ) $ ///\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless select d, '^mktscript'\n    return send d unless ( match = d.value.match pattern )?\n    prv_line_is_blank = H.previous_line_is_blank  S, d.$vnr\n    nxt_line_is_blank = H.next_line_is_blank      S, d.$vnr\n    $vnr              = VNR.new_level d.$vnr, 0\n    unless prv_line_is_blank and nxt_line_is_blank\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT update PipeDreams: warnings always marked fresh ###\n      # warning = PD.new_warning d.$vnr, message, d, { $fresh: true, }\n      message = \"µ09082 heading should have blank lines above and below\"\n      $vnr    = VNR.advance $vnr; send H.fresh_datom '~warning', message, { $vnr, }\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    send stamp d\n    level = match.groups.hashes.length\n    text  = match.groups.text.replace /^\\s*(.*?)\\s*$/g, '$1' ### TAINT use trim method ###\n    # debug 'µ88764', rpr match.groups.text\n    # debug 'µ88764', rpr text\n    $vnr  = VNR.advance $vnr; send H.fresh_datom '<h',                { level, $vnr, }\n    $vnr  = VNR.advance $vnr; send H.fresh_datom '^mktscript', text,  { $vnr, }\n    $vnr  = VNR.advance $vnr; send H.fresh_datom '>h',                { level, $vnr, }\n    return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$phase_100 = ( S ) ->\n  pipeline = []\n  pipeline.push @$trim S\n  pipeline.push @$blank_lines S\n  return PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$phase_200 = ( S ) ->\n  pipeline = []\n  pipeline.push @$codeblocks  S\n  pipeline.push @$heading     S\n  return PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@run_phase = ( S, transform ) -> new Promise ( resolve, reject ) =>\n  source    = PD.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push transform\n  # pipeline.push H.$show S\n  pipeline.push H.$feed_db S\n  pipeline.push PD.$drain => resolve()\n  PD.pull pipeline...\n  H.feed_source S, source\n\n#-----------------------------------------------------------------------------------------------------------\n@translate_document = ( mirage ) -> new Promise ( resolve, reject ) =>\n  S         = { mirage, }\n  limit     = Infinity\n  phases    = [\n    '$phase_100'\n    '$phase_200'\n    ]\n  #.........................................................................................................\n  for phase in phases\n    transform = @[ phase ] S\n    help \"phase #{rpr phase}\"\n    await @run_phase S, transform\n  H.show_overview S\n  resolve()\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  do =>\n    #.......................................................................................................\n    settings =\n      file_path:  project_abspath './src/tests/demo.md'\n      db_path:    '/tmp/mirage.db'\n      icql_path:  project_abspath './db/datamill.icql'\n    mirage = await MIRAGE.create settings\n    await @translate_document mirage\n    help 'ok'\n\n\n\n\n\n"
  ]
}