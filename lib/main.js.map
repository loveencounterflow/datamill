{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nMIRAGE                    = require 'mkts-mirage'\nVNR                       = require './vnr'\n@RENDER_AS_HTML           = require './render-as-html'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n#...........................................................................................................\nH                         = require './helpers'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  project_abspath }       = H\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_phase = ( S, transform ) -> new Promise ( resolve, reject ) =>\n  source    = PD.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push transform\n  pipeline.push H.$feed_db S\n  pipeline.push PD.$drain => resolve()\n  R = PD.pull pipeline...\n  H.feed_source S, source\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@create_datamill = ( settings ) ->\n  mirage  = await MIRAGE.create settings\n  R       =\n    mirage:       mirage\n    control:\n      active_phase: null\n      queue:        []    ### A queue for flow control messages ###\n      reprise_nr:   1\n      reprise:\n        start_vnr:    null\n        stop_vnr:     null\n        phase:        null  ### name of phase that queued control messages ###\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_active_phase                = ( S, phase_name ) => S.control.active_phase = phase_name\n@_cancel_active_phase             = ( S             ) => S.control.active_phase = null\n@_length_of_control_queue         = ( S             ) => S.control.queue.length\n@_control_queue_has_messages      = ( S             ) => ( @_length_of_control_queue S ) > 0\n@_next_control_message_is_from    = ( S, phase_name ) => S.control.queue[ 0 ]?.phase is phase_name\n@_is_reprising                    = ( S             ) => S.control.reprise.phase?\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_to_reprising = ( S, message ) =>\n  validate.datamill_reprising_message message\n  assign S.control.reprise.phase, message\n  S.control.reprise_nr += +1\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_conclude_current_reprise = ( S ) =>\n  S.control.reprise[ key ] = null for key of S.control.reprise\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_pluck_next_control_message = ( S ) =>\n  throw new Error \"µ11092 queue is empty\" unless S.control.queue.length > 0\n  message = S.control.queue.shift()\n  assign S.control.reprise, message\n  return message\n\n#-----------------------------------------------------------------------------------------------------------\n@reprise = ( S, region ) =>\n  validate.datamill_inclusive_region  region\n  validate.nonempty_text              S.control.active_phase\n  { first_vnr\n    last_vnr } = region\n  S.control.queue.push PD.new_datom '~reprise', { first_vnr, last_vnr, phase: S.control.active_phase, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_document = ( S ) -> new Promise ( resolve, reject ) =>\n  limit       = Infinity\n  phase_names = [\n    './000-initialize'\n    './005-start-stop'\n    './006-ignore'\n    './010-1-whitespace'\n    './010-2-whitespace-dst'\n    './020-blocks'\n    './030-paragraphs'\n    './040-markdown-inline'\n    # # './030-escapes'\n    # # './035-special-forms'\n    # './xxx-validation'\n    ]\n  #.........................................................................................................\n  msg_1 = ->\n    nrs_txt         = CND.reverse CND.yellow \" r#{S.control.reprise_nr} p#{pass} \"\n    help 'µ55567 ' + nrs_txt + ( CND.lime \" phase #{phase_name} \" )\n  #.........................................................................................................\n  msg_2 = ( phase_name ) ->\n    nrs_txt = CND.reverse CND.yellow \" r#{S.control.reprise_nr} \"\n    info 'µ22872', nrs_txt + CND.blue \" finished reprise for #{phase_name}\"\n    info()\n  #.........................................................................................................\n  msg_2a = ( phase_name ) ->\n    info 'µ22872', CND.blue \"continuing without limits\"\n    info()\n  #.........................................................................................................\n  msg_3 = ( message ) ->\n    nrs_txt         = CND.reverse CND.yellow \" r#{S.control.reprise_nr} \"\n    info()\n    info 'µ33324', nrs_txt + CND.blue \" reprise for #{message.phase} with fragment #{jr message.first_vnr} <= vnr <= #{jr message.last_vnr}\"\n  #.........................................................................................................\n  loop\n    try\n      # ### TAINT use API ###\n      # S.confine_to = null\n      # S.confine_from_phase = null\n      for phase_name in phase_names\n        @_set_active_phase S, phase_name\n        # length_of_queue = @_length_of_control_queue S\n        phase           = require phase_name\n        pass            = 1\n        msg_1()\n        await @run_phase S, phase.$transform S\n        #...................................................................................................\n        if S.control.reprise.phase is phase_name\n          ### Conclude reprise; continue with upcoming phase and entire document ###\n          ### TAINT do we have to stack boundaries? ###\n          msg_2 phase_name\n          @_conclude_current_reprise S\n        #...................................................................................................\n        if @_next_control_message_is_from S, phase_name\n          throw @_pluck_next_control_message S\n        # msg_2a() unless @_control_queue_has_messages S\n        #...................................................................................................\n        if H.repeat_phase S, phase\n          throw new Error \"µ33443 phase repeating not implemented (#{rpr phase_name})\"\n        @_cancel_active_phase S\n    #.......................................................................................................\n    catch message\n      throw message unless ( select message, '~reprise' )\n      @_set_to_reprising S, message\n      msg_3 message\n      ### TAINT use API ###\n      continue\n    break\n  #.........................................................................................................\n  resolve()\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  do =>\n    #.......................................................................................................\n    settings =\n      # file_path:      project_abspath './src/tests/demo.md'\n      # file_path:      project_abspath './src/tests/demo-medium.md'\n      file_path:      project_abspath './src/tests/demo-simple-paragraphs.md'\n      # db_path:        ':memory:'\n      db_path:        project_abspath './db/datamill.db'\n      icql_path:      project_abspath './db/datamill.icql'\n      default_key:    '^line'\n      default_dest:   'main'\n      default_realm:  'input'\n      clear:          true\n    help \"using database at #{settings.db_path}\"\n    datamill = await @create_datamill settings\n    await @parse_document         datamill\n    await @RENDER_AS_HTML.render  datamill\n    await H.show_overview datamill\n    #.......................................................................................................\n    { to_width\n      width_of }              = require 'to-width'\n    db                        = datamill.mirage.db\n    for row from db.$.query \"select * from main where key = '^html' order by vnr_blob;\"\n      d       = H.datom_from_row datamill, row\n      { text\n        $vnr } = d\n      lnr = $vnr[ 0 ]\n      # echo text, \"<!-- #{lnr} -->\"\n      echo ( CND.reverse CND.BLUE to_width text, 100 ) + ( CND.grey lnr )\n    #.......................................................................................................\n    #   info jr H.datom_from_row null, row\n      # { prv_dest, dest, stamped, key, } = row\n      # info jr { prv_dest, dest, stamped, key, }\n    #.......................................................................................................\n    # for row from db.$.query \"select * from dest_changes_forward order by vnr_blob;\"\n    #   { prv_dest, dest, stamped, key, } = row\n    #   info jr { prv_dest, dest, stamped, key, }\n    # for row from db.read_changed_dest_last_lines()\n    #   delete row.vnr_blob\n    #   help jr row\n    # for row from db.read_changed_dest_first_lines()\n    #   delete row.vnr_blob\n    #   info jr row\n    # help 'ok'\n    return null\n\n\n\n\n"
  ]
}