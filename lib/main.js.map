{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AAKA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,WAAA,EAAA,WAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,eAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,CAAA,CAAE,EAAF,EACE,MADF,CAAA,GAC4B,GAD5B,EAbA;;;EAgBA,OAAA,CAA0B,qBAA1B;;EACA,KAAA,GAA4B,MAAA,CAAO,OAAP;;EAC5B,IAAA,GAA4B,MAAA,CAAO,MAAP;;EAC5B,MAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,OAAR,EApB5B;;;EAsBA,EAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,EAGE,MAHF,EAIE,KAJF,CAAA,GAI4B,EAJ5B,EAvBA;;;EA6BA,IAAC,CAAA,KAAD,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,OAHF,EAIE,OAJF,CAAA,GAI4B,IAAC,CAAA,KAJ7B,EA9BA;;;EAoCA,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,CAAA,CAAE,WAAF,EACE,WADF,EAEE,YAFF,EAGE,eAHF,CAAA,GAG4B,CAH5B,EArCA;;;;;EAgDA,IAAC,CAAA,SAAD,GAAa,QAAA,CAAE,CAAF,EAAK,SAAL,CAAA;WAAoB,IAAI,OAAJ,CAAY,CAAE,OAAF,EAAW,MAAX,CAAA,GAAA;AAE3C,UAAA,yBAAA,EAAA,QAAA,EAAA,MAAA;;MAAA,yBAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;eAAS,CAAA,CAAE,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UACrC,IAAG,MAAA,CAAO,CAAP,EAAU,GAAV,CAAH;AACE,oBAAO,CAAC,CAAC,GAAT;AAAA,mBACO,kCADP;uBAEI,CAAC,CAAC,OAAO,CAAC,IAAV,CAAe,CAAf;AAFJ;gBAII,MAAM,IAAI,KAAJ,CAAU,CAAA,0BAAA,CAAA,CAA6B,GAAA,CAAI,CAAC,CAAC,GAAN,CAA7B,CAAA,CAAV;AAJV,aADF;WAAA,MAAA;mBAOE,IAAA,CAAK,CAAL,EAPF;;QADqC,CAAF;MAAT,EAA5B;;MAUA,MAAA,GAAY,EAAE,CAAC,eAAH,CAAA;MACZ,QAAA,GAAY;MACZ,QAAQ,CAAC,IAAT,CAAc,MAAd;MACA,QAAQ,CAAC,IAAT,CAAc,SAAd;MACA,QAAQ,CAAC,IAAT,CAAc,yBAAA,CAA0B,CAA1B,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,QAAF,CAA0B,CAA1B,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,CAAA,CAAA,GAAA;eAAG,OAAA,CAAA;MAAH,CAAV,CAAd;MACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;aACA,CAAC,CAAC,WAAF,CAAc,CAAd,EAAiB,MAAjB;IApB2C,CAAZ;EAApB,EAhDb;;;EAuEA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAE,MAAF,CAAA;AACd,QAAA;IAAA,CAAA,GACE;MAAA,MAAA,EAAc,MAAd;MACA,OAAA,EAAc,EADd;6CAEA,UAAA,EAAc;IAFd;6CAGF,WAAO;EALO,EAvEhB;;;EA+EA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,MAAF,CAAA;WAAc,IAAI,OAAJ,CAAY,KAAA,CAAE,OAAF,EAAW,MAAX,CAAA,GAAA;AAC9C,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,UAAA,EAAA;MAAA,CAAA,GAAc,IAAC,CAAA,YAAD,CAAc,MAAd;MACd,KAAA,GAAc;MACd,WAAA,GAAc;QACZ,kBADY;QAEZ,kBAFY;QAGZ,cAHY;QAIZ,oBAJY;QAKZ,cALY;QAMZ,oBANY;QAOZ,2BAPY;QAQZ,gCARY;QASZ,uBATY;;;QAYZ,kBAZY;;AAed,aAAA,IAAA;AACE;;UACE,KAAA,6CAAA;;YACE,KAAA,GAAY,OAAA,CAAQ,UAAR;YACZ,IAAA,GAAY;YACZ,IAAA,CAAK,SAAA,GAAY,CAAE,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,MAAJ,CAAW,CAAA,MAAA,CAAA,CAAS,IAAT,EAAA,CAAX,CAAZ,CAAF,CAAZ,GAA0D,CAAE,GAAG,CAAC,IAAJ,CAAS,CAAA,OAAA,CAAA,CAAU,UAAV,EAAA,CAAT,CAAF,CAA/D;YACA,MAAM,IAAC,CAAA,SAAD,CAAW,CAAX,EAAc,KAAK,CAAC,UAAN,CAAiB,CAAjB,CAAd,EAHN;;;YAMA,IAAO,oBAAP;cACE,IAAiB,qCAAjB;gBAAA,MAAM,QAAN;eADF;aANA;;YASA,IAAG,CAAC,CAAC,YAAF,CAAe,CAAf,EAAkB,KAAlB,CAAH;cACE,MAAM,IAAI,KAAJ,CAAU,CAAA,wCAAA,CAAA,CAA2C,GAAA,CAAI,UAAJ,CAA3C,CAA0D,CAA1D,CAAV,EADR;;UAVF,CADF;SAAA,aAAA;;UAcM;UACJ,IAAA,CAAe,CAAE,MAAA,CAAO,CAAP,EAAU,qCAAV,CAAF,CAAf;YAAA,MAAM,EAAN;;UACA,IAAA,CAAK,CAAA,+BAAA,CAAA,CAAkC,EAAA,CAAG,CAAC,CAAC,SAAL,CAAlC,CAAiD,GAAjD,CAAA,CAAsD,EAAA,CAAG,CAAC,CAAC,QAAL,CAAtD,CAAA,CAAL;UACA,CAAC,CAAC,UAAF,GAAe;AACf,mBAlBF;;AAmBA;MApBF,CAjBA;;;MAwCA,CAAC,CAAC,aAAF,CAAgB,CAAhB;MACA,OAAA,CAAA,EAzCA;;AA2CA,aAAO;IA5CuC,CAAZ;EAAd,EA/EtB;;;EA+HA,IAAO,qBAAP;IACK,CAAA,KAAA,CAAA,CAAA,GAAA;AAED,UAAA,MAAA,EAAA,QAAA;;MAAA,QAAA,GACE;QAAA,SAAA,EAAc,eAAA,CAAgB,qBAAhB,CAAd;;;QAGA,OAAA,EAAc,eAAA,CAAgB,kBAAhB,CAHd;QAIA,SAAA,EAAc,eAAA,CAAgB,oBAAhB,CAJd;QAKA,WAAA,EAAc,OALd;QAMA,YAAA,EAAc,MANd;QAOA,KAAA,EAAc;MAPd;MAQF,IAAA,CAAK,CAAA,kBAAA,CAAA,CAAqB,QAAQ,CAAC,OAA9B,CAAA,CAAL;MACA,MAAA,GAAU,CAAA,MAAM,MAAM,CAAC,MAAP,CAAc,QAAd,CAAN;MACV,MAAM,IAAC,CAAA,kBAAD,CAAoB,MAApB,EAXN;;;;;;;;;;;;;;;AA0BA,aAAO;IA5BN,CAAA,CAAH,CAAA,EADF;;AA/HA",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nMIRAGE                    = require 'mkts-mirage'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = @types\n#...........................................................................................................\nH                         = require './helpers'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  project_abspath }       = H\n\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_phase = ( S, transform ) -> new Promise ( resolve, reject ) =>\n  #.........................................................................................................\n  $capture_control_messages = ( S ) -> $ ( d, send ) =>\n    if select d, '~'\n      switch d.key\n        when '~datamill-break-phase-and-repeat'\n          S.control.push d\n        else\n          throw new Error \"Âµ98401 unknown system key #{rpr d.key}\"\n    else\n      send d\n  #.........................................................................................................\n  source    = PD.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push transform\n  pipeline.push $capture_control_messages S\n  pipeline.push H.$feed_db                S\n  pipeline.push PD.$drain => resolve()\n  PD.pull pipeline...\n  H.feed_source S, source\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datamill = ( mirage ) ->\n  R =\n    mirage:       mirage\n    control:      [] ### A queue for flow control messages ###\n    confine_to:   null ### when set, indicates start_vnr, stop_vnr ###\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@translate_document = ( mirage ) -> new Promise ( resolve, reject ) =>\n  S           = @new_datamill mirage\n  limit       = Infinity\n  phase_names = [\n    './000-initialize'\n    './005-start-stop'\n    './006-ignore'\n    './010-whitespace-1'\n    './020-blocks'\n    './025-whitespace-2'\n    './030-1-paragraphs-breaks'\n    './030-2-paragraphs-consolidate'\n    './040-markdown-inline'\n    # './030-escapes'\n    # './035-special-forms'\n    './xxx-validation'\n    ]\n  #.........................................................................................................\n  loop\n    try\n      for phase_name in phase_names\n        phase     = require phase_name\n        pass      = 1\n        help 'Âµ55567 ' + ( CND.reverse CND.yellow \" pass #{pass} \" ) + ( CND.lime \" phase #{phase_name} \" )\n        await @run_phase S, phase.$transform S\n        #.....................................................................................................\n        ### TAINT use proper flag / API ###\n        unless S.confine_to?\n          throw message if ( message = S.control.shift() )?\n        #.....................................................................................................\n        if H.repeat_phase S, phase\n          throw new Error \"Âµ33443 phase repeating not implemented (#{rpr phase_name})\"\n    #.........................................................................................................\n    catch m\n      throw m unless ( select m, '~break_phase_and_repeat_confined_to' )\n      info \"Âµ33324 breaking to repeat with #{jr m.start_vnr}...#{jr m.stop_vnr}\"\n      S.confine_to = m\n      continue\n    break\n  #.........................................................................................................\n  # H.show_overview S, { hilite: '^blank', }\n  H.show_overview S\n  resolve()\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  do =>\n    #.......................................................................................................\n    settings =\n      file_path:    project_abspath './src/tests/demo.md'\n      # file_path:    project_abspath './src/tests/demo-simple-paragraphs.md'\n      # db_path:      ':memory:'\n      db_path:      project_abspath './db/datamill.db'\n      icql_path:    project_abspath './db/datamill.icql'\n      default_key:  '^line'\n      default_dest: 'main'\n      clear:        true\n    help \"using database at #{settings.db_path}\"\n    mirage  = await MIRAGE.create settings\n    await @translate_document mirage\n    # db      = mirage.db\n    # for row from db.$.query \"select * from dest_changes_backward order by vnr_blob;\"\n    #   delete row.vnr_blob\n    #   help jr row\n    # for row from db.$.query \"select * from dest_changes_forward order by vnr_blob;\"\n    #   delete row.vnr_blob\n    #   info jr row\n    # for row from db.read_changed_dest_last_lines()\n    #   delete row.vnr_blob\n    #   help jr row\n    # for row from db.read_changed_dest_first_lines()\n    #   delete row.vnr_blob\n    #   info jr row\n    # help 'ok'\n    return null\n\n\n\n\n"
  ]
}