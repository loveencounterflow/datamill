{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nMIRAGE                    = require 'mkts-mirage'\n#...........................................................................................................\nSP                        = require 'steampipes'\n{ $\n  $watch\n  $async }                = SP.export()\n#...........................................................................................................\nDATOM                     = require 'datom'\n{ select\n  stamp }                 = DATOM.export()\n{ VNR }                   = DATOM\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n#...........................................................................................................\nH                         = require './helpers'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  project_abspath }       = H\nDATAMILL                  = @\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_phase = ( S, settings, transform ) -> new Promise ( resolve, reject ) =>\n  defaults = { from_realm: S.mirage.default_realm, }\n  settings = { defaults..., settings..., }\n  validate.datamill_run_phase_settings settings\n  # debug 'µ33344', jr S\n  # source    = H.new_db_source S\n  # pipeline  = []\n  # pipeline.push source\n  # pipeline.push transform\n  # pipeline.push H.$feed_db S\n  # pipeline.push SP.$drain => resolve()\n  # R = SP.pull pipeline...\n  source    = SP.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push transform\n  pipeline.push H.$feed_db S\n  pipeline.push SP.$drain => resolve()\n  R = SP.pull pipeline...\n  H.feed_source S, source, settings.from_realm\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT consider to use dedicated DB module akin to mkts-mirage/src/db.coffee ###\n@_create_udfs = ( mirage ) ->\n  db = mirage.db\n  ### Placeholder function re-defined by `H.copy_realm()`: ###\n  db.$.function 'datamill_copy_realm_select', { deterministic: false, varargs: false }, ( row ) -> true\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@create = ( settings ) ->\n  ### TAINT set active realm ###\n  defaults =\n    file_path:      null\n    # db_path:        ':memory:'\n    db_path:        H.project_abspath 'db/datamill.db'\n    icql_path:      H.project_abspath 'db/datamill.icql'\n    default_key:    '^line'\n    default_dest:   'main'\n    default_realm:  'input'\n    clear:          true\n  #.........................................................................................................\n  settings  = { defaults..., settings..., }\n  mirage    = await MIRAGE.create settings\n  #.........................................................................................................\n  R         =\n    mirage:       mirage\n    control:\n      active_phase: null\n      queue:        []    ### A queue for flow control messages ###\n      reprise_nr:   1\n      reprise:\n        start_vnr:    null\n        stop_vnr:     null\n        phase:        null  ### name of phase that queued control messages ###\n  #.........................................................................................................\n  ### TAINT consider to use dedicated DB module akin to mkts-mirage/src/db.coffee ###\n  @_create_udfs mirage\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_active_phase                = ( S, phase_name ) => S.control.active_phase = phase_name\n@_cancel_active_phase             = ( S             ) => S.control.active_phase = null\n@_length_of_control_queue         = ( S             ) => S.control.queue.length\n@_control_queue_has_messages      = ( S             ) => ( @_length_of_control_queue S ) > 0\n@_next_control_message_is_from    = ( S, phase_name ) => S.control.queue[ 0 ]?.phase is phase_name\n@_is_reprising                    = ( S             ) => S.control.reprise.phase?\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_to_reprising = ( S, message ) =>\n  validate.datamill_reprising_message message\n  assign S.control.reprise.phase, message\n  S.control.reprise_nr += +1\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_conclude_current_reprise = ( S ) =>\n  S.control.reprise[ key ] = null for key of S.control.reprise\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_pluck_next_control_message = ( S ) =>\n  throw new Error \"µ11092 queue is empty\" unless S.control.queue.length > 0\n  message = S.control.queue.shift()\n  assign S.control.reprise, message\n  return message\n\n#-----------------------------------------------------------------------------------------------------------\n@reprise = ( S, region ) =>\n  validate.datamill_inclusive_region  region\n  validate.nonempty_text              S.control.active_phase\n  ### TAINT use explicit datatype to test for additional condition ###\n  validate.nonempty_text              region.ref\n  { first_vnr\n    last_vnr\n    ref       } = region\n  S.control.queue.push SP.new_datom '~reprise', { first_vnr, last_vnr, phase: S.control.active_phase, ref, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@render_html = ( S, settings ) -> new Promise ( resolve, reject ) =>\n  defaults  = { phase_names: [ './900-render-html', ], }\n  settings  = { defaults..., settings..., }\n  resolve await @parse_document S, settings\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_document = ( S, settings ) -> new Promise ( resolve, reject ) =>\n  defaults =\n    quiet:        false\n    phase_names:  [\n      './000-initialize'\n      './005-start-stop'\n      './006-ignore'\n      './010-1-whitespace'\n      './010-2-whitespace-dst'\n      './020-blocks'\n      './030-paragraphs'\n      './035-hunks'\n      './040-markdown-inline'\n      # # './030-escapes'\n      # # './035-special-forms'\n      './xxx-validation'\n      # './900-render-html'\n      ]\n  settings  = { defaults..., settings..., }\n  validate.datamill_parse_document_settings settings\n  #.........................................................................................................\n  msg_1 = ->\n    return if settings.quiet\n    nrs_txt         = CND.reverse CND.yellow \" r#{S.control.reprise_nr} p#{pass} \"\n    help 'µ55567 ' + nrs_txt + ( CND.lime \" phase #{phase_name} \" )\n  #.........................................................................................................\n  msg_2 = ( phase_name ) ->\n    return if settings.quiet\n    nrs_txt = CND.reverse CND.yellow \" r#{S.control.reprise_nr} \"\n    info 'µ22872', nrs_txt + CND.blue \" finished reprise for #{phase_name}\"\n    info()\n  #.........................................................................................................\n  msg_2a = ( phase_name ) ->\n    return if settings.quiet\n    info 'µ22872', CND.blue \"continuing without limits\"\n    info()\n  #.........................................................................................................\n  msg_3 = ( message ) ->\n    return if settings.quiet\n    nrs_txt         = CND.reverse CND.yellow \" r#{S.control.reprise_nr} \"\n    info()\n    info 'µ33324', nrs_txt + CND.blue \" reprise for #{message.phase} with fragment #{jr message.first_vnr} <= vnr <= #{jr message.last_vnr} (ref: #{message.ref})\"\n  #.........................................................................................................\n  loop\n    try\n      # ### TAINT use API ###\n      # S.confine_to = null\n      # S.confine_from_phase = null\n      for phase_name in settings.phase_names\n        @_set_active_phase S, phase_name\n        # length_of_queue = @_length_of_control_queue S\n        phase           = require phase_name\n        pass            = 1\n        msg_1()\n        await @run_phase S, ( phase.settings ? null ), ( phase.$transform S )\n        #...................................................................................................\n        if S.control.reprise.phase is phase_name\n          ### Conclude reprise; continue with upcoming phase and entire document ###\n          ### TAINT do we have to stack boundaries? ###\n          msg_2 phase_name\n          @_conclude_current_reprise S\n        #...................................................................................................\n        if @_next_control_message_is_from S, phase_name\n          throw @_pluck_next_control_message S\n        # msg_2a() unless @_control_queue_has_messages S\n        #...................................................................................................\n        if H.repeat_phase S, phase\n          throw new Error \"µ33443 phase repeating not implemented (#{rpr phase_name})\"\n        @_cancel_active_phase S\n    #.......................................................................................................\n    catch message\n      throw message unless ( select message, '~reprise' )\n      @_set_to_reprising S, message\n      msg_3 message\n      ### TAINT use API ###\n      continue\n    break\n  #.........................................................................................................\n  resolve()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_list_html_rows = ( S ) -> new Promise ( resolve ) =>\n  #.......................................................................................................\n  pipeline  = []\n  pipeline.push H.new_db_source S, 'html'\n  pipeline.push SP.$show()\n  pipeline.push SP.$drain -> resolve()\n  SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo = ->\n  await do => new Promise ( resolve ) =>\n    #.......................................................................................................\n    settings  =\n      # file_path:      project_abspath 'src/tests/demo-short-headlines.md'\n      # file_path:      project_abspath 'src/tests/demo.md'\n      file_path:      project_abspath 'src/tests/demo-medium.md'\n      # file_path:      project_abspath 'src/tests/demo-simple-paragraphs.md'\n    #.......................................................................................................\n    help \"using database at #{settings.db_path}\"\n    datamill  = await DATAMILL.create settings\n    quiet     = false\n    quiet     = true\n    await DATAMILL.parse_document       datamill, { quiet, }\n    await @render_html                  datamill, { quiet, }\n    # await @_demo_list_html_rows         datamill\n    #.......................................................................................................\n    await H.show_overview               datamill\n    await H.show_html                   datamill\n    HTML = require './900-render-html'\n    await HTML.write_to_file datamill\n    resolve()\n    return null\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  await DATAMILL._demo()\n\n\n\n\n"
  ]
}