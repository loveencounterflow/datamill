{
  "version": 3,
  "file": "030-2-paragraphs-consolidate.js",
  "sourceRoot": "..",
  "sources": [
    "src/030-2-paragraphs-consolidate.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$paragraphs = ( S ) ->\n  H.register_key S, '<p', { is_block: true, }\n  H.register_key S, '>p', { is_block: true, }\n  key_registry    = H.get_key_registry S\n  within_p        = false\n  block_depth     = 0\n  prv_was_break   = false\n  prv_line_vnr    = null\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d if PD.is_stamped d\n    #.......................................................................................................\n    is_block  = key_registry[ d.key ].is_block\n    is_opener = select d, '<'\n    is_closer = select d, '>'\n    if is_block\n      if is_opener then block_depth++\n      else              block_depth--\n    return send d unless block_depth is 0\n    #.......................................................................................................\n    if select d, '^break'\n      prv_was_break = true\n      send stamp d\n      debug 'µ440098', jr d\n      if within_p\n        ref           = 'µ15603'\n        dest          = d.dest\n        throw new Error \"µ44982\" unless prv_line_vnr?\n        $vnr          = VNR.new_level prv_line_vnr, 0\n        prv_line_vnr  = null\n        # $vnr          = VNR.new_level d.$vnr, 0\n        # $vnr          = VNR.advance $vnr; send PD.set d, '$vnr', $vnr\n        $vnr          = VNR.advance $vnr; send H.fresh_datom '>p', { $vnr, dest, ref, }\n        within_p      = false\n        prv_was_break = false\n    #.......................................................................................................\n    if select d, '^line'\n      prv_line_vnr = d.$vnr\n      if prv_was_break\n        ref           = 'µ15604'\n        dest          = d.dest\n        $vnr          = VNR.new_level d.$vnr, 0\n        $vnr          = VNR.advance $vnr; send H.fresh_datom '<p', { $vnr, dest, ref, }\n        $vnr          = VNR.advance $vnr; send PD.set d, '$vnr', $vnr\n        prv_line_vnr  = $vnr\n        within_p      = true\n        prv_was_break = false\n        send stamp d\n      else\n        send d\n    #.......................................................................................................\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$experiment = ( S ) ->\n  H.register_key S, '^x', { is_block: false, }\n  #.........................................................................................................\n  return $ { last, }, ( d, send ) =>\n    return send d unless d is last\n    send H.fresh_datom '^x', { $vnr: [ 10, -1, ], dest: 'xxx', }\n    send H.fresh_datom '^x', { $vnr: [ 10,  0, ], dest: 'xxx', }\n    return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$paragraphs  S\n  pipeline.push @$experiment  S\n  return PD.pull pipeline...\n\n"
  ]
}