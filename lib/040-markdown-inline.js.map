{
  "version": 3,
  "file": "040-markdown-inline.js",
  "sourceRoot": "..",
  "sources": [
    "src/040-markdown-inline.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\nMd                        = require 'markdown-it'\nmd                        = new Md()\nTIMETUNNEL                = require 'timetunnel'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$consolidate_paragraphs = ( S ) ->\n  collector = null\n  $vnr      = null\n  send      = null\n  #.........................................................................................................\n  flush = ->\n    return if ( not collector? ) or ( collector.length is 0 )\n    text      = collector.join '\\n'\n    send H.fresh_datom '^block', { text, $vnr, }\n    collector = null\n    $vnr      = null\n    return null\n  #.........................................................................................................\n  return $ { last, }, ( d, send_ ) =>\n    send = send_\n    if d is last\n      flush()\n    else if select d, '^line'\n      $vnr       ?= VNR.new_level d.$vnr, 1\n      collector  ?= []\n      collector.push d.text\n      send stamp d\n    else if select d, '^blank'\n      flush()\n      send d\n    else\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$parse = ( S ) ->\n  guards    = 'äöüßp'\n  intalph   = '0123456789'\n  tnl       = new TIMETUNNEL.Timetunnel { guards, intalph, }\n  # tnl.add_tunnel TIMETUNNEL.tunnels.remove_backslash\n  # tnl.add_tunnel TIMETUNNEL.tunnels.keep_backslash\n  tnl.add_tunnel TIMETUNNEL.tunnels.htmlish\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless ( select d, '^mktscript' )\n    #.......................................................................................................\n    original_text = d.text\n    tunneled_text = tnl.hide original_text\n    modified_text = md.renderInline tunneled_text\n    text          = tnl.reveal modified_text\n    # info 'µ33344', ( CND.white rpr text ), ( CND.yellow md.parse text )\n    #.......................................................................................................\n    info 'µ33344', ( CND.white  jr original_text )\n    info 'µ33344', ( CND.red    jr tunneled_text )\n    info 'µ33344', ( CND.yellow jr modified_text )\n    info 'µ33344', ( CND.green  jr text )\n    info 'µ33344'\n    #.......................................................................................................\n    send stamp d\n    $vnr  = VNR.new_level d.$vnr, 0\n    $vnr  = VNR.advance $vnr; send H.fresh_datom '^mktscript', { text, $vnr, }\n    send\n\n#-----------------------------------------------------------------------------------------------------------\n@repeat_phase = false\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$consolidate_paragraphs  S\n  pipeline.push @$parse                   S\n  return PD.pull pipeline...\n\n"
  ]
}