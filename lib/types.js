// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, Intertype, alert, badge, debug, help, info, intertype, jr, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS-PARSER/TYPES';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  jr = JSON.stringify;

  Intertype = (require('intertype')).Intertype;

  intertype = new Intertype(module.exports);

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_phase_repeat', function(x) {
    if (x == null) {
      return true;
    }
    if (this.isa.boolean(x)) {
      return true;
    }
    return this.isa.function(x);
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_region', function(x) {
    return {
      tests: {
        "x is an inclusive or an exclusive region": function(x) {
          var is_exclusive, is_inclusive;
          is_inclusive = this.isa.datamill_inclusive_region(x);
          is_exclusive = this.isa.datamill_exclusive_region(x);
          return (is_inclusive || is_exclusive) && !(is_inclusive && is_exclusive);
        }
      }
    };
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_exclusive_region', function(x) {
    return {
      tests: {
        "x is an object": function(x) {
          return this.isa.object(x);
        },
        "x.start_vnr is a vnr": function(x) {
          return isa.vnr(x.start_vnr);
        },
        "x.stop_vnr is a vnr": function(x) {
          return isa.vnr(x.stop_vnr);
        }
      }
    };
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_inclusive_region', function(x) {
    return {
      tests: {
        "x is an object": function(x) {
          return this.isa.object(x);
        },
        "x.first_vnr is a vnr": function(x) {
          return isa.vnr(x.first_vnr);
        },
        "x.last_vnr is a vnr": function(x) {
          return isa.vnr(x.last_vnr);
        }
      }
    };
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_reprising_message', function(x) {
    return {
      tests: {
        "x is an object": function(x) {
          return this.isa.object(x);
        },
        "x.key is '^reprise'": function(x) {
          return this.isa.key === '^reprise';
        },
        "x.phase is a nonempty_text": function(x) {
          return isa.nonempty_text(x.phase);
        },
        "x is a datamill_region": function(x) {
          return isa.datamill_region(x);
        }
      }
    };
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_register_key_settings', function(x) {
    return {
      tests: {
        "x is a object": function(x) {
          return this.isa.object(x);
        },
        "x.is_block is a boolean": function(x) {
          return this.isa.boolean(x.is_block);
        },
        "x.has_paragraphs is a ?boolean": function(x) {
          return (x.has_paragraphs == null) || this.isa.boolean(x.has_paragraphs);
        }
      }
    };
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_realm', function(x) {
    return {
      tests: {
        "x is a nonempty text": function(x) {
          return this.isa.nonempty_text(x);
        }
      }
    };
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_run_phase_settings', function(x) {
    return {
      tests: {
        "x is a object": function(x) {
          return this.isa.object(x);
        },
        "x.from_realm is a datamill_realm": function(x) {
          return this.isa.datamill_realm(x.from_realm);
        }
      }
    };
  });

  // "x.to_realm is a datamill_realm":     ( x ) -> @isa.datamill_realm  x.to_realm
  // "x.transform is a function":          ( x ) -> @isa.function        x.transform

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_parse_document_settings', function(x) {
    return {
      tests: {
        "x is a object": function(x) {
          return this.isa.object(x);
        },
        "x.phase_names is a ?list": function(x) {
          return (x.phase_names == null) || (this.isa.list(x.phase_names));
        },
        "x.quiet is a ?boolean": function(x) {
          return (x.quiet == null) || (this.isa.boolean(x.quiet));
        }
      }
    };
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('datamill_resume_from_db_settings', function(x) {
    return {
      tests: {
        "x is a object": function(x) {
          return this.isa.object(x);
        },
        "x.phase is a datamill_realm": function(x) {
          return this.isa.datamill_realm(x.realm);
        }
      }
    };
  });

  // #-----------------------------------------------------------------------------------------------------------
// @declare 'datamill_copy_realms_settings', ( x ) ->
//   tests:
//     "x is a object":                      ( x ) -> @isa.object        x
//     "x.from is a object":                 ( x ) -> @isa.object        x.from
//     "x.to is a object":                   ( x ) -> @isa.object        x.to
//     "x.from.realm is a nonempty text":    ( x ) -> @isa.nonempty_text x.from.realm
//     "x.from.select is a ?function":       ( x ) -> ( not x.from.select?) or ( @isa.function x.from.select )
//     "x.to.realm is a nonempty text":      ( x ) -> @isa.nonempty_text x.to.realm

// tests:
//   "optional x is function or boolean":
//     "x is a object":                          ( x ) -> @isa.object          x
//     "x has key 'key'":                        ( x ) -> @has_key             x, 'key'
//     "x has key 'vlnr_txt'":                   ( x ) -> @has_key             x, 'vlnr_txt'
//     "x has key 'value'":                      ( x ) -> @has_key             x, 'value'
//     "x.key is a nonempty text":               ( x ) -> @isa.nonempty_text   x.key
//     "x.vlnr_txt is a nonempty text":          ( x ) -> @isa.nonempty_text   x.vlnr_txt
//     "x.vlnr_txt starts, ends with '[]'":      ( x ) -> ( x.vlnr_txt.match /^\[.*\]$/ )?
//     "x.vlnr_txt is a JSON array of integers": ( x ) ->
//       # debug 'Âµ55589', x
//       ( @isa.list ( lst = JSON.parse x.vlnr_txt ) ) and \
//       ( lst.every ( xx ) => ( @isa.integer xx ) and ( @isa.positive xx ) )

}).call(this);

//# sourceMappingURL=types.js.map
