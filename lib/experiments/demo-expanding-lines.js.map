{
  "version": 3,
  "file": "demo-expanding-lines.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo-expanding-lines.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/EXPERIMENTS/EXPANDING-LINES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n{ assign\n  jr }                    = CND\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\ntypes                     = require '../types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n{ assign }                = require '../helpers'\n#...........................................................................................................\nrequire                   '../exception-handler'\nMIRAGE                    = require 'mkts-mirage'\ndo_validate               = true\nDATAMILL                  = require '../..'\n\n#-----------------------------------------------------------------------------------------------------------\nformat_object = ( d ) ->\n  R = {}\n  R[ k ] = d[ k ] for k in ( k for k of d ).sort()\n  return jr R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datom = ( P ... ) ->\n  R           = PD.thaw PD.new_datom P...\n  R.vnr_txt   = ( jr R.$vnr ) if ( not R.vnr_txt )? and ( R.$vnr? )\n  R.$fresh    = true\n  return PD.freeze R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_vnr_level = ( vnr, nr = 1 ) ->\n  ### Given a `mirage` instance and a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has an index of `0` appended, thus representing the pre-first `vnr` for a level of lines\n  derived from the one that the original `vnr` pointed to. ###\n  validate.nonempty_list vnr\n  R = assign [], vnr\n  R.push nr\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@advance_vnr = ( vnr ) ->\n  ### Given a `mirage` instance and a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the\n  next line in the same level that is derived from the same line as its predecessor. ###\n  validate.nonempty_list vnr\n  R                    = assign [], vnr\n  R[ vnr.length - 1 ] += +1\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_words = ( S ) -> $ ( d, send ) =>\n  return send d unless select d, '^mktscript'\n  #.........................................................................................................\n  send stamp d\n  text      = d.value\n  prv_vnr   = d.$vnr\n  nxt_vnr  = @new_vnr_level prv_vnr\n  #.........................................................................................................\n    # unless isa.blank_text row.value\n  for word in text.split /\\s+/\n    continue if word is ''\n    nxt_vnr = @advance_vnr nxt_vnr\n    send @new_datom '^word', { text: word, $vnr: nxt_vnr, }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$blank_lines = ( S ) ->\n  prv_vnr       = null\n  linecount     = 0\n  send          = null\n  within_blank  = false\n  # is_first      = true\n  #.........................................................................................................\n  flush = ( n ) =>\n    within_blank  = false\n    $vnr          = @new_vnr_level prv_vnr\n    send PD.new_datom '^blank', { value: { linecount, }, $vnr, $fresh: true, }\n    linecount     = 0\n  #.........................................................................................................\n  return $ { last, }, ( d, send_ ) =>\n    send = send_\n    #.......................................................................................................\n    if d is last\n      flush()# if within_blank\n      return null\n    #.......................................................................................................\n    return send d unless select d, '^mktscript'\n    #.......................................................................................................\n    unless isa.blank_text d.value\n      flush() if within_blank\n      prv_vnr       = d.$vnr\n      return send d\n    #.......................................................................................................\n    send stamp d\n    prv_vnr       = d.$vnr\n    linecount     = 0 unless within_blank\n    linecount    += +1\n    within_blank  = true\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$headlines = ( S ) ->\n  pattern = /// ^ \\#+ ///\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless select d, '^mktscript'\n    return send d unless ( d.value.match pattern )?\n    debug 'µ33099', d\n    info 'µ33099', @previous_line_is_blank  S, d.$vnr\n    info 'µ33099', @next_line_is_blank      S, d.$vnr\n    send d\n    # info 'µ33344', row for row from S.mirage.db.followup { vnr: d.$vnr, }\n\n#-----------------------------------------------------------------------------------------------------------\n@previous_line_is_blank = ( S, vnr ) ->\n  return true unless ( d = @get_previous_datom S, vnr )?\n  return ( d.value.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@next_line_is_blank = ( S, vnr ) ->\n  return true unless ( d = @get_next_datom S, vnr )?\n  return ( d.value.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@get_previous_datom = ( S, vnr ) ->\n  ### TAINT consider to use types ###\n  unless vnr.length is 1\n    throw new Error \"µ33442 `get_next_datom()` not supported for nested vnrs, got #{rpr vnr}\"\n  ### TAINT need inverse to advance ###\n  return null unless vnr[ 0 ] > 1\n  vnr_txt = jr [ vnr[ 0 ] - 1 ]\n  return @datom_from_vnr S, S, vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@get_next_datom = ( S, vnr ) ->\n  ### TAINT consider to use types ###\n  unless vnr.length is 1\n    throw new Error \"µ33442 `get_next_datom()` not supported for nested vnrs, got #{rpr vnr}\"\n  return @datom_from_vnr S, @advance_vnr vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_vnr = ( S, vnr ) ->\n  sql = \"\"\"\n    select *\n    from main\n    where vnr_txt = $vnr_txt\n    \"\"\"\n  vnr_txt = jr vnr\n  dbr     = S.mirage.db\n  return null unless ( row = dbr.$.first_row dbr.$.query sql, { vnr_txt, } )\n  return @datom_from_row S, row\n\n#-----------------------------------------------------------------------------------------------------------\n@$phase_100 = ( S ) ->\n  pipeline = []\n  pipeline.push @$blank_lines S\n  return PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$phase_200 = ( S ) ->\n  pipeline = []\n  pipeline.push @$headlines S\n  return PD.pull pipeline...\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_row = ( S, row ) ->\n  ### TAINT how to convert vnr in ICQL? ###\n  vnr_txt     = row.vnr_txt\n  $vnr        = JSON.parse vnr_txt\n  R           = PD.new_datom row.key, { value: row.value, $vnr, }\n  R           = PD.set R, '$stamped', true if row.stamped\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@row_from_datom = ( S, d ) ->\n  ### TAINT how to convert booleans in ICQL? ###\n  stamped   = if d.$stamped then 1 else 0\n  vnr_txt   = jr d.$vnr\n  value     = if ( isa.text d.value ) then d.value else jr d.value\n  R         = { key: d.key, vnr_txt, value, stamped, }\n  # MIRAGE.types.validate.mirage_main_row R if do_validate\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@feed_source = ( S, source, limit = Infinity ) ->\n  dbr = S.mirage.db\n  nr  = 0\n  #.........................................................................................................\n  for row from dbr.read_unstamped_lines()\n    nr += +1\n    break if nr > limit\n    source.send @datom_from_row S, row\n  #.........................................................................................................\n  source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$feed_db = ( S ) ->\n  ### TAINT stopgap measure; should be implemented in ICQL ###\n  db2 = ( MIRAGE.new_mirage S.mirage ).db\n  return $watch ( d ) =>\n    ### TAINT how to convert vnr in ICQL? ###\n    row = @row_from_datom S, d\n    try\n      ### TAINT consider to use upsert instead https://www.sqlite.org/lang_UPSERT.html ###\n      if      d.$fresh then db2.insert row\n      else if d.$dirty then db2.update row\n    catch error\n      warn \"µ12133 when trying to insert or update row #{jr row}\"\n      warn \"µ12133 an error occurred:\"\n      warn \"µ12133 #{error.message}\"\n      throw error\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_$show = ( S ) -> $watch ( d ) =>\n  if d.$stamped then color = CND.grey\n  else\n    switch d.key\n      when '^word' then color = CND.gold\n      else color = CND.white\n  info color jr d\n\n#-----------------------------------------------------------------------------------------------------------\n@show_overview = ( S ) ->\n  dbr = S.mirage.db\n  #.........................................................................................................\n  for row from dbr.read_lines { limit: 30, }\n    # debug 'µ10001', rpr row\n    if row.stamped\n      color = CND.grey\n    else\n      color = switch row.key\n        when '^mktscript' then CND.red\n        when '^blank'     then ( P... ) -> CND.reverse CND.grey P...\n        else CND.white\n    key   = row.key.padEnd      12\n    vnr   = row.vnr_txt.padEnd  12\n    info color \"#{vnr} #{( if row.stamped then 'S' else ' ' )} #{key} #{rpr row.value[ .. 40 ]}\"\n  #.........................................................................................................\n  for row from dbr.get_stats()\n    info \"#{row.key}: #{row.count}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@run_phase = ( S, transform ) -> new Promise ( resolve, reject ) =>\n  source    = PD.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push transform\n  pipeline.push @$feed_db S\n  pipeline.push PD.$drain => resolve()\n  PD.pull pipeline...\n  @feed_source S, source\n\n#-----------------------------------------------------------------------------------------------------------\n@translate_document = -> new Promise ( resolve, reject ) =>\n  mirage    = MIRAGE.new_mirage { source_path: './src/tests/demo.md', db_path: '/tmp/mirage.db', }\n  await MIRAGE.acquire      mirage\n  S         = { mirage, }\n  limit     = Infinity\n  phases    = [\n    '$phase_100'\n    '$phase_200'\n    ]\n  #.........................................................................................................\n  for phase in phases\n    transform = @[ phase ] S\n    help \"phase #{rpr phase}\"\n    await @run_phase S, transform\n  @show_overview S\n  resolve()\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  do =>\n    await @translate_document()\n    help 'ok'\n\n\n"
  ]
}