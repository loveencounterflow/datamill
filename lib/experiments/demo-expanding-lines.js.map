{
  "version": 3,
  "file": "demo-expanding-lines.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo-expanding-lines.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DTML/EXP/EXPAND'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n{ assign\n  jr }                    = CND\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\nrequire                   '../exception-handler'\nMIRAGE                    = require 'mkts-mirage'\ndo_validate               = true\nDATAMILL                  = require '../..'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  _drop_extension\n  project_abspath }       = require '../helpers'\n\n#-----------------------------------------------------------------------------------------------------------\nformat_object = ( d ) ->\n  R = {}\n  R[ k ] = d[ k ] for k in ( k for k of d ).sort()\n  return jr R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datom = ( P ... ) ->\n  R           = PD.thaw PD.new_datom P...\n  R.vnr_txt   = ( jr R.$vnr ) if ( not R.vnr_txt )? and ( R.$vnr? )\n  R.$fresh    = true\n  return PD.freeze R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_vnr_level = ( vnr, nr = 1 ) ->\n  ### Given a `mirage` instance and a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has an index of `0` appended, thus representing the pre-first `vnr` for a level of lines\n  derived from the one that the original `vnr` pointed to. ###\n  validate.nonempty_list vnr\n  R = assign [], vnr\n  R.push nr\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@advance_vnr = ( vnr ) ->\n  ### Given a `mirage` instance and a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the\n  next line in the same level that is derived from the same line as its predecessor. ###\n  validate.nonempty_list vnr\n  R                    = assign [], vnr\n  R[ vnr.length - 1 ] += +1\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_words = ( S ) -> $ ( d, send ) =>\n  return send d unless select d, '^mktscript'\n  #.........................................................................................................\n  send stamp d\n  text      = d.value\n  prv_vnr   = d.$vnr\n  nxt_vnr  = @new_vnr_level prv_vnr\n  #.........................................................................................................\n    # unless isa.blank_text row.value\n  for word in text.split /\\s+/\n    continue if word is ''\n    nxt_vnr = @advance_vnr nxt_vnr\n    send @new_datom '^word', { text: word, $vnr: nxt_vnr, }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT to be written; observe this will simplify `$blank_lines()`. ###\n@$trim = ( S ) ->\n  return $ ( d, send ) => send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$blank_lines = ( S ) ->\n  prv_vnr       = null\n  linecount     = 0\n  send          = null\n  within_blank  = false\n  # is_first      = true\n  #.........................................................................................................\n  flush = ( n ) =>\n    within_blank  = false\n    $vnr          = @new_vnr_level prv_vnr\n    send PD.new_datom '^blank', { value: { linecount, }, $vnr, $fresh: true, }\n    linecount     = 0\n  #.........................................................................................................\n  return $ { last, }, ( d, send_ ) =>\n    send = send_\n    #.......................................................................................................\n    if d is last\n      flush()# if within_blank\n      return null\n    #.......................................................................................................\n    return send d unless select d, '^mktscript'\n    #.......................................................................................................\n    unless isa.blank_text d.value\n      flush() if within_blank\n      prv_vnr       = d.$vnr\n      return send d\n    #.......................................................................................................\n    send stamp d\n    prv_vnr       = d.$vnr\n    linecount     = 0 unless within_blank\n    linecount    += +1\n    within_blank  = true\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$codeblocks = ( S ) ->\n  ### Recognize codeblocks as regions delimited by triple backticks. Possible extensions include\n  markup for source code category and double service as pre-formatted blocks. ###\n  pattern           = /// ^ (?<backticks> ``` ) $ ///\n  within_codeblock  = false\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless select d, '^mktscript'\n    ### TAINT should send `<codeblock` datom ###\n    if ( match = d.value.match pattern )?\n      within_codeblock = not within_codeblock\n      send stamp d\n    else\n      if within_codeblock\n        ### TAINT should somehow make sure properties are OK for a `^literal` ###\n        $vnr  = @new_vnr_level d.$vnr, 1\n        d     = PD.set d, 'key',    '^literal'\n        d     = PD.set d, '$vnr',   $vnr\n        d     = PD.set d, '$fresh', true\n      send d\n    # $vnr  = @new_vnr_level d.$vnr, 0\n    # $vnr  = @advance_vnr $vnr; send PD.new_datom '<codeblock',        { level, $vnr, $fresh: true, }\n    # $vnr  = @advance_vnr $vnr; send PD.new_datom '>codeblock',        { level, $vnr, $fresh: true, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$heading = ( S ) ->\n  ### Recognize heading as any line that starts with a `#` (hash). Current behavior is to\n  check whether both prv and nxt lines are blank and if not so issue a warning; this detail may change\n  in the future. ###\n  pattern = /// ^ (?<hashes> \\#+ ) (?<text> .* ) $ ///\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless select d, '^mktscript'\n    return send d unless ( match = d.value.match pattern )?\n    prv_line_is_blank = @previous_line_is_blank S, d.$vnr\n    nxt_line_is_blank = @next_line_is_blank     S, d.$vnr\n    $vnr              = @new_vnr_level d.$vnr, 0\n    unless prv_line_is_blank and nxt_line_is_blank\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT update PipeDreams: warnings always marked fresh ###\n      # warning = PD.new_warning d.$vnr, message, d, { $fresh: true, }\n      message = \"µ09082 heading should have blank lines above and below\"\n      $vnr    = @advance_vnr $vnr; send PD.new_datom '~warning', message, { $vnr, $fresh: true, }\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    send stamp d\n    level = match.groups.hashes.length\n    text  = match.groups.text.replace /^\\s*(.*?)\\s*$/g, '$1' ### TAINT use trim method ###\n    # debug 'µ88764', rpr match.groups.text\n    # debug 'µ88764', rpr text\n    $vnr  = @advance_vnr $vnr; send PD.new_datom '<h',                { level, $vnr, $fresh: true, }\n    $vnr  = @advance_vnr $vnr; send PD.new_datom '^mktscript', text,  { $vnr, $fresh: true, }\n    $vnr  = @advance_vnr $vnr; send PD.new_datom '>h',                { level, $vnr, $fresh: true, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@previous_line_is_blank = ( S, vnr ) ->\n  return true unless ( d = @get_previous_datom S, vnr )?\n  return ( d.value.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@next_line_is_blank = ( S, vnr ) ->\n  return true unless ( d = @get_next_datom S, vnr )?\n  return ( d.value.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@get_previous_datom = ( S, vnr ) ->\n  ### TAINT consider to use types ###\n  unless vnr.length is 1\n    throw new Error \"µ33442 `get_next_datom()` not supported for nested vnrs, got #{rpr vnr}\"\n  ### TAINT need inverse to advance ###\n  return null unless vnr[ 0 ] > 1\n  vnr_txt = jr [ vnr[ 0 ] - 1 ]\n  return @datom_from_vnr S, S, vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@get_next_datom = ( S, vnr ) ->\n  ### TAINT consider to use types ###\n  unless vnr.length is 1\n    throw new Error \"µ33442 `get_next_datom()` not supported for nested vnrs, got #{rpr vnr}\"\n  return @datom_from_vnr S, @advance_vnr vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_vnr = ( S, vnr ) ->\n  dbr     = S.mirage.dbr\n  vnr_txt = jr vnr\n  return null unless ( row = dbr.$.first_row dbr.datom_from_vnr { vnr_txt, } )?\n  return @datom_from_row S, row\n\n#-----------------------------------------------------------------------------------------------------------\n@$phase_100 = ( S ) ->\n  pipeline = []\n  pipeline.push @$trim S\n  pipeline.push @$blank_lines S\n  return PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$phase_200 = ( S ) ->\n  pipeline = []\n  pipeline.push @$codeblocks  S\n  pipeline.push @$heading     S\n  return PD.pull pipeline...\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_row = ( S, row ) ->\n  ### TAINT how to convert vnr in ICQL? ###\n  vnr_txt     = row.vnr_txt\n  $vnr        = JSON.parse vnr_txt\n  R           = PD.new_datom row.key, { value: row.value, $vnr, }\n  R           = PD.set R, '$stamped', true if row.stamped\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@row_from_datom = ( S, d ) ->\n  ### TAINT how to convert booleans in ICQL? ###\n  stamped   = if d.$stamped then 1 else 0\n  vnr_txt   = jr d.$vnr\n  value     = if ( isa.text d.value ) then d.value else jr d.value\n  R         = { key: d.key, vnr_txt, value, stamped, }\n  # MIRAGE.types.validate.mirage_main_row R if do_validate\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@feed_source = ( S, source, limit = Infinity ) ->\n  dbr = S.mirage.db\n  nr  = 0\n  #.........................................................................................................\n  for row from dbr.read_unstamped_lines()\n    nr += +1\n    break if nr > limit\n    source.send @datom_from_row S, row\n  #.........................................................................................................\n  source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$feed_db = ( S ) ->\n  dbw = S.mirage.dbw\n  return $watch ( d ) =>\n    ### TAINT how to convert vnr in ICQL? ###\n    row = @row_from_datom S, d\n    try\n      ### TAINT consider to use upsert instead https://www.sqlite.org/lang_UPSERT.html ###\n      if      d.$fresh then dbw.insert row\n      else if d.$dirty then dbw.update row\n    catch error\n      warn \"µ12133 when trying to insert or update row #{jr row}\"\n      warn \"µ12133 an error occurred:\"\n      warn \"µ12133 #{error.message}\"\n      throw error\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_$show = ( S ) -> $watch ( d ) =>\n  if d.$stamped then color = CND.grey\n  else\n    switch d.key\n      when '^word' then color = CND.gold\n      else color = CND.white\n  info color jr d\n\n#-----------------------------------------------------------------------------------------------------------\n@show_overview = ( S ) ->\n  dbr = S.mirage.db\n  #.........................................................................................................\n  for row from dbr.read_lines { limit: 30, }\n    # debug 'µ10001', rpr row\n    if row.stamped\n      color = CND.grey\n    else\n      color = switch row.key\n        when '^mktscript' then CND.yellow\n        when '^blank'     then ( P... ) -> CND.grey P...\n        when '~warning'   then ( P... ) -> CND.reverse CND.red P...\n        else CND.white\n    key   = row.key.padEnd      12\n    vnr   = row.vnr_txt.padEnd  12\n    value = if ( isa.text row.value ) then row.value else rpr row.value\n    value = value[ .. 80 ]\n    info color \"#{vnr} #{( if row.stamped then 'S' else ' ' )} #{key} #{rpr value}\"\n  #.........................................................................................................\n  for row from dbr.get_stats()\n    info \"#{row.key}: #{row.count}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@run_phase = ( S, transform ) -> new Promise ( resolve, reject ) =>\n  source    = PD.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push transform\n  pipeline.push @$feed_db S\n  pipeline.push PD.$drain => resolve()\n  PD.pull pipeline...\n  @feed_source S, source\n\n#-----------------------------------------------------------------------------------------------------------\n@translate_document = ( mirage ) -> new Promise ( resolve, reject ) =>\n  S         = { mirage, }\n  limit     = Infinity\n  phases    = [\n    '$phase_100'\n    '$phase_200'\n    ]\n  #.........................................................................................................\n  for phase in phases\n    transform = @[ phase ] S\n    help \"phase #{rpr phase}\"\n    await @run_phase S, transform\n  @show_overview S\n  resolve()\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  do =>\n    #.......................................................................................................\n    settings =\n      file_path:  project_abspath './src/tests/demo.md'\n      db_path:    '/tmp/mirage.db'\n      icql_path:  project_abspath './db/datamill.icql'\n    mirage = await MIRAGE.create settings\n    await @translate_document mirage\n    help 'ok'\n\n"
  ]
}