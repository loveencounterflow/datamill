// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, PD, VNR, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  // ### Whether in-place updates are OK ###
  // prefer_updates = true

  //-----------------------------------------------------------------------------------------------------------
  this.$codeblocks = function(S) {
    /* Recognize codeblocks as regions delimited by triple backticks. Possible extensions include
    markup for source code category and double service as pre-formatted blocks. */
    var pattern, ref, within_codeblock;
    ref = 'bl/cd';
    pattern = /^(?<backticks>```)$/;
    within_codeblock = false;
    H.register_key(S, '<codeblock', {
      is_block: true
    });
    H.register_key(S, '>codeblock', {
      is_block: true
    });
    H.register_key(S, '^literal', {
      is_block: false
    });
    H.register_key(S, '^literal-blank', {
      is_block: false
    });
    //.........................................................................................................
    return $((d, send) => {
      var dest, match;
      if (within_codeblock && select(d, '^blank')) {
        return send(PD.set(d, {
          key: '^literal-blank',
          ref
        }));
      }
      if (!select(d, '^line')) {
        //.......................................................................................................
        return send(d);
      }
      //.......................................................................................................
      /* line starts or stops codeblock */
      if ((match = d.text.match(pattern)) != null) {
        within_codeblock = !within_codeblock;
        dest = d.dest;
        //.....................................................................................................
        if (within_codeblock) {
          send(stamp(d, {ref}));
          send(PD.set(VNR.deepen(d), {
            key: '<codeblock',
            ref
          }));
        } else {
          //.....................................................................................................
          send(stamp(d, {ref}));
          send(PD.set(VNR.deepen(d), {
            key: '>codeblock',
            ref
          }));
        }
      } else {
        //.......................................................................................................
        /* line is literal within, unchanged outside of codeblock */
        if (within_codeblock) {
          d = PD.set(d, {
            key: '^literal',
            ref
          });
          send(d);
        } else {
          send(d);
        }
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$headings = function(S) {
    /* Recognize heading as any line that starts with a `#` (hash). Current behavior is to
    check whether both prv and nxt lines are blank and if not so issue a warning; this detail may change
    in the future. */
    var pattern, ref;
    pattern = /^(?<hashes>\#+)(?<text>.*)$/;
    ref = 'bl/hd';
    //.........................................................................................................
    H.register_key(S, '<h', {
      is_block: true
    });
    H.register_key(S, '>h', {
      is_block: true
    });
    //.........................................................................................................
    return $((d, send) => {
      var $vnr, dest/* TAINT use trim method */, level, match, text;
      if (!select(d, '^line')) {
        return send(d);
      }
      if ((match = d.text.match(pattern)) == null) {
        return send(d);
      }
      send(stamp(d, {ref}));
      level = match.groups.hashes.length;
      text = match.groups.text.replace(/^\s*(.*?)\s*$/g, '$1');
      dest = d.dest;
      $vnr = VNR.deepen(d.$vnr, 0);
      send(H.fresh_datom('<h', {
        level,
        $vnr: VNR.recede($vnr),
        dest,
        ref
      }));
      send(H.fresh_datom('^line', {text, $vnr, dest, ref}));
      send(H.fresh_datom('>h', {
        level,
        $vnr: VNR.advance($vnr),
        dest,
        ref
      }));
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$blockquotes = function(S) {
    /* TAINT ATM also captures closing pointy bracket of multiline tag literals */
    var $vnr, dest, pattern, prv_was_quote;
    pattern = /^(?:(?<mu_1>>+)|(?<mu_2>>+)\s+(?<text>.*))$/;
    prv_was_quote = false;
    $vnr = null;
    dest = null;
    H.register_key(S, '<blockquote', {
      is_block: true
    });
    H.register_key(S, '>blockquote', {
      is_block: true
    });
    //.........................................................................................................
    return $({last}, (d, send) => {
      var markup, match, ref1, ref2, text;
      if (d === last) {
        /* TAINT code duplication */
        if (prv_was_quote) {
          $vnr = VNR.advance($vnr);
          send(H.fresh_datom('>blockquote', {dest, $vnr}));
        }
        return;
      }
      if (!select(d, '^line')) {
        //.......................................................................................................
        return send(d);
      }
      //.......................................................................................................
      if ((match = d.text.match(pattern)) == null) {
        /* TAINT code duplication */
        if (prv_was_quote) {
          $vnr = VNR.advance($vnr);
          send(H.fresh_datom('>blockquote', {dest, $vnr}));
        }
        prv_was_quote = false;
        return send(d);
      }
      //.......................................................................................................
      send(stamp(d));
      markup = (ref1 = match.groups.mu_1) != null ? ref1 : match.groups.mu_2;
      text = (ref2 = match.groups.text) != null ? ref2 : '';
      $vnr = VNR.deepen(d.$vnr, 0);
      if (!prv_was_quote) {
        dest = d.dest;
        $vnr = VNR.advance($vnr);
        send(H.fresh_datom('<blockquote', {dest, $vnr}));
        $vnr = VNR.advance($vnr);
        send(H.fresh_datom('^line', {text, dest, $vnr}));
      } else {
        $vnr = VNR.advance($vnr);
        send(H.fresh_datom('^line', {text, dest, $vnr}));
      }
      // debug 'Âµ33344', match.groups, $vnr
      prv_was_quote = true;
      // send d
      return null;
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$codeblocks(S));
    pipeline.push(this.$headings(S));
    // pipeline.push @$blockquotes S
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=020-blocks.js.map
