{
  "version": 3,
  "file": "010-consolidate-whitespace.js",
  "sourceRoot": "..",
  "sources": [
    "src/010-consolidate-whitespace.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT to be written; observe this will simplify `$blank_lines()`. ###\n@$trim = ( S ) ->\n  return $ ( d, send ) =>\n    return send d unless select d, '^line'\n    if ( new_text = d.text.trimEnd() ) isnt d.text\n      d = PD.set d, 'text', new_text\n    send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$blank_lines = ( S ) ->\n  prv_vnr       = null\n  prv_dest      = null\n  linecount     = 0\n  send          = null\n  within_blank  = false\n  # is_first      = true\n  #.........................................................................................................\n  H.register_key S, '^blank', { is_block: false, }\n  #.........................................................................................................\n  flush = ( advance = false ) =>\n    return null unless prv_vnr?\n    within_blank  = false\n    if advance  then  $vnr = VNR.new_level VNR.advance  prv_vnr\n    else              $vnr = VNR.new_level              prv_vnr\n    send H.fresh_datom '^blank', { linecount, $vnr, dest: prv_dest, }\n    linecount     = 0\n  #.........................................................................................................\n  return $ { last, }, ( d, send_ ) =>\n    send = send_\n    #.......................................................................................................\n    if d is last\n      flush true\n      return null\n    #.......................................................................................................\n    is_line = select d, '^line'\n    ### line contains material ###\n    if is_line and ( d.text isnt '' )\n      flush() if within_blank\n      ### TAINT use API to ensure all pertinent values are captured ###\n      prv_dest    = d.dest\n      prv_vnr     = d.$vnr\n      return send d\n    #.......................................................................................................\n    ### line is empty / blank ###\n    if is_line\n      send stamp d\n      linecount     = 0 unless within_blank\n      linecount    += +1\n      within_blank  = true\n    #.......................................................................................................\n    ### TAINT use API to ensure all pertinent values are captured ###\n    prv_dest    = d.dest\n    prv_vnr     = d.$vnr\n    send d\n    return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$trim S\n  pipeline.push @$blank_lines S\n  return PD.pull pipeline...\n\n"
  ]
}