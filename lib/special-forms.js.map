{
  "version": 3,
  "file": "special-forms.js",
  "sourceRoot": "..",
  "sources": [
    "src/special-forms.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/SPECIAL-FORMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\n{ jr\n  copy\n  is_empty\n  assign }                = CND\njoin                      = ( x, joiner = '' ) -> x.join joiner\nrprx                      = ( d ) -> \"#{d.mark} #{d.type}:: #{jr d.value} #{jr d.stamped ? false}\"\n\n\n#-----------------------------------------------------------------------------------------------------------\n@active_chr_pattern   = /// ///u\n@active_chrs          = new Set()\n\n#-----------------------------------------------------------------------------------------------------------\n### thx to https://stackoverflow.com/a/3561711/7568091 ###\n@_escape_for_regex = ( text ) -> text.replace @_escape_for_regex.pattern, '\\\\$&'\n@_escape_for_regex.pattern = /[-\\/\\\\^$*+?.()|[\\]{}]/g\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs = ( chrs... ) ->\n  for chr in chrs\n    unless ( CND.isa_text chr ) and ( chr.match /^.$/u )?\n      throw new Error \"expected single character, got #{rpr chr}\"\n    @active_chrs.add chr\n  achrs                 = ( ( @_escape_for_regex chr ) for chr from @active_chrs ).join '|'\n  @active_chr_pattern   = /// ^ (?<left> .*? ) (?<achrs> (?<achr> #{achrs} ) \\k<achr>* ) (?<right> .* ) $ ///\n                        # /// (?<!\\\\) (?<achr> (?<chr> [ \\* ` + p ] ) \\k<chr>* ) ///\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs '<', '&', '*', '`', '^', '_', '=', '-', '+', '𣥒'\n# help @active_chr_pattern\n\n# debug @_escape_for_regex '*'\n# debug @_escape_for_regex '/'\n# debug @_escape_for_regex '^'\n# debug @_escape_for_regex '\\\\'\n# debug 'foo-bar'.match new RegExp '[x\\\\-a]'\n# @add_active_chr '-'; help @active_chr_pattern\n# @add_active_chr '^'; help @active_chr_pattern\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@split_on_first_active_chr = ( text ) ->\n  ### If `text` contains an active character, return a POD with the keys `left`, `achr`, and `right`, where\n  `left` holds the (possibly empty) text before the first active character, `achr` holds the active\n  character itself, and `right` holds the remaining, again possibly empty, text (that may or may not contain\n  further active characters). ###\n  return null unless ( match = text.match @active_chr_pattern )?\n  return match.groups\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_on_first_active_chr = ( S ) ->\n  return $ ( d, send ) =>\n    ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###\n    return send d unless ( select d, '^text' ) and ( not d.clean )\n    if ( parts = @split_on_first_active_chr d.value )?\n      { achr, achrs, left, right, } = parts\n      send PD.new_single_event 'achr-split', achrs, { achr, left, right, }, $: d\n    else\n      d.clean = true\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$recycle_untouched_texts = ( S ) -> $ ( d, send ) =>\n  if ( select d, '^text' ) and ( not d.clean )\n    send PD.R.recycling d\n  else if ( select d, '^achr-split' )\n    send PD.new_text_event d.left + d.value, { clean: true, $: d } unless is_empty d.left\n    send PD.R.recycling PD.new_text_event d.right, $: d\n  else\n    send d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_empty_texts = ( S ) -> PD.$filter ( d ) => not ( ( select d, '^text' ) and ( d.value is '' ) )\n\n#-----------------------------------------------------------------------------------------------------------\n@$consolidate_texts = ( S ) ->\n  buffer = []\n  return $ { last: null, }, ( d, send ) =>\n    # debug '93093-1', jr d\n    if d?\n      if ( select d, '^text' )\n        buffer.push d.value\n        # whisper '93093-2', buffer\n      else\n        unless is_empty buffer\n          send PD.new_text_event ( buffer.join '' )\n          buffer.length = 0\n        send d\n    else\n      # whisper '93093-3', buffer\n      unless is_empty buffer\n        send PD.new_text_event ( buffer.join '' )\n        buffer.length = 0\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$handle_remaining_achrs = ( S ) -> $ ( d, send ) =>\n    if ( select d, '^achr-split' )\n      lnr     = d.$?.lnr  ? '?'\n      text    = if d.$?.text? then ( rpr d.$.text ) else '?'\n      message = \"unhandled active characters #{rpr d.value} on line #{lnr} in #{text}\"\n      send PD.new_text_event d.left, { clean: true, $: d } unless is_empty d.left\n      send PD.new_warning 'µ99823', message, d, $: d\n      # send PD.new_text_event d.left + d.value + d.right, $: d\n      # send d\n    else\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_symmetric_achr_transform = ( S, start_stop, name ) ->\n  within      = false\n  opening_key = \"<#{name}\"\n  closing_key = \">#{name}\"\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    if ( select d, '^achr-split' ) and ( d.value is start_stop )\n      ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###\n      send PD.new_text_event d.left, { clean: true, $: d }\n      #.....................................................................................................\n      if within\n        send PD.new_event closing_key, null, $: d\n        within = false\n      #.....................................................................................................\n      else\n        send PD.new_event opening_key, null, $: d\n        within = true\n      #.....................................................................................................\n      send PD.new_text_event d.right, $: d\n    else\n      send d\n    return null\n\n\n#===========================================================================================================\n###\n\nSources:\n\n* https://markdown-it.github.io/\n* https://commonmark.org/help/\n* https://www.markdownguide.org/basic-syntax\n\nSpecial Forms:\n\n* *italic*\n* **bold**\n* ***bold italic***—possibly using underscores, e.g. `_**bold italic**_`, `__*bold italic*__`,\n  `*__bold italic__*`, ...\n* --strike-- (sometimes using tildes, ~~strike~~)\n* ++ins++ (inserted text, used together with `--strike--`)\n* ==mark== (highlighted, hilite)\n* `code`\n\n\n###\n\n#-----------------------------------------------------------------------------------------------------------\n@$mark          = ( S ) -> @_get_symmetric_achr_transform S, '==',    'mark'\n@$ins           = ( S ) -> @_get_symmetric_achr_transform S, '++',    'ins'\n@$strike        = ( S ) -> @_get_symmetric_achr_transform S, '--',    'strike'\n@$em_and_strong = ( S ) -> @_get_symmetric_achr_transform S, '***',   'em-and-strong'\n@$strong        = ( S ) -> @_get_symmetric_achr_transform S, '**',    'strong'\n@$em            = ( S ) -> @_get_symmetric_achr_transform S, '*',     'em'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$parse_special_forms = ( S ) =>\n  refillable  = []\n  bysource    = PD.new_refillable_source refillable, { repeat: 5, show: true, }\n  byline      = []\n  byline.push bysource\n  byline.push PD.$show title: '(parse_special_forms bystream)'\n  bystream    = PD.pull byline...\n  #.......................................................................................................\n  pipeline    = []\n  pipeline.push PD.$pass() ### necessary so `$wye()` doesn't come on top of pipeline ###\n  pipeline.push PD.$wye bystream\n  # pipeline.push PD.R.$unwrap_recycled()\n  pipeline.push @$split_on_first_active_chr         S\n  pipeline.push @$mark                              S\n  pipeline.push @$ins                               S\n  pipeline.push @$strike                            S\n  pipeline.push @$em_and_strong                     S\n  pipeline.push @$em                                S\n  pipeline.push @$strong                            S\n  pipeline.push @$recycle_untouched_texts           S\n  pipeline.push @$filter_empty_texts                S\n  pipeline.push @$handle_remaining_achrs            S\n  # pipeline.push $ { last: PD.symbols.last, }, ( d, send ) ->\n  #   debug '33783', '---------------->', d\n  #   if d is PD.symbols.last\n  #     refillable.push PD.symbols.end\n  #   else\n  #     send d\n  #   return null\n  # pipeline.push PD.$watch ( d ) => if ( select d, '~end' ) then source.end()\n  # pipeline.push PD.R.$recycle ( d ) -> refillable.push d\n  pipeline.push @$consolidate_texts                 S\n  #.......................................................................................................\n  return PD.pull pipeline...\n\n\n"
  ]
}