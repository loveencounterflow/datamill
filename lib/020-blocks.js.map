{
  "version": 3,
  "file": "020-blocks.js",
  "sourceRoot": "..",
  "sources": [
    "src/020-blocks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\nDM                        = require '..'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$codeblocks = ( S ) ->\n  ### Recognize codeblocks as regions delimited by triple backticks. Possible extensions include\n  markup for source code category and double service as pre-formatted blocks. ###\n  pattern           = /// ^ (?<backticks> ``` ) $ ///\n  within_codeblock  = false\n  H.register_key S, '<codeblock',     { is_block: true,  }\n  H.register_key S, '>codeblock',     { is_block: true,  }\n  H.register_key S, '^literal',       { is_block: false, }\n  H.register_key S, '^literal-blank', { is_block: false, }\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    if within_codeblock and select d, '^blank'\n      return send PD.set d, { key: '^literal-blank', ref, }\n    #.......................................................................................................\n    return send d unless select d, '^line'\n    #.......................................................................................................\n    ### line starts or stops codeblock ###\n    if ( match = d.text.match pattern )?\n      within_codeblock  = not within_codeblock\n      dest              = d.dest\n      #.....................................................................................................\n      if within_codeblock\n        send stamp d\n        send PD.set ( VNR.deepen d ), { key: '<codeblock', ref: 'blk/cdb1', }\n      #.....................................................................................................\n      else\n        send stamp d\n        send PD.set ( VNR.deepen d ), { key: '>codeblock', ref: 'blk/cdb2', }\n    #.......................................................................................................\n    ### line is literal within, unchanged outside of codeblock ###\n    else\n      if within_codeblock\n        d = PD.set d, { key: '^literal', ref: 'blk/cdb3', }\n        send d\n      else\n        send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$headings = ( S ) ->\n  ### Recognize heading as any line that starts with a `#` (hash). Current behavior is to\n  check whether both prv and nxt lines are blank and if not so issue a warning; this detail may change\n  in the future. ###\n  pattern = /// ^ (?<hashes> \\#+ ) (?<text> .* ) $ ///\n  ref     = 'blk/hd'\n  #.........................................................................................................\n  H.register_key S, '<h', { is_block: true, }\n  H.register_key S, '>h', { is_block: true, }\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless select d, '^line'\n    return send d unless ( match = d.text.match pattern )?\n    send stamp d\n    level = match.groups.hashes.length\n    text  = match.groups.text.replace /^\\s*(.*?)\\s*$/g, '$1' ### TAINT use trim method ###\n    dest  = d.dest\n    $vnr  = VNR.deepen d.$vnr, 0\n    send H.fresh_datom '<h',    { level, $vnr: ( VNR.recede $vnr  ),  dest, ref, }\n    send H.fresh_datom '^line', { text,  $vnr,                        dest, ref, }\n    send H.fresh_datom '>h',    { level, $vnr: ( VNR.advance $vnr ),  dest, ref, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$blockquotes = ( S ) ->\n  ### TAINT ATM also captures closing pointy bracket of multiline tag literals ###\n  pattern           = /// ^ (?: (?<mu_1> >+ ) | (?<mu_2> >+ ) \\s+ (?<text> .* ) ) $ ///\n  within_quote      = false\n  first_vnr         = null\n  $vnr              = null\n  dest              = null\n  ### TAINT only register once per pair ###\n  H.register_key S, '<blockquote', { is_block: true, has_paragraphs: true, }\n  H.register_key S, '>blockquote', { is_block: true, has_paragraphs: true, }\n  #.........................................................................................................\n  return $ { last, }, ( d, send ) =>\n    if d is last\n      ### If the previous datom was the last in the document and we're within a blockwuote, close it: ###\n      ### TAINT code duplication ###\n      if within_quote\n        ref       = 'blk/bq1'\n        send H.fresh_datom '>blockquote', { dest, $vnr: ( VNR.advance $vnr ), ref, }\n        DM.reprise S, { first_vnr, last_vnr: $vnr, ref, }\n        $vnr      = null\n        first_vnr = null\n      return\n    #.......................................................................................................\n    return send d unless select d, '^line'\n    #.......................................................................................................\n    unless ( match = d.text.match pattern )?\n      #.....................................................................................................\n      ### TAINT code duplication ###\n      ### If we've found a text that has no blockquote markup, the quote has ended: ###\n      if within_quote\n        ref       = 'blk/bq2'\n        send H.fresh_datom '>blockquote', { dest, $vnr: ( VNR.advance $vnr ), ref, }\n        DM.reprise S, { first_vnr, last_vnr: $vnr, ref, }\n        $vnr      = null\n        first_vnr = null\n      #.....................................................................................................\n      within_quote = false\n      return send d\n    #.......................................................................................................\n    markup  = match.groups.mu_1 ? match.groups.mu_2\n    text    = match.groups.text ? ''\n    $vnr    = VNR.deepen d.$vnr, 0\n    #.......................................................................................................\n    unless within_quote\n      ref         = 'blk/bq3'\n      dest        = d.dest\n      first_vnr   = $vnr\n      send H.fresh_datom '<blockquote', {       dest, $vnr: ( VNR.recede $vnr ),  ref, }\n      send H.fresh_datom '^line',       { text, dest, $vnr,                       ref, }\n    #.......................................................................................................\n    else\n      ref   = 'blk/bq4'\n      send H.fresh_datom '^line',       { text, dest, $vnr, ref, }\n    #.......................................................................................................\n    send stamp d\n    within_quote = true\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$codeblocks  S\n  pipeline.push @$headings    S\n  pipeline.push @$blockquotes S\n  return PD.pull pipeline...\n\n"
  ]
}