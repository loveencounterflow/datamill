{
  "version": 3,
  "file": "020-blocks.js",
  "sourceRoot": "..",
  "sources": [
    "src/020-blocks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$codeblocks = ( S ) ->\n  ### Recognize codeblocks as regions delimited by triple backticks. Possible extensions include\n  markup for source code category and double service as pre-formatted blocks. ###\n  pattern           = /// ^ (?<backticks> ``` ) $ ///\n  within_codeblock  = false\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless select d, '^mktscript'\n    ### TAINT should send `<codeblock` datom ###\n    if ( match = d.text.match pattern )?\n      within_codeblock = not within_codeblock\n      send stamp d\n    else\n      if within_codeblock\n        send stamp d\n        # $vnr  = VNR.new_level d.$vnr, 1\n        ### TAINT should somehow make sure properties are OK for a `^literal` ###\n        send H.swap_key d, '^literal'\n      else\n        send d\n    # $vnr  = VNR.new_level d.$vnr, 0\n    # $vnr  = VNR.advance $vnr; send H.fresh_datom '<codeblock',        { level, $vnr, }\n    # $vnr  = VNR.advance $vnr; send H.fresh_datom '>codeblock',        { level, $vnr, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$heading = ( S ) ->\n  ### Recognize heading as any line that starts with a `#` (hash). Current behavior is to\n  check whether both prv and nxt lines are blank and if not so issue a warning; this detail may change\n  in the future. ###\n  pattern = /// ^ (?<hashes> \\#+ ) (?<text> .* ) $ ///\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless select d, '^mktscript'\n    return send d unless ( match = d.text.match pattern )?\n    prv_line_is_blank = H.previous_line_is_blank  S, d.$vnr\n    nxt_line_is_blank = H.next_line_is_blank      S, d.$vnr\n    $vnr              = VNR.new_level d.$vnr, 0\n    unless prv_line_is_blank and nxt_line_is_blank\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT update PipeDreams: warnings always marked fresh ###\n      # warning = PD.new_warning d.$vnr, message, d, { $fresh: true, }\n      message = \"µ09082 heading should have blank lines above and below\"\n      ### TAINT use API call ###\n      $vnr    = VNR.advance $vnr; send H.fresh_datom '~warning', { message, $vnr, }\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    send stamp d\n    level = match.groups.hashes.length\n    text  = match.groups.text.replace /^\\s*(.*?)\\s*$/g, '$1' ### TAINT use trim method ###\n    # debug 'µ88764', rpr match.groups.text\n    # debug 'µ88764', rpr text\n    $vnr  = VNR.advance $vnr; send H.fresh_datom '<h',         { level, $vnr, }\n    $vnr  = VNR.advance $vnr; send H.fresh_datom '^mktscript', { text, $vnr, }\n    $vnr  = VNR.advance $vnr; send H.fresh_datom '>h',         { level, $vnr, }\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$codeblocks  S\n  pipeline.push @$heading     S\n  return PD.pull pipeline...\n\n"
  ]
}