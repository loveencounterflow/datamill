{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/datamill/src/005-start-stop.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD.export()\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\n@ignore_rows = ( S, first_lnr, last_lnr = null ) ->\n  dbw             = S.mirage.dbw\n  first_vnr_blob  = dbw.$.as_hollerith [ first_lnr ]\n  last_vnr_blob   = dbw.$.as_hollerith [ last_lnr  ]\n  if last_lnr?\n    dbw.set_dest    { first_vnr_blob, last_vnr_blob, dest: 'ignore', }\n    dbw.set_ref     { first_vnr_blob, last_vnr_blob, ref:  'stop', }\n    dbw.stamp       { first_vnr_blob, last_vnr_blob, }\n  else\n    dbw.set_dest    { first_vnr_blob, dest: 'ignore', }\n    dbw.set_ref     { first_vnr_blob, ref:  'stop', }\n    dbw.stamp       { first_vnr_blob, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_lnr = ( row ) -> ( JSON.parse row.vnr )[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@mark_start = ( S ) ->\n  key         = '^line'\n  pattern     = '<start/>'\n  dbr         = S.mirage.dbr\n  rows        = dbr.$.all_rows dbr.find_eq_pattern { key, pattern, }\n  switch size = size_of rows\n    when 0 then null\n    when 1\n      lnr = @_get_lnr rows[ 0 ]\n      @ignore_rows S, 1, lnr\n      # info \"µ33421 document start found on line #{lnr}\"\n    else\n      lnrs = ( ( @_get_lnr row ) for row in rows ).join ', '\n      throw new Error \"µ22231 found #{size} #{pattern} tags, only up to one allowed (lines #{lnrs})\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@mark_stop = ( S ) ->\n  key         = '^line'\n  pattern     = '<stop/>'\n  dbr         = S.mirage.dbr\n  rows        = dbr.$.all_rows dbr.find_eq_pattern { key, pattern, }\n  switch size = size_of rows\n    when 0 then null\n    when 1\n      lnr = @_get_lnr rows[ 0 ]\n      @ignore_rows S, lnr\n      # info \"µ33421 document stop found on line #{lnr}\"\n    else\n      lnrs = ( ( @_get_lnr row ) for row in rows ).join ', '\n      throw new Error \"µ22231 found #{size} #{pattern} tags, only up to one allowed (lines #{lnrs})\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### NOTE pseudo-transforms that run before first datom is sent ###\n@$mark_start_and_stop = ( S ) -> $watch { first, }, ( d ) =>\n  return null unless d is first\n  @mark_start S\n  @mark_stop  S\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$mark_start_and_stop   S\n  return PD.pull pipeline...\n\n"
  ]
}