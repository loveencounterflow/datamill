{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/xxx-validation.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',     badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\n#...........................................................................................................\nSPX                       = require './steampipes-extra'\n{ $\n  $watch\n  $async }                = SPX.export()\n#...........................................................................................................\nDATOM                     = require 'datom'\n{ VNR }                   = DATOM\n{ freeze\n  thaw\n  new_datom\n  is_stamped\n  select\n  stamp }                 = DATOM.export()\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  last_of\n  type_of }               = types\n#...........................................................................................................\n{ xr, }                   = require './xr'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n### TAINT consider to move this to steampipes ###\n@$validate_symmetric_keys = ( settings ) ->\n  stack = []\n  vnr   = null\n  return SPX.mark_position $ ( pd, send ) =>\n    { is_first\n      is_last\n      d       } = pd\n    #.......................................................................................................\n    if is_last\n      unless isa.empty stack\n        is_vnr  = jr vnr\n        ref     = if d.ref? then \"ref: #{d.ref}\" else \"(no ref)\"\n        message = [ 'µ44333', ]\n        message = [ \"at document end (VNR #{is_vnr}, #{ref}), encountered dangling open tag(s):\", ]\n        for entry in stack\n          was_vnr = jr entry.$vnr\n          message.push \"`>#{entry.name}` (VNR #{was_vnr})\"\n        message = message.join ' '\n        send new_datom '~error', { message, $: d, }\n      return null\n    #.......................................................................................................\n    vnr     = d.$vnr\n    is_vnr  = jr vnr\n    $key    = d.$key\n    sigil   = $key[ 0 ]\n    name    = $key[ 1 .. ]\n    ref     = if d.ref? then \"ref: #{d.ref}\" else \"(no ref)\"\n    #.......................................................................................................\n    switch sigil\n      when '<'\n        stack.push { name, $vnr: d.$vnr, }\n      when '>'\n        if stack.length is 0\n          message = \"µ44332 extraneous closing $key `>#{name}` found at (VNR #{is_vnr}, #{ref}), stack empty\"\n          send new_datom '~error', { message, $: d, }\n        else\n          entry = stack[ stack.length - 1 ]\n          unless entry.name is name\n            ### TAINT make configurable whether to throw or warn ###\n            was_vnr = jr entry.$vnr\n            message = \"µ44332 expected `>#{entry.name}` (VNR #{was_vnr}), found `#{$key}` (VNR #{is_vnr}, #{ref})\"\n            send new_datom '~error', { message, $: d, }\n          stack.pop()\n      else\n        send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$complain_on_error = ->\n  count = 0\n  return $ { last, }, ( d, send ) =>\n    if d is last\n      if count > 0\n        alert \"µ77874 found #{count} faults\"\n      return null\n    return send d unless select d, '~error'\n    send DATOM.set d.$, { error: d.message, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$exit_on_error = ->\n  messages = []\n  return $ { last, }, ( d, send ) =>\n    if d is last\n      if messages.length > 0\n        message = messages.join '\\n\\n'\n        throw new Error \"µ77874 found #{messages.length} faults: \\n\\n#{message}\"\n    return send d unless select d, '~error'\n    messages.push d.message\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$validate_symmetric_keys   S\n  pipeline.push @$complain_on_error         S\n  # pipeline.push @$exit_on_error             S\n  return SPX.pull pipeline...\n\n"
  ]
}