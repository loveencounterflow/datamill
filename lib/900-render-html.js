// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, DM, H, MIRAGE, PD, VNR, assign, badge, cast, cwd_abspath, cwd_relpath, debug, echo, first, first_of, help, here_abspath, info, isa, jr, last, last_of, preamble, project_abspath, rpr, select, size_of, stamp, type_of, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'DATAMILL/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  MIRAGE = require('mkts-mirage');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  this.types = require('./types');

  ({isa, validate, cast, first_of, last_of, size_of, type_of} = this.types);

  //...........................................................................................................
  H = require('./helpers');

  ({cwd_abspath, cwd_relpath, here_abspath, project_abspath} = H);

  //...........................................................................................................
  DM = require('..');

  // #-----------------------------------------------------------------------------------------------------------
  // @$decorations = ( S ) -> $ { first, last, }, ( d, send ) =>
  //   if d is first
  //     send H.fresh_datom '^html', { text: '<html><body>', ref: 'rdh/deco-1', $vnr: [ -Infinity, ], }
  //   if d is last
  //     send H.fresh_datom '^html', { text: '</body></html>', ref: 'rdh/deco-2', $vnr: [ Infinity, ], }
  //   else
  //     send d
  //   return null

  //-----------------------------------------------------------------------------------------------------------
  this.$headings = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(H.leapfrog_stamped(PD.lookaround($((d3, send) => {
      var $vnr, d, nxt, prv, tagname, text;
      [prv, d, nxt] = d3;
      if (!((select(prv, '<h')) && (select(d, '^mktscript')) && (select(nxt, '>h')))) {
        return;
      }
      $vnr = VNR.deepen(d.$vnr);
      tagname = `h${prv.level}`;
      text = `<${tagname}>${d.text}</${tagname}>`;
      send(H.fresh_datom('^html', {
        text,
        ref: 'rdh/h',
        $vnr
      }));
      send(stamp(prv));
      send(stamp(d));
      return send(stamp(nxt));
    }))));
    //.........................................................................................................
    /* Make sure ordering is preserved for downstream transforms: */
    pipeline.push(H.$resume_from_db(S, {
      realm: 'html'
    }));
    return PD.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$codeblocks = function(S) {
    return H.leapfrog_stamped(PD.lookaround($((d3, send) => {
      var $vnr, d, nxt, prv, text;
      [prv, d, nxt] = d3;
      if (!select(d, '^literal')) {
        return send(d);
      }
      if (select(prv, '<codeblock')) {
        $vnr = VNR.deepen(prv.$vnr);
        text = "<pre><code>";
        debug('µ44455', '$codeblocks', jr(prv));
        send(H.fresh_datom('^html', {
          text,
          ref: 'rdh/cdb1',
          $vnr
        }));
        send(stamp(prv));
      }
      if (select(nxt, '>codeblock')) {
        $vnr = VNR.deepen(nxt.$vnr);
        text = "</code></pre>";
        send(H.fresh_datom('^html', {
          text,
          ref: 'rdh/cdb2',
          $vnr
        }));
        send(stamp(nxt));
      }
      $vnr = VNR.deepen(d.$vnr);
      send(H.fresh_datom('^html', {
        text: d.text,
        ref: 'rdh/cdb3',
        $vnr
      }));
      return send(stamp(d));
    })));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$blocks_with_mktscript = function(S) {
    var is_block, key_registry, pipeline;
    key_registry = H.get_key_registry(S);
    is_block = function(d) {
      var ref;
      return (ref = key_registry[d.key]) != null ? ref.is_block : void 0;
    };
    pipeline = [];
    pipeline.push(PD.lookaround($((d3, send) => {
      /* TAINT use proper HTML generation */
      var $vnr, d, nxt, prv, tagname, text;
      [prv, d, nxt] = d3;
      if (!select(d, '^mktscript')) {
        return send(d);
      }
      text = d.text;
      if (is_block(prv)) {
        tagname = prv.key.slice(1);
        text = `<${tagname}>${text}`;
        send(stamp(prv));
      }
      if (is_block(nxt)) {
        tagname = nxt.key.slice(1);
        text = `${text}</${tagname}>`;
        send(stamp(nxt));
      }
      $vnr = VNR.deepen(d.$vnr);
      send(H.fresh_datom('^html', {
        text,
        ref: 'rdh/bwm',
        $vnr
      }));
      send(stamp(d));
      return null;
    })));
    //.........................................................................................................
    /* Make sure ordering is preserved for downstream transforms: */
    pipeline.push(H.$resume_from_db(S, {
      realm: 'html'
    }));
    return PD.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$other_blocks = function(S) {
    var is_block, key_registry;
    key_registry = H.get_key_registry(S);
    is_block = function(d) {
      var ref;
      return (ref = key_registry[d.key]) != null ? ref.is_block : void 0;
    };
    return H.resume_from_db(S, {
      realm: 'html'
    }, $((d, send) => {
      var $vnr, tagname, text;
      if (!((select(d, '<>')) && (is_block(d)))) {
        return send(d);
      }
      debug('µ29882', '$other_blocks', jr(d));
      tagname = d.key.slice(1);
      /* TAINT use proper HTML generation */
      if (select(d, '<')) {
        text = `<${tagname}>`;
      } else {
        text = `</${tagname}>`;
      }
      $vnr = VNR.deepen(d.$vnr);
      send(H.fresh_datom('^html', {
        text: text,
        ref: 'rdh/ob',
        $vnr
      }));
      send(stamp(d));
      return null;
    }));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$blank = function(S) {
    return $((d, send) => {
      var $vnr, linecount, ref, text;
      if (!select(d, '^blank')) {
        return send(d);
      }
      $vnr = VNR.deepen(d.$vnr);
      debug('µ34322', jr($vnr), jr(d));
      send(stamp(d));
      if ((linecount = (ref = d.linecount) != null ? ref : 0) > 0) {
        text = '\n'.repeat(linecount - 1);
        send(H.fresh_datom('^html', {
          text,
          ref: 'rdh/mkts-1',
          $vnr
        }));
      }
      return null;
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  preamble = "<style>\n  * { padding: 4px; outline: 2px dotted green; }\n  </style>";

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT refactor to PipeStreams */
  PD.$send_as_first = function(x) {
    return $({first}, function(d, send) {
      return send(d === first ? x : d);
    });
  };

  PD.$send_as_last = function(x) {
    return $({last}, function(d, send) {
      return send(d === last ? x : d);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$write_to_file = (S) => {
    var pipeline;
    pipeline = [];
    pipeline.push(H.$resume_from_db(S, {
      realm: 'html'
    }));
    pipeline.push(PD.$filter(function(d) {
      return select(d, '^html');
    }));
    pipeline.push($(function(d, send) {
      return send(d.text + '\n');
    }));
    pipeline.push(PD.$send_as_first(preamble));
    pipeline.push(PD.write_to_file('/tmp/datamill.html'));
    return PD.$tee(PD.pull(...pipeline));
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.settings = {
    from_realm: 'html',
    to_realm: 'html'
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    H.register_key(S, '^html', {
      is_block: false
    });
    H.register_realm(S, this.settings.to_realm);
    H.copy_realm(S, 'input', 'html');
    pipeline = [];
    pipeline.push(this.$headings(S));
    pipeline.push(this.$codeblocks(S));
    pipeline.push(this.$blocks_with_mktscript(S));
    pipeline.push($watch(function(d) {
      var ref, results, row;
      debug('µ59082', jr(d));
      ref = S.mirage.dbw.$.query("select * from main where realm = 'html' order by vnr_blob;");
      results = [];
      for (row of ref) {
        delete row.vnr_blob;
        results.push(debug('µ33221', jr(row)));
      }
      return results;
    }));
    // pipeline.push @$other_blocks              S
    pipeline.push(this.$blank(S));
    pipeline.push(H.$set_realm_where_missing(S, this.settings.to_realm));
    pipeline.push(this.$write_to_file(S));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=900-render-html.js.map
