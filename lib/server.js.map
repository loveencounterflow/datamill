{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATAMILL/SERVER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of }               = types\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nHTTP                      = require 'http'\nKoa                       = require 'koa'\nRouter                    = require '@koa/router'\n{ Server: Socket_server } = require 'socket.io'\nfile_server               = require 'koa-files'\nmount                     = require 'koa-mount'\n{ HDML }                  = require 'hdml'\n{ SQL }                   = ( require 'dbay' ).DBay\n{ tabulate\n  summarize }             = require 'dbay-tabulator'\n{ get_base_types\n  get_server_types }      = require './types'\nNODEXH                    = require '../../nodexh'\nCKD                       = require 'chokidar'\n{ XE }                    = require './_xemitter'\n{ Readable }              = require 'node:stream'\n\n\n#===========================================================================================================\nclass Stream extends Readable\n  # constructor:            -> @s = new Readable();       undefined\n  push:         ( data  ) => super data;              null\n  write:        ( data  ) => @push data; @push '\\n';  null\n  end:          ( data  ) => @push null;              null\n\n\n#===========================================================================================================\nclass Datamill_server_base\n\n  #---------------------------------------------------------------------------------------------------------\n  with_html_stream: ( ctx, f ) ->\n    ctx.response.type = 'html'\n    ctx.body          = stream = new Stream()\n    ### TAINT use API to stream `prologue` part of layout ###\n    for line from @doc.db.first_values SQL\"\"\"select doc_line_txt from doc_lines\"\"\"\n      stream.write line\n    f.call @, stream\n    ### TAINT use API to stream `epilogue` part of layout ###\n    for line from @doc.db.first_values SQL\"\"\"select doc_line_txt from doc_lines\"\"\"\n      stream.write line\n    stream.end()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _watch_doc_files: ->\n    cfg     = { recursive: true, persistent: true, awaitWriteFinish: { stabilityThreshold: 100, }, }\n    watcher = CKD.watch @doc.cfg.home, cfg\n    urge '^3534^', \"watching @{doc.cfg.home}\"\n    watcher.on 'add',     ( doc_file_abspath ) => info '^3534^', GUY.trm.reverse 'add',     doc_file_abspath\n    watcher.on 'unlink',  ( doc_file_abspath ) => warn '^3534^', GUY.trm.reverse 'unlink',  doc_file_abspath\n    watcher.on 'error',   ( error ) => alter  '^3534^', GUY.trm.reverse 'error',  error\n    #.......................................................................................................\n    watcher.on 'change',  ( doc_file_abspath ) =>\n      urge '^3534^', GUY.trm.reverse 'change', doc_file_abspath\n      await XE.emit '^maybe-file-changed', { doc_file_abspath, }\n      return null\n    #.......................................................................................................\n    return null\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _s_log: ( ctx, next ) =>\n    await next()\n    querystring   = if ctx.querystring?.length > 1 then \"?#{ctx.querystring}\" else ''\n    # help \"^datamill/server@7^\", { method, url, originalUrl, origin, href, path, query, querystring, host, hostname, protocol, }\n    color = if ctx.status < 400 then 'lime' else 'red'\n    line  = \"#{ctx.method} #{ctx.origin}#{ctx.path}#{querystring} -> #{ctx.status} #{ctx.message}\"\n    echo ( GUY.trm.grey \"^datamill/server@7^\" ), ( GUY.trm[ color ] line )\n    # warn \"^datamill/server@7^\", \"#{ctx.status} #{ctx.message}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _s_default: ( ctx ) =>\n    ctx.response.status = 404\n    ctx.response.type   = 'html'\n    ctx.body            = \"<h3>Datamill / 404 / Not Found</h3>\"\n    # ctx.throw 404, \"no content under #{ctx.url}\"\n    # ( ctx.state.greetings ?= [] ).push \"helo from content handler\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _r_home: ( ctx ) =>\n    ### TAINT generate from DB or load from external file ###\n    table_url = @router.url 'table',  'sqlite_schema'\n    ### TAINT differentiate between documents and files ###\n    doc_url   = @router.url 'doc',    'f1'\n    files_url = @router.url 'files'\n    debug '^32234^', { table_url, doc_url, files_url, }\n    ctx.body  = \"\"\"\n      <h1>Datamill</h1>\n      <ul>\n        <li><a href=#{doc_url}>Document</a></li>\n        <li><a href=#{files_url}>Files</a></li>\n        <li><a href=#{table_url}>Relations (Tables &amp; Views)</a></li>\n        </ul>\n      \"\"\"\n    # help \"^datamill/server@7^\", ctx.router.url 'home', { query: { foo: 'bar', }, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _r_tables: ( ctx ) => @_table_by_name ctx, 'sqlite_schema'\n\n  #---------------------------------------------------------------------------------------------------------\n  _r_table: ( ctx ) =>\n    table_name  = ctx.params.rel ? 'sqlite_schema'\n    table_name  = 'sqlite_schema' if table_name is ''\n    return @_table_by_name ctx, table_name\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _table_by_name: ( ctx, table_name ) =>\n    R                   = []\n    R.push HDML.pair 'h1', HDML.text \"Table #{table_name}\"\n    #.......................................................................................................\n    ### TAINT use proper interpolation or API ###\n    try\n      rows = @doc.db.all_rows SQL\"\"\"select * from #{table_name} order by 1;\"\"\"\n    catch error\n      ctx.response.status = 500\n      ctx.response.type   = 'text/plain'\n      ctx.body            = error.message\n      return null\n    #.......................................................................................................\n    unless ( table_cfg = @_get_table_cfg table_name )?\n      # ctx.response.status = 404\n      # ctx.response.type   = 'text/plain'\n      # ctx.body            = \"no such table: #{table_name}\"\n      # return null\n      table_cfg = null\n    #.......................................................................................................\n    R                   = R.concat tabulate { rows, table_cfg..., }\n    ctx.response.type   = 'html'\n    ctx.body            =  R.join '\\n'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _query_as_html: ( table, query, parameters ) =>\n    table_cfg = @_get_table_cfg table\n    rows      = @doc.db query, parameters\n    return tabulate { rows, table_cfg..., }\n\n  #---------------------------------------------------------------------------------------------------------\n  _table_as_html: ( table ) =>\n    table_cfg   = @_get_table_cfg table\n    query       = SQL\"select * from #{@doc.db.sql.I table};\"\n    rows        = @doc.db query\n    return tabulate { rows, table_cfg..., }\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_table_cfg: ( table ) =>\n    @_set_table_cfgs() unless @table_cfgs?\n    return @table_cfgs[ table ] ? null\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_table_cfgs: =>\n    GUY.props.hide @, 'table_cfgs', {}\n    #.......................................................................................................\n    @table_cfgs[ 'sqlite_schema' ] =\n      fields:\n        name:\n          hide:     false\n          inner_html: ( d ) =>\n            href = @router.url 'table', d.value\n            debug '^inner_html@234^', ( rpr d.value ), ( rpr href )\n            return HDML.pair 'a', { href, }, HDML.text d.value ? './.'\n        table_name:\n          hide:     true\n        type:\n          hide:     false\n        rootpage:\n          hide:     true\n        sql:\n          title:  \"SQL\"\n          inner_html: ( d ) => HDML.pair 'pre', HDML.text d.value ? './.'\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _r_doc: ( ctx ) =>\n    ### TAINT use streaming ###\n    ### TAINT use API ###\n    ### TAINT allow other values for `doc_file_id` ###\n    ### TAINT respect custom table prefix ###\n    ctx.response.type   = 'html'\n    lines               =  @doc.db.all_first_values SQL\"\"\"\n      select\n          doc_line_txt\n        from doc_lines\n        where doc_file_id = 'f1'\n        order by doc_line_nr;\"\"\"\n    ctx.body            = lines.join '\\n'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _r_files: ( ctx ) =>\n    ### TAINT use layout ###\n    ### TAINT use API ###\n    ### TAINT respect custom table prefix ###\n    @with_html_stream ctx, ({ push, write, }) ->\n      debug '^_rfiles@397324^', @types.type_of ctx.body\n      write HDML.pair 'h1', HDML.text \"Datamill\"\n      write HDML.pair 'h2', HDML.text \"Files\"\n      write HDML.open 'ul'\n      for file from @doc.db SQL\"\"\"select * from doc_files order by 1, 2;\"\"\"\n        href = @router.url 'file', file.doc_file_id\n        write HDML.pair 'li', HDML.pair 'a', { href, }, HDML.text file.doc_file_path\n      write HDML.close 'ul'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _r_file: ( ctx ) =>\n    ### TAINT use streaming ###\n    ### TAINT use layout ###\n    ### TAINT use API ###\n    ### TAINT respect custom table prefix ###\n    ctx.response.type   = 'text/plain'\n    ### thx to https://stackoverflow.com/a/51616217/7568091 ###\n    rsp                 = ctx.body = new Stream()\n    rsp.push '-------------------------------------\\n'\n    #.......................................................................................................\n    debug '^35324^', { doc_file_id: ctx.params.dfid, }\n    for doc_line_txt from @doc.db.first_values SQL\"\"\"\n      select\n          doc_line_txt\n        from doc_lines\n        where doc_file_id = $doc_file_id\n        order by doc_file_id, doc_line_nr;\"\"\", { doc_file_id: ctx.params.dfid, }\n      rsp.push doc_line_txt + '\\n'\n    #.......................................................................................................\n    rsp.push '-------------------------------------\\n'\n    rsp.push null # indicates end of the stream\n    return null\n\n  #=========================================================================================================\n  # ERROR HANDLING\n  #---------------------------------------------------------------------------------------------------------\n  $error_handler: -> ( error, ctx ) =>\n    if ( url = ctx?.request.url )?\n      prefix = \"When trying to retrieve #{rpr url}, an \"\n    else\n      prefix = \"An \"\n    message = prefix + \"error with message #{rpr error.message ? \"UNKNOWN\"} was encountered\"\n    warn '^3298572^', error\n    warn GUY.trm.reverse '^3298572^', message\n    debug '^323423^', await NODEXH._exit_handler error\n    return null\n\n\n#===========================================================================================================\nclass Datamill_server extends Datamill_server_base\n\n  #=========================================================================================================\n  # CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    GUY.props.hide @, 'types', get_server_types()\n    @cfg        = @types.create.datamill_server_cfg cfg\n    GUY.props.hide @, 'doc', @cfg.doc; delete @cfg.doc\n    @cfg        = Object.freeze @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'app',    new Koa()\n    GUY.props.hide @, 'router', new Router()\n    #.......................................................................................................\n    @_watch_doc_files()\n    return undefined\n\n\n  #=========================================================================================================\n  # RUN SERVER\n  #---------------------------------------------------------------------------------------------------------\n  start: -> new Promise ( resolve, reject ) =>\n    { host\n      port  } = @cfg\n    @_create_app()\n    #.......................................................................................................\n    GUY.props.hide @, 'http_server',  HTTP.createServer @app.callback()\n    GUY.props.hide @, 'io',           new Socket_server @http_server\n    #.......................................................................................................\n    @io.on 'connection', ( socket ) =>\n      help \"^datamill/server@8^ user connected to socket\"\n      socket.on 'message', ( P... ) -> info '^datamill/server@8^', P\n      return null\n    #.......................................................................................................\n    @io.on 'disconnect', ( socket ) =>\n      help \"^datamill/server@8^ user disconnected from socket\"\n      return null\n    #.......................................................................................................\n    @http_server.listen { host, port, }, ->\n      debug \"^datamill/server@9^ listening on #{host}:#{port}\"\n      resolve { host, port, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_app: ->\n    ###\n    `_r_*`: managed by router\n    `_s_*`: managed by server\n    ###\n    @app.use                                          @_s_log\n    #.......................................................................................................\n    @router.get   'home',           '/',              @_r_home\n    @router.get   'tables',         '/tables',        @_r_tables\n    @router.get   'table',          '/table/:rel',    @_r_table\n    @router.get   'files',          '/files',         @_r_files\n    @router.get   'file',           '/file/:dfid',    @_r_file\n    ### TAINT differentiate between 'documents' and 'files' ###\n    # @router.get   'docs',           '/docs',          @_r_docs\n    @router.get   'doc',            '/doc/:dfid',     @_r_doc\n    #.......................................................................................................\n    @app.use @router.routes()\n    #.......................................................................................................\n    ### thx to https://stackoverflow.com/a/66377342/7568091 ###\n    debug '^4345^', @cfg.paths.public\n    debug '^4345^', @cfg.file_server\n    # @app.use mount '/favicon.ico', file_server @cfg.paths.favicon, @cfg.file_server\n    @app.use mount '/public', file_server @cfg.paths.public, @cfg.file_server\n    @app.use mount '/src',    file_server @cfg.paths.src,    @cfg.file_server\n    #.......................................................................................................\n    @app.use @_s_default\n    @app.use @router.allowedMethods()\n    #.......................................................................................................\n    @app.on 'error', @$error_handler()\n    return null\n\n############################################################################################################\nmodule.exports = { Datamill_server_base, Datamill_server, }\n\n\n\n\n"
  ]
}