{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATAMILL/SERVER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of }               = types\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nHTTP                      = require 'http'\nKoa                       = require 'koa'\nRouter                    = require '@koa/router'\n{ Server: Socket_server } = require 'socket.io'\nfile_server               = require 'koa-files'\nmount                     = require 'koa-mount'\n{ HDML }                  = require 'hdml'\n{ SQL }                   = ( require 'dbay' ).DBay\n{ tabulate\n  summarize }             = require 'dbay-tabulator'\n{ get_base_types\n  get_server_types }      = require './types'\n\n\n#===========================================================================================================\nclass @Datamill_server\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    GUY.props.hide @, 'types', get_server_types()\n    @cfg        = @types.create.datamill_server_cfg cfg\n    GUY.props.hide @, 'db', @cfg.db; delete cfg.db\n    @_add_layout()\n    @cfg        = GUY.lft.freeze @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'app',    new Koa()\n    GUY.props.hide @, 'router', new Router()\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_layout: ->\n    @cfg.layout ?= {}\n    return null if @cfg.layout.top? and @cfg.layout.bottom?\n    path    = PATH.resolve PATH.join __dirname, '../assets/layout.html'\n    layout  = FS.readFileSync path, { encoding: 'utf-8', }\n    [ layout_top\n      layout_bottom   ] = layout.split '<%content%>'\n    @cfg.layout.top    ?= layout_top\n    @cfg.layout.bottom ?= layout_bottom\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  start: => new Promise ( resolve, reject ) =>\n    { host\n      port  } = @cfg\n    @_create_app()\n    #.......................................................................................................\n    GUY.props.hide @, 'http_server',  HTTP.createServer @app.callback()\n    GUY.props.hide @, 'io',           new Socket_server @http_server\n    #.......................................................................................................\n    @io.on 'connection', ( socket ) =>\n      help \"^datamill/server@8^ user connected to socket\"\n      socket.on 'message', ( P... ) -> info '^datamill/server@8^', P\n      return null\n    #.......................................................................................................\n    @io.on 'disconnect', ( socket ) =>\n      help \"^datamill/server@8^ user disconnected from socket\"\n      return null\n    #.......................................................................................................\n    @http_server.listen { host, port, }, ->\n      debug \"^datamill/server@9^ listening on #{host}:#{port}\"\n      resolve { host, port, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_app: =>\n    ###\n    `_r_*`: managed by router\n    `_s_*`: managed by server\n    ###\n    @app.use                                          @_s_log\n    @app.use                                          @_s_layout\n    #.......................................................................................................\n    @router.get   'home',           '/',              @_r_home\n    @router.get   'relation',       '/relation/:rel', @_r_relation\n    # @router.get   'trends',         '/trends',        @_r_trends\n    # @router.get   'layout-demo',    '/layout-demo',   @_r_layout_demo\n    @router.get   'table_by_name',  '/table/:table',  @_r_table_by_name\n    #.......................................................................................................\n    @app.use @router.routes()\n    #.......................................................................................................\n    ### thx to https://stackoverflow.com/a/66377342/7568091 ###\n    debug '^4345^', @cfg.paths.public\n    debug '^4345^', @cfg.file_server\n    # @app.use mount '/favicon.ico', file_server @cfg.paths.favicon, @cfg.file_server\n    @app.use mount '/public', file_server @cfg.paths.public, @cfg.file_server\n    @app.use mount '/src',    file_server @cfg.paths.src,    @cfg.file_server\n    #.......................................................................................................\n    @app.use @_s_default\n    @app.use @router.allowedMethods()\n    return null\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _s_log: ( ctx, next ) =>\n    await next()\n    querystring   = if ctx.querystring?.length > 1 then \"?#{ctx.querystring}\" else ''\n    # help \"^datamill/server@7^\", { method, url, originalUrl, origin, href, path, query, querystring, host, hostname, protocol, }\n    color = if ctx.status < 400 then 'lime' else 'red'\n    line  = \"#{ctx.method} #{ctx.origin}#{ctx.path}#{querystring} -> #{ctx.status} #{ctx.message}\"\n    echo ( GUY.trm.grey \"^datamill/server@7^\" ), ( GUY.trm[ color ] line )\n    # warn \"^datamill/server@7^\", \"#{ctx.status} #{ctx.message}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _s_layout: ( ctx, next ) =>\n    await next()\n    if ( ctx.type is 'text/html' ) and ( not ctx.body?.startswith? \"<!DOCTYPE html>\" )\n      ctx.body = @cfg.layout.top + ctx.body + @cfg.layout.bottom\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _s_default: ( ctx ) =>\n    ctx.response.status = 404\n    ctx.response.type   = 'html'\n    ctx.body            = \"<h3>Datamill / 404 / Not Found</h3>\"\n    # ctx.throw 404, \"no content under #{ctx.url}\"\n    # ( ctx.state.greetings ?= [] ).push \"helo from content handler\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _r_home: ( ctx ) =>\n    ### TAINT generate from DB or load from external file ###\n    relation = @router.url 'relation', 'sqlite_schema'\n    debug '^32234^', { relation, }\n    ctx.body = \"\"\"\n      <h1>Datamill</h1>\n      <ul>\n        <li><a href=#{relation}>Relations (Tables &amp; Views)</a></li>\n        </ul>\n      \"\"\"\n    # help \"^datamill/server@7^\", ctx.router.url 'home', { query: { foo: 'bar', }, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _r_relation: ( ctx ) =>\n    table_name  = ctx.params.rel ? 'sqlite_schema'\n    table_name  = 'sqlite_schema' if table_name is ''\n    ### TAINT use proper interpolation or API ###\n    rows        = @db.all_rows SQL\"\"\"select * from #{table_name} order by 1;\"\"\"\n    ### TAINT use proper error handling in case table_name not found ###\n    table_cfg   = @_get_table_cfg table_name\n    ctx.body    = tabulate { rows, table_cfg..., }\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _r_trends: ( ctx ) =>\n  #   ### TAINT iterate or use stream ###\n  #   ### TAINT chart is per-DSK but trends table is global ###\n  #   R                 = []\n  #   trends_table_name = @db._get_table_name 'trends'\n  #   R.push @_get_dsk_form ctx.query.dsk ? ''\n  #   #.......................................................................................................\n  #   if ctx.query.dsk in [ '', undefined, ]\n  #     for { dsk, scraper, } from @hub.scrapers._XXX_walk_scrapers()\n  #       R.push scraper._XXX_get_details_chart { dsk, }\n  #       # R.push scraper._XXX_get_details_table { dsk, }\n  #     R.push @_table_as_html trends_table_name\n  #   else if ( scraper = @hub.scrapers._scraper_from_dsk ctx.query.dsk, null )?\n  #     table_name_i  = @db.sql.I trends_table_name\n  #     query         = SQL\"select * from #{table_name_i} where dsk = $dsk order by rank;\"\n  #     parameters    = { dsk: ctx.query.dsk, }\n  #     R.push scraper._XXX_get_details_chart { dsk: ctx.query.dsk, }\n  #     R.push @_query_as_html trends_table_name, query, parameters\n  #   else\n  #     ### TAINT use correct error handling ###\n  #     R.push HDML.pair 'div.error', HDML.text \"no such data source: #{rpr ctx.query.dsk}\"\n  #   #.......................................................................................................\n  #   ctx.response.type   = 'html'\n  #   ctx.body            = R.join '\\n'\n  #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _r_table_by_name: ( ctx ) =>\n    public_table_name   = ctx.params.table\n    table               = @db._get_table_name public_table_name\n    R                   = []\n    R.push HDML.pair 'h1', HDML.text public_table_name\n    R.push @_table_as_html table\n    #.......................................................................................................\n    ctx.response.type   = 'html'\n    ctx.body            =  R.join '\\n'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_dsk_form: ( selected = '' ) =>\n    R                   = []\n    #.......................................................................................................\n    R.push HDML.open  'nav'\n    R.push HDML.open  'form', { method: 'GET', action: '/trends', }\n    R.push HDML.pair  'label', { for: 'dsk', }, \"Data Source:\"\n    R.push HDML.open  'select', { name: 'dsk', id: 'dsk', onchange: \"this.form.submit();\", }\n    R.push HDML.pair  'option', { value: '', }, HDML.text \"Select a Data Source\"\n    for { dsk, url, } from @db._walk_datasources()\n      label           = \"#{dsk} (#{url})\"\n      atrs            = { value: dsk, }\n      atrs.selected   = 'true' if selected is dsk\n      R.push HDML.pair  'option', atrs, HDML.text label\n    R.push HDML.close 'select'\n    R.push HDML.pair 'button', { type: 'submit', }, HDML.text \"submit\"\n    R.push HDML.close 'form'\n    R.push HDML.close 'nav'\n    return R.join '\\n'\n\n  #---------------------------------------------------------------------------------------------------------\n  _query_as_html: ( table, query, parameters ) =>\n    table_cfg = @_get_table_cfg table\n    rows      = @db query, parameters\n    return tabulate { rows, table_cfg..., }\n\n  #---------------------------------------------------------------------------------------------------------\n  _table_as_html: ( table ) =>\n    table_cfg   = @_get_table_cfg table\n    query       = SQL\"select * from #{@db.sql.I table};\"\n    rows        = @db query\n    return tabulate { rows, table_cfg..., }\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_table_cfg: ( table ) =>\n    @_set_table_cfgs() unless @table_cfgs?\n    return @table_cfgs[ table ] ? null\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_table_cfgs: =>\n    GUY.props.hide @, 'table_cfgs', {}\n    #.......................................................................................................\n    @table_cfgs[ 'sqlite_schema' ] =\n      fields:\n        name:\n          hide:     false\n          inner_html: ( d ) =>\n            href = @router.url 'relation', d.value\n            debug '^inner_html@234^', ( rpr d.value ), ( rpr href )\n            return HDML.pair 'a', { href, }, HDML.text d.value ? './.'\n        table_name:\n          hide:     true\n        type:\n          hide:     false\n        rootpage:\n          hide:     true\n        sql:\n          title:  \"SQL\"\n          inner_html: ( d ) => HDML.pair 'pre', HDML.text d.value ? './.'\n    #.......................................................................................................\n    # @table_cfgs[ 'trends' ] =\n    #   fields:\n    #     #...................................................................................................\n    #     dsk:\n    #       hide: true\n    #     #...................................................................................................\n    #     sid_min:\n    #       hide: true\n    #     sid_max:\n    #       title:  \"SIDs\"\n    #       inner_html: ( d ) =>\n    #         { sid_min\n    #           sid_max } = d.row\n    #         return sid_min if sid_min is sid_max\n    #         return \"#{sid_min}—#{sid_max}\"\n    #     #...................................................................................................\n    #     ts:\n    #       inner_html: ( d ) => @db.dt_format d.value, 'YYYY-MM-DD HH:mm UTC'\n    #     #...................................................................................................\n    #     raw_trend:\n    #       title:  \"Trend\"\n    #       outer_html:   ({ value: raw_trend }) =>\n    #         return HDML.pair 'td.trend.sparkline', { 'data-trend': raw_trend, }\n    #     #...................................................................................................\n    #     details:\n    #       inner_html:   ( d ) =>\n    #         try row = JSON.parse d.value catch error\n    #           return HDML.pair 'div.error', HDML.text error.message\n    #         cfg =\n    #           row:        row\n    #           fields:\n    #             title:\n    #               title:      \"Title\"\n    #               inner_html: ({ value: title, row, }) =>\n    #                 return HDML.pair 'a', { href: row.title_url, }, HDML.text title\n    #             title_url:\n    #               hide: true\n    #             article:\n    #               title:      \"Article\"\n    #               inner_html: ({ value: title, row, }) =>\n    #                 return Symbol.for 'hide' unless title?\n    #                 return Symbol.for 'hide' unless row.article_url?\n    #                 return HDML.pair 'a', { href: row.article_url, }, HDML.text title\n    #             article_url:\n    #               hide: true\n    #         return summarize cfg\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _r_layout_demo: ( ctx ) =>\n  #   R                   = []\n  #   #.......................................................................................................\n  #   R.push HDML.open  'nav'\n  #   R.push HDML.open  'menu'\n  #   R.push HDML.pair  'li', HDML.pair 'a', { href: '#', }, HDML.text \"one\"\n  #   R.push HDML.pair  'li', HDML.pair 'a', { href: '#', }, HDML.text \"two\"\n  #   R.push HDML.pair  'li', HDML.pair 'a', { href: '#', }, HDML.text \"three\"\n  #   R.push HDML.close 'menu'\n  #   R.push HDML.close 'nav'\n  #   #.......................................................................................................\n  #   R.push HDML.pair  'header', HDML.text \"header\"\n  #   #.......................................................................................................\n  #   R.push HDML.open  'main'\n  #   R.push HDML.open  'article'\n  #   R.push HDML.text  \"article\"\n  #   R.push HDML.close 'article'\n  #   R.push HDML.close 'main'\n  #   #.......................................................................................................\n  #   R.push HDML.pair  'footer', HDML.text \"footer\"\n  #   #.......................................................................................................\n  #   ctx.response.type   = 'html'\n  #   ctx.body            =  R.join '\\n'\n  #   return null\n"
  ]
}