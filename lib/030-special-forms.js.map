{
  "version": 3,
  "file": "030-special-forms.js",
  "sourceRoot": "..",
  "sources": [
    "src/030-special-forms.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@active_chr_pattern   = /// ///u\n@active_chrs          = new Set()\n\n#-----------------------------------------------------------------------------------------------------------\n### thx to https://stackoverflow.com/a/3561711/7568091 ###\n@_escape_for_regex = ( text ) -> text.replace @_escape_for_regex.pattern, '\\\\$&'\n@_escape_for_regex.pattern = /[-\\/\\\\^$*+?.()|[\\]{}]/g\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs = ( chrs... ) ->\n  for chr in chrs\n    unless ( CND.isa_text chr ) and ( chr.match /^.$/u )?\n      throw new Error \"expected single character, got #{rpr chr}\"\n    @active_chrs.add chr\n  achrs                 = ( ( @_escape_for_regex chr ) for chr from @active_chrs ).join '|'\n  @active_chr_pattern   = /// ^ (?<left> .*? ) (?<achrs> (?<achr> #{achrs} ) \\k<achr>* ) (?<right> .* ) $ ///\n                        # /// (?<!\\\\) (?<achr> (?<chr> [ \\* ` + p ] ) \\k<chr>* ) ///\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs '<', '&', '*', '`', '^', '_', '=', '-', '+', 'ð£¥’'\n# help @active_chr_pattern\n\n# debug @_escape_for_regex '*'\n# debug @_escape_for_regex '/'\n# debug @_escape_for_regex '^'\n# debug @_escape_for_regex '\\\\'\n# debug 'foo-bar'.match new RegExp '[x\\\\-a]'\n# @add_active_chr '-'; help @active_chr_pattern\n# @add_active_chr '^'; help @active_chr_pattern\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@split_on_first_active_chr = ( text ) ->\n  ### If `text` contains an active character, return a POD with the keys `left`, `achr`, and `right`, where\n  `left` holds the (possibly empty) text before the first active character, `achr` holds the active\n  character itself, and `right` holds the remaining, again possibly empty, text (that may or may not contain\n  further active characters). ###\n  return null unless ( match = text.match @active_chr_pattern )?\n  return match.groups\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_on_first_active_chr = ( S ) ->\n  return $ ( d, send ) =>\n    return send d unless select d, '^mktscript'\n    return send d if d.text is '' ### empty lines are normally stamped out by WS consolidation ###\n    # debug 'Âµ88732', d\n    if ( parts = @split_on_first_active_chr d.text )?\n      { achr, achrs, left, right, } = parts\n      send stamp d\n      $vnr = VNR.new_level d.$vnr, 0\n      if left? and left isnt ''\n        $vnr = VNR.advance $vnr; send H.fresh_datom '^literal', { text: left, $vnr, }\n      $vnr = VNR.advance $vnr; send H.fresh_datom '^achr-split', { achrs, achr, right, $vnr, }\n    else\n      send stamp d\n      send H.swap_key d, '^literal'\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_empty_texts = ( S ) -> PD.$filter ( d ) => not ( ( select d, '^mktscript' ) and ( d.text is '' ) )\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$consolidate_texts = ( S ) ->\n#   buffer = []\n#   return $ { last: null, }, ( d, send ) =>\n#     # debug '93093-1', jr d\n#     if d?\n#       if ( select d, '^mktscript' )\n#         buffer.push d.text\n#         # whisper '93093-2', buffer\n#       else\n#         unless isa.empty buffer\n#           send PD.new_text_event ( buffer.join '' )\n#           buffer.length = 0\n#         send d\n#     else\n#       # whisper '93093-3', buffer\n#       unless isa.empty buffer\n#         send PD.new_text_event ( buffer.join '' )\n#         buffer.length = 0\n#     return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$handle_remaining_achrs = ( S ) -> $ ( d, send ) =>\n    if ( select d, '^achr-split' )\n      lnr     = d.$?.lnr  ? '?'\n      text    = if d.$?.text? then ( rpr d.$.text ) else '?'\n      message = \"unhandled active characters #{rpr d.text} on line #{lnr} in #{text}\"\n      send PD.new_text_event d.left, { clean: true, $: d } unless isa.empty d.left\n      send PD.new_warning 'Âµ99823', message, d, $: d\n      # send PD.new_text_event d.left + d.text + d.right, $: d\n      # send d\n    else\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_symmetric_achr_transform = ( S, start_stop, name ) ->\n  within      = false\n  opening_key = \"<#{name}\"\n  closing_key = \">#{name}\"\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    if ( select d, '^achr-split' ) and ( d.achrs is start_stop )\n      $vnr    = VNR.new_level d.$vnr, 0\n      #.....................................................................................................\n      if within then  $vnr = VNR.advance $vnr; send H.fresh_datom closing_key, null, { $vnr, }\n      else            $vnr = VNR.advance $vnr; send H.fresh_datom opening_key, null, { $vnr, }\n      #.....................................................................................................\n      within  = not within\n      $vnr    = VNR.advance $vnr; send H.fresh_datom '^mktscript', { text: d.right, $vnr, }\n    else\n      send d\n    return null\n\n\n#===========================================================================================================\n###\n\nSources:\n\n* https://markdown-it.github.io/\n* https://commonmark.org/help/\n* https://www.markdownguide.org/basic-syntax\n\nSpecial Forms:\n\n* *italic*\n* **bold**\n* ***bold italic***â€”possibly using underscores, e.g. `_**bold italic**_`, `__*bold italic*__`,\n  `*__bold italic__*`, ...\n* --strike-- (sometimes using tildes, ~~strike~~)\n* ++ins++ (inserted text, used together with `--strike--`)\n* ==mark== (highlighted, hilite)\n* `code`\n\n\n###\n\n#-----------------------------------------------------------------------------------------------------------\n@$mark          = ( S ) -> @_get_symmetric_achr_transform S, '==',    'mark'\n@$ins           = ( S ) -> @_get_symmetric_achr_transform S, '++',    'ins'\n@$strike        = ( S ) -> @_get_symmetric_achr_transform S, '--',    'strike'\n@$em_and_strong = ( S ) -> @_get_symmetric_achr_transform S, '***',   'em-and-strong'\n@$strong        = ( S ) -> @_get_symmetric_achr_transform S, '**',    'strong'\n@$em            = ( S ) -> @_get_symmetric_achr_transform S, '*',     'em'\n\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$codeblocks = ( S ) ->\n#   ### Recognize codeblocks as regions delimited by triple backticks. Possible extensions include\n#   markup for source code category and double service as pre-formatted blocks. ###\n#   pattern           = /// ^ (?<backticks> ``` ) $ ///\n#   within_codeblock  = false\n#   #.........................................................................................................\n#   return $ ( d, send ) =>\n#     return send d unless select d, '^mktscript'\n#     ### TAINT should send `<codeblock` datom ###\n#     if ( match = d.text.match pattern )?\n#       within_codeblock = not within_codeblock\n#       send stamp d\n#     else\n#       if within_codeblock\n#         send stamp d\n#         $vnr  = VNR.new_level d.$vnr, 1\n#         ### TAINT should somehow make sure properties are OK for a `^literal` ###\n#         d1    = d\n#         d1    = PD.set d1, 'key',    '^literal'\n#         d1    = PD.set d1, '$vnr',   $vnr\n#         d1    = PD.set d1, '$fresh', true\n#         send d1\n#       else\n#         send d\n#     # $vnr  = VNR.new_level d.$vnr, 0\n#     # $vnr  = VNR.advance $vnr; send H.fresh_datom '<codeblock',        { level, $vnr, }\n#     # $vnr  = VNR.advance $vnr; send H.fresh_datom '>codeblock',        { level, $vnr, }\n#     return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$heading = ( S ) ->\n#   ### Recognize heading as any line that starts with a `#` (hash). Current behavior is to\n#   check whether both prv and nxt lines are blank and if not so issue a warning; this detail may change\n#   in the future. ###\n#   pattern = /// ^ (?<hashes> \\#+ ) (?<text> .* ) $ ///\n#   #.........................................................................................................\n#   return $ ( d, send ) =>\n#     return send d unless select d, '^mktscript'\n#     return send d unless ( match = d.text.match pattern )?\n#     prv_line_is_blank = H.previous_line_is_blank  S, d.$vnr\n#     nxt_line_is_blank = H.next_line_is_blank      S, d.$vnr\n#     $vnr              = VNR.new_level d.$vnr, 0\n#     unless prv_line_is_blank and nxt_line_is_blank\n#       ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n#       ### TAINT update PipeDreams: warnings always marked fresh ###\n#       # warning = PD.new_warning d.$vnr, message, d, { $fresh: true, }\n#       message = \"Âµ09082 heading should have blank lines above and below\"\n#       $vnr    = VNR.advance $vnr; send H.fresh_datom '~warning', message, { $vnr, }\n#       ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n#     send stamp d\n#     level = match.groups.hashes.length\n#     text  = match.groups.text.replace /^\\s*(.*?)\\s*$/g, '$1' ### TAINT use trim method ###\n#     # debug 'Âµ88764', rpr match.groups.text\n#     # debug 'Âµ88764', rpr text\n#     $vnr  = VNR.advance $vnr; send H.fresh_datom '<h',                { level, $vnr, }\n#     $vnr  = VNR.advance $vnr; send H.fresh_datom '^mktscript', text,  { $vnr, }\n#     $vnr  = VNR.advance $vnr; send H.fresh_datom '>h',                { level, $vnr, }\n#     return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$split_on_first_active_chr         S\n  # pipeline.push @$mark                              S\n  # pipeline.push @$ins                               S\n  # pipeline.push @$strike                            S\n  # pipeline.push @$em_and_strong                     S\n  pipeline.push @$em                                S\n  pipeline.push @$strong                            S\n  # # pipeline.push @$recycle_untouched_texts           S\n  # pipeline.push @$filter_empty_texts                S\n  # pipeline.push @$handle_remaining_achrs            S\n  # pipeline.push @$consolidate_texts                 S\n  return PD.pull pipeline...\n\n"
  ]
}