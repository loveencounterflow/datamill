{
  "version": 3,
  "file": "010-whitespace-1.js",
  "sourceRoot": "..",
  "sources": [
    "src/010-whitespace-1.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$trim = ( S ) ->\n  ref           = 'ws1/trm'\n  return $ ( d, send ) =>\n    return send d unless select d, '^line'\n    if ( new_text = d.text.trimEnd() ) isnt d.text\n      d = PD.set d, { text: new_text, ref, }\n    send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$blank_lines = ( S ) ->\n  prv_vnr       = null\n  prv_dest      = null\n  linecount     = 0\n  send          = null\n  within_blank  = false\n  is_first_line = true\n  ref           = 'ws1/bl'\n  #.........................................................................................................\n  H.register_key S, '^blank', { is_block: false, }\n  #.........................................................................................................\n  flush = ( advance = false ) =>\n    return null unless prv_vnr?\n    within_blank  = false\n    $vnr = VNR.advance  prv_vnr\n    # if advance  then  $vnr = VNR.deepen VNR.advance  prv_vnr\n    # else              $vnr = VNR.deepen              prv_vnr\n    ref = 'ws1/bl-A'\n    send H.fresh_datom '^blank', { linecount, $vnr, dest: prv_dest, ref, }\n    linecount     = 0\n  #.........................................................................................................\n  return $ { last, }, ( d, send_ ) =>\n    send = send_\n    #.......................................................................................................\n    if d is last\n      flush true\n      return null\n    #.......................................................................................................\n    is_line = select d, '^line'\n    #.......................................................................................................\n    ### Insert blank if first line isn't blank: ###\n    if is_line and is_first_line\n      is_first_line = false\n      if ( d.text isnt '' )\n        ref = 'ws1/bl-B'\n        send H.fresh_datom '^blank', { linecount: 0, $vnr: [ 0 ], dest: d.dest, ref, }\n    #.......................................................................................................\n    return send d unless is_line\n    #.......................................................................................................\n    ### line is empty / blank ###\n    if d.text is ''\n      linecount     = 0 unless within_blank\n      linecount    += +1\n      within_blank  = true\n      prv_dest      = d.dest\n      prv_vnr       = VNR.deepen d.$vnr\n      return send stamp d\n    #.......................................................................................................\n    ### line contains material ###\n    flush false if within_blank\n    ### TAINT use API to ensure all pertinent values are captured ###\n    prv_dest    = d.dest\n    prv_vnr     = d.$vnr\n    send d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$blanks_at_dest_changes = ( S ) -> $ { last, }, ( d, send ) =>\n  ref = 'ws1/dst'\n  return send d unless d is last\n  db = S.mirage.dbw\n  for row from db.read_changed_dest_last_lines()\n    d = H.datom_from_row S,row\n    break if select d, '^blank'\n    # send stamp d\n    # send d  = VNR.deepen d\n    send d\n    $vnr    = VNR.advance VNR.deepen d.$vnr\n    send d  = H.fresh_datom '^blank', { linecount: 0, $vnr, dest: d.dest, ref, }\n  for row from db.read_changed_dest_first_lines()\n    d = H.datom_from_row S,row\n    break if select d, '^blank'\n    # send stamp d\n    # send d  = VNR.deepen d\n    send d\n    $vnr    = VNR.recede VNR.deepen d.$vnr\n    send d  = H.fresh_datom '^blank', { linecount: 0, $vnr, dest: d.dest, ref, }\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$trim                    S\n  pipeline.push @$blank_lines             S\n  pipeline.push @$blanks_at_dest_changes  S\n  return PD.pull pipeline...\n\n"
  ]
}