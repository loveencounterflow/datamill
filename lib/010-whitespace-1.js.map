{
  "version": 3,
  "file": "010-whitespace-1.js",
  "sourceRoot": "..",
  "sources": [
    "src/010-whitespace-1.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\nDM                        = require '..'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$trim = ( S ) ->\n  ref           = 'ws1/trm'\n  return $ ( d, send ) =>\n    return send d unless select d, '^line'\n    if ( new_text = d.text.trimEnd() ) isnt d.text\n      d = PD.set d, { text: new_text, ref, }\n    send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$blank_lines = ( S ) ->\n  prv_vnr       = null\n  prv_dest      = null\n  linecount     = 0\n  send          = null\n  within_blank  = false\n  ref           = 'ws1/bl'\n  #.........................................................................................................\n  H.register_key S, '^blank', { is_block: false, }\n  #.........................................................................................................\n  flush = ( advance = false ) =>\n    return null unless prv_vnr?\n    within_blank  = false\n    $vnr = VNR.advance prv_vnr\n    # if advance  then  $vnr = VNR.deepen VNR.advance  prv_vnr\n    # else              $vnr = VNR.deepen              prv_vnr\n    ref = 'ws1/bl-A'\n    send H.fresh_datom '^blank', { linecount, $vnr, dest: prv_dest, ref, }\n    linecount     = 0\n  #.........................................................................................................\n  return PD.mark_position $ ( pd, send_ ) =>\n    { is_first\n      is_last\n      d       } = pd\n    #.......................................................................................................\n    send = send_\n    #.......................................................................................................\n    if is_last\n      flush true\n      return null\n    #.......................................................................................................\n    is_line = select d, '^line'\n    #.......................................................................................................\n    ### Insert blank if first line isn't blank: ###\n    if is_line and is_first\n      if ( d.text isnt '' )\n        ref = 'ws1/bl-B'\n        send H.fresh_datom '^blank', { linecount: 0, $vnr: [ 0 ], dest: d.dest, ref, }\n    #.......................................................................................................\n    return send d unless is_line\n    #.......................................................................................................\n    ### line is empty / blank ###\n    if d.text is ''\n      linecount     = 0 unless within_blank\n      linecount    += +1\n      within_blank  = true\n      prv_dest      = d.dest\n      prv_vnr       = VNR.deepen d.$vnr\n      return send stamp d\n    #.......................................................................................................\n    ### line contains material ###\n    flush false if within_blank\n    ### TAINT use API to ensure all pertinent values are captured ###\n    prv_dest    = d.dest\n    prv_vnr     = d.$vnr\n    send d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$blank_lines_2 = ( S ) ->\n  H.register_key S, '^blank', { is_block: false, }\n  #.........................................................................................................\n  return PD.mark_position $ ( pd, send ) =>\n    { is_first\n      is_last\n      d       } = pd\n    #.......................................................................................................\n    ### Make sure the first thing in document or fragment is a blank: ###\n    if is_first and not select d, '^blank'\n      send stamp d\n      ref   = 'ws1/b2-1'\n      $vnr  = VNR.deepen d.$vnr\n      send H.fresh_datom '^blank', { $vnr: ( VNR.recede $vnr ), ref, }\n      send PD.set d, { $vnr, $fresh: true, ref, }\n      ### If the sole line in document or fragment is not a blank line, make sure it is followed by a\n      blank; we do this here and not in the next clause, below, to avoid sending a duplicate of the\n      the text line: ###\n      if is_last\n        send H.fresh_datom '^blank', { $vnr: ( VNR.advance $vnr ), ref, }\n    #.......................................................................................................\n    ### Make sure the last thing in document or fragment is a blank: ###\n    else if is_last and not select d, '^blank'\n      send stamp d\n      ref   = 'ws1/b2-2'\n      $vnr  = VNR.deepen d.$vnr\n      send H.fresh_datom '^blank', { $vnr: ( VNR.advance $vnr ), ref, }\n      send PD.set d, { $vnr, $fresh: true, ref, }\n    else\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$blanks_at_dest_changes = ( S ) -> $ { last, }, ( d_, send ) =>\n  return send d_ unless d_ is last\n  db  = S.mirage.dbw\n  #.........................................................................................................\n  do =>\n    ref = 'ws1/dst1'\n    for row from db.read_changed_dest_last_lines()\n      break if select row, '^blank'\n      d = H.datom_from_row S, row\n      send stamp d\n      send d = VNR.deepen PD.set d, { $fresh: true, ref, }\n      send H.fresh_datom '^blank', { linecount: 0, $vnr: ( VNR.advance d.$vnr ), dest: d.dest, ref, }\n  #.........................................................................................................\n  do =>\n    ref = 'ws1/dst2'\n    for row from db.read_changed_dest_first_lines()\n      break if select row, '^blank'\n      d = H.datom_from_row S, row\n      send stamp d\n      send d  = VNR.deepen PD.set d, { $fresh: true, ref, }\n      send H.fresh_datom '^blank', { linecount: 0, $vnr: ( VNR.recede d.$vnr ), dest: d.dest, ref, }\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$trim                    S\n  # pipeline.push @$blank_lines             S\n  pipeline.push @$blank_lines_2           S\n  pipeline.push @$blanks_at_dest_changes  S\n  return PD.pull pipeline...\n\n"
  ]
}