{
  "version": 3,
  "file": "030-1-paragraphs-breaks.js",
  "sourceRoot": "..",
  "sources": [
    "src/030-1-paragraphs-breaks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n# ### Whether in-place updates are OK ###\n# prefer_updates = true\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$breaks = ( S ) ->\n  H.register_key S, '^break', { is_block: false, }\n  key_registry    = H.get_key_registry S\n  prv_was_break   = false\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d if PD.is_stamped d\n    #.......................................................................................................\n    if ( select d, '^blank' )\n      if ( not prv_was_break )\n        ### TAINT code duplication ###\n        ref           = 'pbr/br1'\n        dest          = d.dest\n        $vnr          = VNR.deepen d.$vnr, 0\n        send H.fresh_datom '^break', { $vnr: ( VNR.advance $vnr ), dest, ref, }\n        prv_was_break = true\n      return send d\n    #.......................................................................................................\n    is_block  = key_registry[ d.key ].is_block\n    is_opener = select d, '<'\n    is_closer = select d, '>'\n    #.......................................................................................................\n    if ( not prv_was_break ) and is_block\n      if is_opener\n        ### TAINT code duplication ###\n        ref           = 'pbr/br2'\n        dest          = d.dest\n        $vnr          = VNR.deepen d.$vnr, 0\n        send H.fresh_datom '^break', { $vnr: ( VNR.recede $vnr ), dest, ref, }\n        send PD.set d, { $vnr, ref, }\n        prv_was_break = true\n        send stamp d\n        return\n      else\n        ### TAINT code duplication ###\n        ref           = 'pbr/br3'\n        dest          = d.dest\n        $vnr          = VNR.deepen d.$vnr, 0\n        send PD.set d, { $vnr, ref, }\n        send H.fresh_datom '^break', { $vnr: ( VNR.advance $vnr ), dest, ref, }\n        prv_was_break = true\n        send stamp d\n        return\n    #.......................................................................................................\n    prv_was_break = false\n    send d\n    # return send d unless select d, '^blank'\n    # send stamp d\n    # $vnr    = VNR.deepen d.$vnr, 0\n    # $vnr    = VNR.advance $vnr; send H.fresh_datom '^p', { blanks: d.linecount, $vnr, }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$breaks      S\n  return PD.pull pipeline...\n\n"
  ]
}