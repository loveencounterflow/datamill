// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, DM, H, MIRAGE, PD, VNR, assign, badge, cast, cwd_abspath, cwd_relpath, debug, echo, first, first_of, help, here_abspath, info, isa, jr, last, last_of, project_abspath, rpr, select, size_of, stamp, type_of, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'DATAMILL/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  MIRAGE = require('mkts-mirage');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  this.types = require('./types');

  ({isa, validate, cast, first_of, last_of, size_of, type_of} = this.types);

  //...........................................................................................................
  H = require('./helpers');

  ({cwd_abspath, cwd_relpath, here_abspath, project_abspath} = H);

  //...........................................................................................................
  DM = require('..');

  //-----------------------------------------------------------------------------------------------------------
  this.$decorations = function(S) {
    return $({first, last}, (d, send) => {
      if (d === first) {
        send(H.fresh_datom('^html', {
          text: '<html><body>',
          ref: 'rdh/deco-1',
          $vnr: [-2e308]
        }));
      }
      if (d === last) {
        send(H.fresh_datom('^html', {
          text: '</body></html>',
          ref: 'rdh/deco-2',
          $vnr: [2e308]
        }));
      } else {
        send(d);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$p = function(S) {
    return PD.lookaround($((d3, send) => {
      var $vnr, d, nxt, prv, text;
      [prv, d, nxt] = d3;
      if (!select(d, '^mktscript')) {
        return send(d);
      }
      text = d.text;
      if (select(prv, '<p')) {
        text = `<p>${text}`;
        send(stamp(prv));
      }
      if (select(nxt, '>p')) {
        text = `${text}</p>`;
        send(stamp(nxt));
      }
      $vnr = VNR.deepen(d.$vnr);
      send(H.fresh_datom('^html', {
        text: text,
        ref: 'rdh/p',
        $vnr
      }));
      send(stamp(d));
      return null;
    }));
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @$mktscript = ( S ) -> $ ( d, send ) =>
  //   if select d, '^mktscript'
  //     $vnr = VNR.deepen d.$vnr
  //     send H.fresh_datom '^html', { text: d.text, ref: 'rdh/mkts-1', $vnr, }
  //     send d
  //   else
  //     send d
  //   return null

  //-----------------------------------------------------------------------------------------------------------
  this.$blank = function(S) {
    return $((d, send) => {
      var $vnr, _, i, ref, ref1;
      if (!select(d, '^blank')) {
        return send(d);
      }
      $vnr = VNR.deepen(d.$vnr);
      for (_ = i = 1, ref = (ref1 = d.linecount) != null ? ref1 : 0; i <= ref; _ = i += +1) {
        $vnr = VNR.advance($vnr);
        send(H.fresh_datom('^html', {
          text: '',
          ref: 'rdh/mkts-1',
          $vnr
        }));
      }
      return send(stamp(d));
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$set_realm = function(S, realm) {
    return $((d, send) => {
      return send(d.realm != null ? d : PD.set(d, {realm}));
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.settings = {
    from_realm: 'html',
    to_realm: 'html'
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    H.register_key(S, '^html', {
      is_block: false
    });
    H.register_realm(S, this.settings.to_realm);
    H.copy_realm(S, 'input', 'html');
    pipeline = [];
    // pipeline.push @$decorations S
    pipeline.push(this.$p(S));
    pipeline.push(this.$blank(S));
    pipeline.push(this.$set_realm(S, this.settings.to_realm));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=render-as-html.js.map
