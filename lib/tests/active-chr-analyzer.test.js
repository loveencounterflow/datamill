// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, ACHRA, CND, FS, OS, PATH, PS, alert, assign, badge, debug, defer, echo, help, info, inspect, is_empty, jr, log, provide_achra, rpr, test, urge, warn, whisper, xrpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'DATAMILL/TESTS/ACTIVE-CHRS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  test = require('guy-test');

  //...........................................................................................................
  PS = require('../..');

  ({$, $async} = PS);

  //...........................................................................................................
  ({jr, assign, is_empty} = CND);

  defer = setImmediate;

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  provide_achra = function() {
    var declare, isa, size_of, type_of, types, validate;
    types = require('../types');
    ({isa, validate, declare, size_of, type_of} = types);
    declare('achra_aform_entry', function(x) {
      return this.isa.object(x);
    });
    //-----------------------------------------------------------------------------------------------------------
    this._colorize_groups = function(groups) {
      var aform, left, move, right;
      ({left, aform, right, move} = groups);
      if (move === 'open') {
        return [CND.green(left), CND.yellow('<'), CND.white(aform), CND.orange(right)].join('');
      }
      return [CND.green(left), CND.white(aform), CND.yellow('>'), CND.orange(right)].join('');
    };
    //-----------------------------------------------------------------------------------------------------------
    this.achr_pattern = /(?:)/u;
    this.aform = new Set();
    //-----------------------------------------------------------------------------------------------------------
    this.aform_pattern = /(?:)/u;
    this.aforms = [];
    //-----------------------------------------------------------------------------------------------------------
    /* thx to https://stackoverflow.com/a/3561711/7568091 */
    this._escape_for_regex = function(text) {
      return text.replace(this._escape_for_regex.pattern, '\\$&');
    };
    this._escape_for_regex.pattern = /[-\/\\^$*+?.()|[\]{}]/g;
    //-----------------------------------------------------------------------------------------------------------
    this.add_aforms = function(...aforms) {
      var aform, i, k, len, matcher, ref;
      for (i = 0, len = aforms.length; i < len; i++) {
        aform = aforms[i];
        validate.achra_aform_entry(aform);
        this.aforms.push(aform);
        k = (ref = aform.open) != null ? ref : aform.single;
        k = aform.pattern = this._escape_for_regex(k);
      }
      matcher = ((function() {
        var j, len1, ref1, results;
        ref1 = this.aforms;
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          aform = ref1[j];
          results.push(aform.pattern);
        }
        return results;
      }).call(this)).join('|');
      this.aform_pattern = RegExp(`^(?<left>.*?)(?<aform>${matcher})(?<right>.*)$`);
      return null;
    };
    //-----------------------------------------------------------------------------------------------------------
    // @add_active_chrs '<', '&', '*', '`', '^', '_', '=', '-', '+', '𣥒'
    this.add_aforms({
      tag: 'code',
      open: '`',
      close: '`'
    });
    this.add_aforms({
      tag: 'super',
      open: '^',
      close: '^'
    });
    this.add_aforms({
      tag: 'sub',
      open: '_',
      close: '_'
    });
    this.add_aforms({
      tag: 'em-or-strong',
      single: '***'
    });
    this.add_aforms({
      tag: 'strong',
      open: '**',
      close: '**'
    });
    this.add_aforms({
      tag: 'em',
      open: '*',
      close: '*'
    });
    this.add_aforms({
      tag: 'tag',
      open: '<',
      close: '>'
    });
    this.add_aforms({
      tag: 'ncr',
      open: '&',
      close: ';'
    });
    // @add_aforms { tag: '',              open:   '=',  close: '=',  }
    // @add_aforms { tag: '',              open:   '-',  close: '-',  }
    // @add_aforms { tag: '',              open:   '+',  close: '+',  }
    // '𣥒': {}
    // help @achr_pattern

    //===========================================================================================================

    //-----------------------------------------------------------------------------------------------------------
    this.split_on_next_aform = function(text) {
      var match;
      if ((match = text.match(this.aform_pattern)) == null) {
        /* If `text` contains an active character, return a POD with the keys `left`, `achr`, and `right`, where
        `left` holds the (possibly empty) text before the first active character, `achr` holds the active
        character itself, and `right` holds the remaining, again possibly empty, text (that may or may not contain
        further active characters). */
        return null;
      }
      return assign({}, match.groups);
    };
    //-----------------------------------------------------------------------------------------------------------
    this.advance = function*(text) {
      var aform, groups, left, move, right, stack, t, top;
      stack = [];
      top = function() {
        var s;
        if ((s = stack.length) === 0) {
          return null;
        } else {
          return stack[s - 1];
        }
      };
      while ((groups = this.split_on_next_aform(text)) != null) {
        ({left, aform, right} = groups);
        if ((t = top()) !== aform) {
          stack.push(aform);
          move = 'open';
        } else {
          stack.pop();
          move = 'close';
        }
        yield ({left, aform, right, move, stack});
        text = right;
      }
      return null;
    };
    return this;
  };

  ACHRA = provide_achra.apply({});

  //-----------------------------------------------------------------------------------------------------------
  this["xxx"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [["A *short* **demonstration** of `MKTScript`.", 2, null], ["A *short **demonstration*** of `MKTScript`.", 2, null]];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve) {
          var groups, ref;
          ref = ACHRA.advance(probe);
          for (groups of ref) {
            debug('µ33342', ACHRA._colorize_groups(groups));
          }
          return resolve(2);
        });
      });
    }
    //.........................................................................................................
    done();
    return null;
  };

  // debug @_escape_for_regex '*'
  // debug @_escape_for_regex '/'
  // debug @_escape_for_regex '^'
  // debug @_escape_for_regex '\\'
  // debug 'foo-bar'.match new RegExp '[x\\-a]'
  // @add_active_chr '-'; help @achr_pattern
  // @add_active_chr '^'; help @achr_pattern

  //###########################################################################################################
  if (module.parent == null) {
    test(this, {
      timeout: 5000
    });
  }

  // test @[ "wye with duplex pair"            ]

}).call(this);

//# sourceMappingURL=active-chr-analyzer.test.js.map
