{
  "version": 3,
  "file": "active-chr-analyzer.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/active-chr-analyzer.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/TESTS/ACTIVE-CHRS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\n{ jr\n  assign\n  is_empty }              = CND\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n\n\nprovide_achra = ->\n  types                     = require '../types'\n  { isa\n    validate\n    declare\n    size_of\n    type_of }               = types\n\n  declare 'achra_aform_entry', ( x ) -> @isa.object x\n\n  #-----------------------------------------------------------------------------------------------------------\n  @_colorize_groups = ( groups ) ->\n    { left\n      aform\n      right\n      move } = groups\n    if move is 'open'\n      return [\n        ( CND.green   left  )\n        ( CND.yellow  '<'   )\n        ( CND.white   aform )\n        ( CND.orange  right )\n        ].join ''\n    return [\n      ( CND.green   left  )\n      ( CND.white   aform )\n      ( CND.yellow  '>'   )\n      ( CND.orange  right )\n      ].join ''\n\n  #-----------------------------------------------------------------------------------------------------------\n  @achr_pattern   = /// ///u\n  @aform          = new Set()\n\n  #-----------------------------------------------------------------------------------------------------------\n  @aform_pattern  = /// ///u\n  @aforms         = []\n\n  #-----------------------------------------------------------------------------------------------------------\n  ### thx to https://stackoverflow.com/a/3561711/7568091 ###\n  @_escape_for_regex = ( text ) -> text.replace @_escape_for_regex.pattern, '\\\\$&'\n  @_escape_for_regex.pattern = /[-\\/\\\\^$*+?.()|[\\]{}]/g\n\n  #-----------------------------------------------------------------------------------------------------------\n  @add_aforms = ( aforms... ) ->\n    for aform in aforms\n      validate.achra_aform_entry aform\n      @aforms.push aform\n      k               = aform.open ? aform.single\n      k               =\n      aform.pattern   = @_escape_for_regex k\n    matcher             = ( aform.pattern for aform in @aforms ).join '|'\n    @aform_pattern      = /// ^ (?<left> .*? ) (?<aform> #{matcher} ) (?<right> .* ) $ ///\n    return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  # @add_active_chrs '<', '&', '*', '`', '^', '_', '=', '-', '+', '𣥒'\n  @add_aforms { tag: 'code',          open:   '`',  close: '`',  }\n  @add_aforms { tag: 'super',         open:   '^',  close: '^',  }\n  @add_aforms { tag: 'sub',           open:   '_',  close: '_',  }\n  @add_aforms { tag: 'em-or-strong',  single: '***',              }\n  @add_aforms { tag: 'strong',        open:   '**', close: '**', }\n  @add_aforms { tag: 'em',            open:   '*',  close: '*',  }\n  @add_aforms { tag: 'tag',           open:   '<',  close: '>',  }\n  @add_aforms { tag: 'ncr',           open:   '&',  close: ';',  }\n  # @add_aforms { tag: '',              open:   '=',  close: '=',  }\n  # @add_aforms { tag: '',              open:   '-',  close: '-',  }\n  # @add_aforms { tag: '',              open:   '+',  close: '+',  }\n    # '𣥒': {}\n  # help @achr_pattern\n\n\n  #===========================================================================================================\n  #\n  #-----------------------------------------------------------------------------------------------------------\n  @split_on_next_aform = ( text ) ->\n    ### If `text` contains an active character, return a POD with the keys `left`, `achr`, and `right`, where\n    `left` holds the (possibly empty) text before the first active character, `achr` holds the active\n    character itself, and `right` holds the remaining, again possibly empty, text (that may or may not contain\n    further active characters). ###\n    return null unless ( match = text.match @aform_pattern )?\n    return assign {}, match.groups\n\n  #-----------------------------------------------------------------------------------------------------------\n  @advance = ( text ) ->\n    stack = []\n    top   = -> if ( s = stack.length ) is 0 then null else stack[ s - 1 ]\n    while ( groups = @split_on_next_aform text )?\n      { left\n        aform\n        right } = groups\n      if ( t = top() ) isnt aform\n        stack.push aform\n        move = 'open'\n      else\n        stack.pop()\n        move = 'close'\n      yield { left, aform, right, move, stack, }\n      text = right\n    return null\n\n  return @\n\nACHRA = provide_achra.apply {}\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"xxx\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"A *short* **demonstration** of `MKTScript`.\",2,null]\n    [\"A *short **demonstration*** of `MKTScript`.\",2,null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      for groups from ACHRA.advance probe\n        debug 'µ33342', ACHRA._colorize_groups groups\n      resolve 2\n  #.........................................................................................................\n  done()\n  return null\n\n  # debug @_escape_for_regex '*'\n  # debug @_escape_for_regex '/'\n  # debug @_escape_for_regex '^'\n  # debug @_escape_for_regex '\\\\'\n  # debug 'foo-bar'.match new RegExp '[x\\\\-a]'\n  # @add_active_chr '-'; help @achr_pattern\n  # @add_active_chr '^'; help @achr_pattern\n\n\n############################################################################################################\nunless module.parent?\n  test @, { timeout: 5000, }\n  # test @[ \"wye with duplex pair\"            ]\n\n\n"
  ]
}