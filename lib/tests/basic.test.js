// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, DM, FS, H, OS, PATH, PD, alert, assign, badge, cwd_abspath, cwd_relpath, debug, declare, defer, echo, first_of, help, here_abspath, info, inspect, isa, jr, last_of, log, project_abspath, rpr, select, size_of, stamp, test, type_of, types, urge, validate, warn, whisper, xrpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'DATAMILL/TESTS/BASIC';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  test = require('guy-test');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $async} = PD);

  //...........................................................................................................
  ({jr, assign} = CND);

  defer = setImmediate;

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('../types');

  ({isa, validate, declare, first_of, last_of, size_of, type_of} = types);

  //...........................................................................................................
  DM = require('../..');

  H = require('../helpers');

  ({cwd_abspath, cwd_relpath, here_abspath, project_abspath} = H);

  //-----------------------------------------------------------------------------------------------------------
  this["xxx"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [["A short text", "<p>A short text</p>", null], ["# A Headline", "<h1>A Headline</h1>", null], ["\nA short text\n\n\n", "\n<p>A short text</p>\n\n\n", null]];
//.........................................................................................................
// ["# A Headline\n\nA paragraph","<h1>A Headline</h1>\n\n<p>A paragraph</p>",null]
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(async function(resolve) {
          var datamill, pipeline, settings;
          settings = {
            text: probe
          };
          datamill = (await DM.create(settings));
          await DM.parse_document(datamill);
          await DM.render_html(datamill);
          pipeline = [];
          pipeline.push(H.new_db_source(datamill, 'html'));
          pipeline.push($(function(d, send) {
            return send(d.text);
          }));
          pipeline.push(PD.$collect());
          pipeline.push($watch(function(texts) {
            return resolve(texts.join('\n'));
          }));
          pipeline.push(PD.$show());
          pipeline.push(PD.$drain());
          return PD.pull(...pipeline);
        });
      });
    }
    // await H.show_overview   datamill
    // await H.show_html       datamill
    //     resolve null
    //.........................................................................................................
    defer(function() {
      return done();
    });
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    // test @, { timeout: 5000, }
    test(this["xxx"]);
  }

  // test @[ "wye with duplex pair"            ]

}).call(this);

//# sourceMappingURL=basic.test.js.map
