{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/basic.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/TESTS/BASIC'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\n{ to_width\n  width_of }              = require 'to-width'\n#...........................................................................................................\n{ jr\n  assign }                = CND\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nSP                        = require 'steampipes'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = SP.export()\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = types\n#...........................................................................................................\nDM                        = require '../..'\nH                         = require '../helpers'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  project_abspath }       = H\n\n\n#-----------------------------------------------------------------------------------------------------------\nas_padded_lines = ( text ) -> ( ( to_width line, 100 ) for line in text.split '\\n' )\n\n#-----------------------------------------------------------------------------------------------------------\nas_numbered_lines = ( text ) ->\n  R = []\n  for line, idx in as_padded_lines text\n    nr = idx + 1\n    R.push ( to_width \"#{nr}\", 3 ) + CND.reverse line\n  return R.join '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"xxx2\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ \"A short text\", \"<p>A short text</p>\", null, ]\n    # [\"# A Headline\",\"<h1>A Headline</h1>\",null]\n    # [\"\\nA short text\\n\\n\\n\",\"\\n<p>A short text</p>\\n\\n\\n\",null]\n    # [\"First.\\nSecond.\",\"<p>First.\\nSecond.</p>\",null]\n    # [\"First.\\n\\nSecond.\",\"<p>First.</p>\\n\\n<p>Second.</p>\",null]\n    # [\"# A Headline\\n\\nA paragraph\",\"<h1>A Headline</h1>\\n\\n<p>A paragraph</p>\",null]\n    # [\"# A Headline\\n\\n```\\nCode\\n```\",\"<h1>A Headline</h1>\\n\\n<pre><code>\\nCode\\n</code></pre>\",null]\n    # [\"# A Headline\\n\\n> Quote\",\"<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote</p>\\n</blockquote>\",null]\n    # [\"# A Headline\\n\\n> Quote\\n\",\"<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote</p>\\n</blockquote>\\n\",null]\n    # [\"\\n# A Headline\\n\\n> Quote\\n\",\"\\n<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote</p>\\n</blockquote>\\n\",null]\n    # [\"> quote 1\\n> quote 2\\n> quote 3\",\"<blockquote>\\n<p>quote 1\\nquote 2\\nquote 3</p>\\n</blockquote>\",null]\n    # [\"> quote 1\\n> quote 2\\n> quote 3\\n\",\"<blockquote>\\n<p>quote 1\\nquote 2\\nquote 3</p>\\n</blockquote>\\n\",null]\n    # [\"```\\nCODE\\n```\",\"<pre><code>\\nCODE\\n</code></pre>\",null]\n    # [\"```\\nCODE\\n```\\n\",\"<pre><code>\\nCODE\\n</code></pre>\\n\",null]\n    # [\"> ```\\n> CODE\\n> ```\\n\",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n</blockquote>\\n\",null]\n    # [\"> ```\\n> CODE\\n> ```\\n>\",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n\\n</blockquote>\",null]\n    # [\"> ```\\n> CODE\\n> ```\\n> \",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n\\n</blockquote>\",null]\n    # [\"> ```\\n> CODE\\n> ```\\n> next line\\n> yet another line\",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n<p>next line\\nyet another line</p>\\n</blockquote>\",null]\n    # [\"> ```\\n> CODE\\n> ```\",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n</blockquote>\",null]\n    # [\"\\n# A Headline\\n\\n> Quote\\n> ```\\n> CODE\\n> ```\",\"\\n<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote\\n<pre><code>\\nCODE\\n</code></pre>\\n</blockquote>\",null]\n    ]\n  #.........................................................................................................\n  quiet = false\n  quiet = true\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      datamill  = await DM.create { text: probe, }\n      # datamill  = await DM.create { text: probe, db_path: ':memory:', }\n      await DM.parse_document datamill, { quiet, }\n      await DM.render_html    datamill, { quiet, }\n      result    = await DM.retrieve_html  datamill, { quiet: true, }\n      if not quiet\n        urge 'µ77782', '\\n' + as_numbered_lines probe\n        info 'µ77782', '\\n' + as_numbered_lines result\n        # await H.show_overview   datamill\n        # await H.show_html       datamill\n      resolve result\n      return null\n  #.........................................................................................................\n  defer -> done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_reveal_bug_from_pipestreaming_api_change = ->\n  probes_and_matchers = [\n    [ \"A short text\", \"<p>A short text</p>\", null, ]\n    ]\n  #.........................................................................................................\n  quiet = true\n  quiet = false\n  for [ probe, matcher, error, ] in probes_and_matchers\n    datamill  = await DM.create { text: probe, }\n    # datamill  = await DM.create { text: probe, db_path: ':memory:', }\n    debug '^984232-1^', await DM.parse_document datamill, { quiet, }\n    debug '^984232-1^', await DM.render_html    datamill, { quiet, }\n    result    = await DM.retrieve_html  datamill, { quiet: true, }\n    if not quiet\n      urge 'µ77782', '\\n' + as_numbered_lines probe\n      info 'µ77782', '\\n' + as_numbered_lines result\n      # await H.show_overview   datamill\n      # await H.show_html       datamill\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @, { timeout: 5000, }\n  # test @[ \"xxx2\" ], { timeout: 1e4, }\n  # test @[ \"xxx2\" ], { timeout: 1e4, }\n  @_reveal_bug_from_pipestreaming_api_change()\n  # test @[ \"wye with duplex pair\"            ]\n\n\n"
  ]
}