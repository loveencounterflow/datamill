{
  "version": 3,
  "file": "basic.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/basic.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/TESTS/BASIC'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $async }                = PD\n#...........................................................................................................\n{ jr\n  assign }                = CND\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = types\n#...........................................................................................................\nDM                        = require '../..'\nH                         = require '../helpers'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  project_abspath }       = H\n\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"xxx\" ] = ( T, done ) ->\n  probes_and_matchers = []\n    # [\"A *short* **demonstration** of `MKTScript`.\",2,null]\n    # [\"A *short **demonstration*** of `MKTScript`.\",2,null]\n    # ]\n  #.........................................................................................................\n  await do => new Promise ( resolve ) =>\n    text      = \"\"\"\n      a short text\n      \"\"\"\n    settings  = { text, }\n    datamill  = await DM.create settings\n    await DM.parse_document datamill\n    pipeline  = []\n    pipeline.push H.new_db_source datamill, 'html'\n    pipeline.push PD.$show()\n    pipeline.push PD.$drain -> resolve()\n    PD.pull pipeline...\n\n  # await H.show_overview   datamill\n  # await H.show_html       datamill\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n  #     resolve null\n  #.........................................................................................................\n  defer -> done()\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @, { timeout: 5000, }\n  test @[ \"xxx\" ]\n  # test @[ \"wye with duplex pair\"            ]\n\n\n"
  ]
}