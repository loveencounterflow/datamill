{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/basic.test.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,WAAA,EAAA,WAAA,EAAA,KAAA,EAAA,OAAA,EAAA,KAAA,EAAA,2BAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA,EAAA,WAAA,EAAA,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,OAAA,EAAA,UAAA,EAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,eAAA,EAAA,YAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,UAAR,EAnB5B;;;EAqBA,CAAA,CAAE,QAAF,EACE,QADF,CAAA,GAC4B,OAAA,CAAQ,UAAR,CAD5B,EArBA;;;EAwBA,CAAA,CAAE,EAAF,EACE,MADF,CAAA,GAC4B,GAD5B;;EAEA,KAAA,GAA4B;;EAC5B,CAAA,CAAE,OAAF,CAAA,GAA4B,OAAA,CAAQ,MAAR,CAA5B;;EACA,IAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,OAAA,CAAQ,CAAR,EAAW;MAAE,MAAA,EAAQ,IAAV;MAAe,WAAA,EAAa,KAA5B;MAAsC,cAAA,EAAgB,KAAtD;MAAgE,KAAA,EAAO;IAAvE,CAAX;EAAT,EA5B5B;;;EA8BA,GAAA,GAA4B,OAAA,CAAQ,qBAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,CAAA,GAE4B,GAAG,CAAC,MAAJ,CAAA,CAF5B,EA/BA;;;EAmCA,KAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,KAA5B;;EACA,CAAA,CAAE,MAAF,EACE,IADF,EAEE,WAFF,EAGE,SAHF,EAIE,UAJF,EAKE,MALF,EAME,KANF,CAAA,GAM4B,KAAK,CAAC,MAAN,CAAA,CAN5B,EArCA;;;EA6CA,KAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,QAHF,EAIE,IAJF,EAKE,OALF,EAME,OANF,EAOE,OAPF,CAAA,GAO4B,KAP5B,EA9CA;;;EAuDA,EAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,CAAE,WAAF,EACE,WADF,EAEE,YAFF,EAGE,eAHF,CAAA,GAG4B,CAH5B,EAzDA;;;EAgEA,eAAA,GAAkB,QAAA,CAAE,IAAF,CAAA;AAAW,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;AAAG;AAAA;IAAA,KAAA,qCAAA;;mBAAE,QAAA,CAAS,IAAT,EAAe,GAAf;IAAF,CAAA;;EAAd,EAhElB;;;EAmEA,iBAAA,GAAoB,QAAA,CAAE,IAAF,CAAA;AACpB,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA;IAAE,CAAA,GAAI;AACJ;IAAA,KAAA,iDAAA;;MACE,EAAA,GAAK,GAAA,GAAM;MACX,CAAC,CAAC,IAAF,CAAO,CAAE,QAAA,CAAS,CAAA,CAAA,CAAG,EAAH,CAAA,CAAT,EAAkB,CAAlB,CAAF,CAAA,GAA0B,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAjC;IAFF;AAGA,WAAO,CAAC,CAAC,IAAF,CAAO,IAAP;EALW,EAnEpB;;;EA2EA,2BAAA,GAA8B,QAAA,CAAE,QAAF,CAAA,EAAA;;IAE5B,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAtB,CAA0B,qBAA1B;AACA,WAAO;EAHqB,EA3E9B;;;EAiFA,YAAA,GAAe,QAAA,CAAE,EAAF,CAAA;AACf,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,UAAA,EAAA;IAAE,WAAA,GAAc,CACZ,MADY,EAEZ,MAFY,EAGZ,QAHY,EAIZ,SAJY;IAKd,KAAA,6CAAA;kCAAA;;MAEE,GAAA,GAAM,CAAA,cAAA,CAAA,CAAiB,UAAjB,EAAA;AACN;MAAA,KAAA,UAAA;QACE,IAAA,CAAK,UAAL,EAAiB,GAAjB;MADF;IAHF;AAKA,WAAO;EAXM,EAjFf;;;EA+FA,IAAC,CAAE,sCAAF,CAAD,GAA8C,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC9C,QAAA,IAAsD,mDAAtD,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA;IAAE,EAAA,GAAQ,CAAA,MAAM,EAAE,CAAC,MAAH,CAAU;MAAE,IAAA,EAAM;IAAR,CAAV,CAAN;IACR,IAAA,GAAQ,CAAE,GAAF;IACR,EAAA,GAAQ,SAAA,CAAU,OAAV,EAAmB;MAAE,IAAF;MAAQ,IAAA,EAAM;IAAd,CAAnB;IACR,GAAA,GAAQ,CAAC,CAAC,cAAF,CAAiB,EAAjB,EAAqB,EAArB;IACR,CAAC,CAAC,EAAF,CAAK,EAAL,EAAU;MAAE,MAAA,EAAQ,CAAE,GAAF,CAAV;MAAmB,IAAA,EAAM,KAAzB;MAAgC,MAAA,EAAQ;IAAxC,CAAV;IACA,CAAC,CAAC,EAAF,CAAK,GAAL,EAAU;MAAE,GAAA,EAAK,OAAP;MAAgB,KAAA,EAAO,OAAvB;MAAgC,GAAA,EAAK,CAAE,GAAF,CAArC;MAA8C,IAAA,EAAM,MAApD;MAA4D,IAAA,EAAM,KAAlE;MAAyE,CAAA,EAAG,MAA5E;MAAoF,OAAA,EAAS,KAA7F;MAAoG,GAAA,EAAK;IAAzG,CAAV;IACA,EAAA,GAAQ,KAAA,CAAM,EAAN;IACR,CAAC,CAAC,EAAF,CAAK,EAAA,KAAQ,EAAb;IACA,GAAA,GAAQ,CAAC,CAAC,cAAF,CAAiB,EAAjB,EAAqB,EAArB;IACR,CAAC,CAAC,EAAF,CAAK,EAAL,EAAU;MAAE,MAAA,EAAQ,CAAE,GAAF,CAAV;MAAmB,IAAA,EAAM,KAAzB;MAAgC,MAAA,EAAQ,OAAxC;MAAiD,UAAA,EAAY;IAA7D,CAAV;IACA,CAAC,CAAC,EAAF,CAAK,GAAL,EAAU;MAAE,GAAA,EAAK,OAAP;MAAgB,KAAA,EAAO,OAAvB;MAAgC,GAAA,EAAK,CAAE,GAAF,CAArC;MAA8C,IAAA,EAAM,MAApD;MAA4D,IAAA,EAAM,KAAlE;MAAyE,CAAA,EAAG,MAA5E;MAAoF,OAAA,EAAS,IAA7F;MAAmG,GAAA,EAAK;IAAxG,CAAV;IACA,GAAA,GAAQ,EAAE,CAAC,MAAM,CAAC,IAXpB;;;IAcE,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAP,EAAyB;MAAE,OAAA,EAAS,CAAX;MAAc,eAAA,EAAiB;IAA/B,CAAzB,EAdF;;IAgBE,QAAA,GAAW,MAAM,CAAC,IAAP,CAAY,sBAAZ,EAAoC,KAApC;IACX,CAAC,CAAC,EAAF,CAAO,CAAC,CAAC,YAAF,CAAiB,EAAjB,EAAqB,IAArB,CAAP,EAAoC;MAAE,GAAA,EAAK,OAAP;MAAgB,OAAA,EAAS,CAAzB;MAA4B,IAAA,EAAM,MAAlC;MAA0C,GAAA,EAAK,CAA/C;MAAkD,KAAA,EAAO,OAAzD;MAAkE,GAAA,EAAK,IAAvE;MAA6E,GAAA,EAAK,OAAlF;MAA2F,IAAA,EAAM,KAAjG;MAAwG,CAAA,EAAG,MAA3G;MAAmH;IAAnH,CAApC;IACA,CAAC,CAAC,EAAF,CAAO,CAAC,CAAC,cAAF,CAAiB,EAAjB,EAAqB,IAArB,CAAP,EAAoC;MAAE,MAAA,EAAQ,CAAE,GAAF,CAAV;MAAmB,MAAA,EAAQ,OAA3B;MAAoC,IAAA,EAAM,MAA1C;MAAkD,GAAA,EAAK,IAAvD;MAA6D,KAAA,EAAO,OAApE;MAA6E,IAAA,EAAM,KAAnF;MAA0F,UAAA,EAAY;IAAtG,CAApC,EAlBF;;;IAqBE,CAAC,CAAC,EAAF,CAAO,IAAA,CAAK,SAAL,EAAiB,OAAjB,EAA6B,KAA7B,CAAP,EAA6C,CAA7C;IACA,CAAC,CAAC,EAAF,CAAO,IAAA,CAAK,SAAL,EAAiB,OAAjB,EAA6B,IAA7B,CAAP,EAA6C,CAA7C;IACA,CAAC,CAAC,EAAF,CAAO,IAAA,CAAK,OAAL,EAAiB,SAAjB,EAA6B,CAA7B,CAAP,EAA6C,KAA7C;IACA,CAAC,CAAC,EAAF,CAAO,IAAA,CAAK,OAAL,EAAiB,SAAjB,EAA6B,CAA7B,CAAP,EAA6C,IAA7C,EAxBF;;WA0BE,IAAA,CAAA;EA3B4C,EA/F9C;;;EA8HA,IAAC,CAAE,MAAF,CAAD,GAAc,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACd,QAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,mBAAA,EAAA;IAAE,mBAAA,GAAsB,CACpB,CAAE,cAAF,EAAkB,qBAAlB,EAAyC,IAAzC,CADoB,EAAxB;;;;;;;;;;;;;;;;;;;;;IAuBE,KAAA,GAAQ;IACR,KAAA,GAAQ;IACR,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;eAAG,IAAI,OAAJ,CAAY,MAAA,QAAA,CAAE,OAAF,CAAA;AAC1D,cAAA,QAAA,EAAA;UAAM,QAAA,GAAY,CAAA,MAAM,EAAE,CAAC,MAAH,CAAU;YAAE,IAAA,EAAM;UAAR,CAAV,CAAN,EAAlB;;UAEM,MAAM,EAAE,CAAC,cAAH,CAAkB,QAAlB,EAA4B,CAAE,KAAF,CAA5B;UACN,MAAM,EAAE,CAAC,WAAH,CAAkB,QAAlB,EAA4B,CAAE,KAAF,CAA5B;UACN,MAAA,GAAY,CAAA,MAAM,EAAE,CAAC,aAAH,CAAkB,QAAlB,EAA4B;YAAE,KAAA,EAAO;UAAT,CAA5B,CAAN;UACZ,IAAG,CAAI,KAAP;YACE,IAAA,CAAK,QAAL,EAAe,IAAA,GAAO,iBAAA,CAAkB,KAAlB,CAAtB;YACA,IAAA,CAAK,QAAL,EAAe,IAAA,GAAO,iBAAA,CAAkB,MAAlB,CAAtB,EAFF;WALN;;;UAUM,OAAA,CAAQ,MAAR;AACA,iBAAO;QAZ6C,CAAZ;MAAH,CAAjC;IADR,CAzBF;;IAwCE,KAAA,CAAM,QAAA,CAAA,CAAA;aAAG,IAAA,CAAA;IAAH,CAAN;AACA,WAAO;EA1CK,EA9Hd;;;EA2KA,IAAC,CAAE,0BAAF,CAAD,GAAkC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAClC,QAAA,OAAA;;IACE,OAAA,GAAU,QAAA,CAAA,CAAA,EAAA;;MAER,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,CAAF,CAAA;AAClB,YAAA;QAAM,QAAA,GAAW;QACX,QAAQ,CAAC,IAAT,CAAc,GAAG,CAAC,KAAJ,CAAA,CAAd,EADN;;;AAIM,eAAO,GAAG,CAAC,IAAJ,CAAS,GAAA,QAAT;MALK,EADlB;;AAQI,aAAO;IATC;IAWV,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;AACX,UAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA;MAAI,CAAA,CAAE,SAAF,CAAA,GAAgB,OAAO,CAAC,KAAR,CAAc,CAAA,CAAd,CAAhB;MACA,KAAA,GAAgB;MAChB,IAAA,GAAgB,eAFpB;MAGI,EAAA,GAAgB,CAAA,MAAM,EAAE,CAAC,MAAH,CAAU,CAAE,IAAF,CAAV,CAAN;MAChB,CAAA,CAAE,GAAF,CAAA,GAAgB,EAAE,CAAC,MAAnB;MACA,2BAAA,CAA4B,EAA5B,EALJ;;aAOI,CAAA,MAAM,EAAE,CAAC,cAAH,CAAkB,EAAlB,EAAsB,CAAE,KAAF,EAAS,SAAT,CAAtB,CAAN;IARO,CAAA,IAZX;;WAsBE,IAAA,CAAA;EAvBgC,EA3KlC;;;EAqMA,IAAC,CAAE,qBAAF,CAAD,GAA6B,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC7B,QAAA,MAAA,EAAA,EAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA;IAAE,WAAA,GAAc;MACZ,kBADY;MAEZ,kBAFY;MAGZ,cAHY;MAIZ,oBAJY;;;MAOZ,kBAPY;MAAhB;;;;;;;IAeE,mBAAA,GAAsB,CACpB,CAAE,cAAF,EAAkB,qBAAlB,EAAyC,IAAzC,CADoB,EAfxB;;;;;;IAuBE,MAAA,GAAU;IACV,KAAA,GAAU;IACV,KAAA,GAAU;IACV,KAAA,qDAAA;MAAI,CAAE,IAAF,EAAQ,OAAR,EAAiB,KAAjB;MACF,EAAA,GAAM,CAAA,MAAM,EAAE,CAAC,MAAH,CAAU,CAAE,IAAF,CAAV,CAAN;MACN,2BAAA,CAA4B,EAA5B,EADJ;;;MAII,MAAM,EAAE,CAAC,cAAH,CAAkB,EAAlB,EAAsB,CAAE,KAAF,EAAS,WAAT,CAAtB;MACN,GAAA,GAAM,CAAA;;;;;;;;QAAA,EALV;;MAgBI,MAAA,GAAS;AACT;MAAA,KAAA,UAAA;QACE,MAAA;QACA,OAAO,GAAG,CAAC;QACX,IAAA,CAAK,GAAL;MAHF,CAjBJ;;MAsBI,IAAG,MAAA,GAAS,CAAZ;QACE,CAAC,CAAC,IAAF,CAAO,CAAA,MAAA,CAAA,CAAS,MAAT,CAAA,eAAA,CAAP,EADF;OAAA,MAAA;QAGE,CAAC,CAAC,EAAF,CAAK,IAAL,EAHF;OAtBJ;;;;MA6BI,IAAG,CAAI,KAAP;QACE,IAAA,CAAK,QAAL,EAAe,IAAA,GAAO,iBAAA,CAAkB,IAAlB,CAAtB;QACA,IAAkD,cAAlD;UAAA,IAAA,CAAK,QAAL,EAAe,IAAA,GAAO,iBAAA,CAAkB,MAAlB,CAAtB,EAAA;SAFF;;IA9BF,CA1BF;;;;IA8DE,IAAA,CAAA;AACA,WAAO;EAhEoB,EArM7B;;;EA0QA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;;aAGhC,IAAA,CAAK,IAAC,CAAE,qBAAF,CAAN;IAHgC,CAAA,IAAlC;;;EA1QA;;;;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/TESTS/BASIC'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\n{ to_width\n  width_of }              = require 'to-width'\n#...........................................................................................................\n{ jr\n  assign }                = CND\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nSPX                       = require '../steampipes-extra'\n{ $\n  $watch\n  $async }                = SPX.export()\n#...........................................................................................................\nDATOM                     = require 'datom'\n{ VNR }                   = DATOM\n{ freeze\n  thaw\n  fresh_datom\n  new_datom\n  is_stamped\n  select\n  stamp }                 = DATOM.export()\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  declare\n  first_of\n  cast\n  last_of\n  size_of\n  type_of }               = types\n#...........................................................................................................\nDM                        = require '../..'\nH                         = require '../helpers'\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  project_abspath }       = H\n\n\n#-----------------------------------------------------------------------------------------------------------\nas_padded_lines = ( text ) -> ( ( to_width line, 100 ) for line in text.split '\\n' )\n\n#-----------------------------------------------------------------------------------------------------------\nas_numbered_lines = ( text ) ->\n  R = []\n  for line, idx in as_padded_lines text\n    nr = idx + 1\n    R.push ( to_width \"#{nr}\", 3 ) + CND.reverse line\n  return R.join '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\ndont_enforce_vnr_uniqueness = ( datamill ) ->\n  ### Drop index so erroneous VNR duplicates won't trigger an error in the DB: ###\n  datamill.mirage.dbw.$.run \"drop index main_pk;\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nquery_tables = ( dm ) ->\n  table_names = [\n    'main'\n    'keys'\n    'realms'\n    'sources' ]\n  for table_name in table_names\n    # sql = \"select count(*) from #{table_name};\"\n    sql = \"select * from #{table_name};\"\n    for row from dm.mirage.dbr.$.query sql\n      info table_name, row\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"stamped datoms must be stamped (duh)\" ] = ( T, done ) ->\n  dm    = await DM.create { text: 'some text here', } ### TAINT bug in mirage prevents using empty text ###\n  $vnr  = [ 123, ]\n  d1    = new_datom '^line', { $vnr, text: \"XXX\" }\n  row   = H.row_from_datom dm, d1\n  T.eq d1,  { '$vnr': [ 123 ], text: 'XXX', '$key': '^line' }\n  T.eq row, { key: '^line', realm: 'input', vnr: [ 123 ], dest: 'main', text: 'XXX', p: 'null', stamped: false, ref: null }\n  d2    = stamp d1\n  T.ok d1 isnt d2\n  row   = H.row_from_datom dm, d2\n  T.eq d2,  { '$vnr': [ 123 ], text: 'XXX', '$key': '^line', '$stamped': true }\n  T.eq row, { key: '^line', realm: 'input', vnr: [ 123 ], dest: 'main', text: 'XXX', p: 'null', stamped: true, ref: null }\n  dbw   = dm.mirage.dbw\n  # urge '^98^', dbw.$.pragma 'foreign_keys = off';\n  # query_tables dm\n  T.eq ( dbw.insert row ), { changes: 1, lastInsertRowid: 2 }\n  # query_tables dm\n  vnr_blob = Buffer.from '4d405ec000000000004c', 'hex'\n  T.eq ( H.row_from_vnr   dm, $vnr ), { vnr: '[123]', stamped: 1, dest: 'main', sid: 1, realm: 'input', ref: null, key: '^line', text: 'XXX', p: 'null', vnr_blob, }\n  T.eq ( H.datom_from_vnr dm, $vnr ), { '$vnr': [ 123 ], '$key': '^line', dest: 'main', ref: null, realm: 'input', text: 'XXX', '$stamped': true }\n  #.........................................................................................................\n  ### Make sure casting between booleans and floats works as expected: ###\n  T.eq ( cast 'boolean',  'float',    false ), 0\n  T.eq ( cast 'boolean',  'float',    true  ), 1\n  T.eq ( cast 'float',    'boolean',  0     ), false\n  T.eq ( cast 'float',    'boolean',  1     ), true\n  #.........................................................................................................\n  done()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"xxx2\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ \"A short text\", \"<p>A short text</p>\", null, ]\n    # [\"# A Headline\",\"<h1>A Headline</h1>\",null]\n    # [\"\\nA short text\\n\\n\\n\",\"\\n<p>A short text</p>\\n\\n\\n\",null]\n    # [\"First.\\nSecond.\",\"<p>First.\\nSecond.</p>\",null]\n    # [\"First.\\n\\nSecond.\",\"<p>First.</p>\\n\\n<p>Second.</p>\",null]\n    # [\"# A Headline\\n\\nA paragraph\",\"<h1>A Headline</h1>\\n\\n<p>A paragraph</p>\",null]\n    # [\"# A Headline\\n\\n```\\nCode\\n```\",\"<h1>A Headline</h1>\\n\\n<pre><code>\\nCode\\n</code></pre>\",null]\n    # [\"# A Headline\\n\\n> Quote\",\"<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote</p>\\n</blockquote>\",null]\n    # [\"# A Headline\\n\\n> Quote\\n\",\"<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote</p>\\n</blockquote>\\n\",null]\n    # [\"\\n# A Headline\\n\\n> Quote\\n\",\"\\n<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote</p>\\n</blockquote>\\n\",null]\n    # [\"> quote 1\\n> quote 2\\n> quote 3\",\"<blockquote>\\n<p>quote 1\\nquote 2\\nquote 3</p>\\n</blockquote>\",null]\n    # [\"> quote 1\\n> quote 2\\n> quote 3\\n\",\"<blockquote>\\n<p>quote 1\\nquote 2\\nquote 3</p>\\n</blockquote>\\n\",null]\n    # [\"```\\nCODE\\n```\",\"<pre><code>\\nCODE\\n</code></pre>\",null]\n    # [\"```\\nCODE\\n```\\n\",\"<pre><code>\\nCODE\\n</code></pre>\\n\",null]\n    # [\"> ```\\n> CODE\\n> ```\\n\",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n</blockquote>\\n\",null]\n    # [\"> ```\\n> CODE\\n> ```\\n>\",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n\\n</blockquote>\",null]\n    # [\"> ```\\n> CODE\\n> ```\\n> \",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n\\n</blockquote>\",null]\n    # [\"> ```\\n> CODE\\n> ```\\n> next line\\n> yet another line\",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n<p>next line\\nyet another line</p>\\n</blockquote>\",null]\n    # [\"> ```\\n> CODE\\n> ```\",\"<blockquote>\\n<pre><code>\\nCODE\\n</code></pre>\\n</blockquote>\",null]\n    # [\"\\n# A Headline\\n\\n> Quote\\n> ```\\n> CODE\\n> ```\",\"\\n<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote\\n<pre><code>\\nCODE\\n</code></pre>\\n</blockquote>\",null]\n    ]\n  #.........................................................................................................\n  quiet = false\n  quiet = true\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      datamill  = await DM.create { text: probe, }\n      # datamill  = await DM.create { text: probe, db_path: ':memory:', }\n      await DM.parse_document datamill, { quiet, }\n      await DM.render_html    datamill, { quiet, }\n      result    = await DM.retrieve_html  datamill, { quiet: true, }\n      if not quiet\n        urge 'µ77782', '\\n' + as_numbered_lines probe\n        info 'µ77782', '\\n' + as_numbered_lines result\n        # await H.show_overview   datamill\n        # await H.show_html       datamill\n      resolve result\n      return null\n  #.........................................................................................................\n  defer -> done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_may bring own transform\" ] = ( T, done ) ->\n  #.........................................................................................................\n  provide = ->\n    #.......................................................................................................\n    @$transform = ( S ) ->\n      pipeline = []\n      pipeline.push SPX.$show()\n      # pipeline.push @$group_blank_lines       S\n      # pipeline.push @$ensure_blanks_at_ends   S\n      return SPX.pull pipeline...\n    #.......................................................................................................\n    return @\n  #.........................................................................................................\n  await do =>\n    { transform } = provide.apply {}\n    quiet         = false\n    text          = \"A short text\" # \"<p>A short text</p>\"\n    dm            = await DM.create { text, }\n    { dbw }       = dm.mirage\n    dont_enforce_vnr_uniqueness dm\n    #.......................................................................................................\n    await DM.parse_document dm, { quiet, transform, }\n    #.......................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"VNRs must be unique\" ] = ( T, done ) ->\n  phase_names = [\n    './000-initialize'\n    './005-start-stop'\n    './006-ignore'\n    './010-1-whitespace'\n    # './010-2-whitespace-dst'\n    # './020-blocks'\n    './030-paragraphs'\n    # './035-hunks'\n    # './040-markdown-inline'\n    # # './030-escapes'\n    # # './035-special-forms'\n    # './xxx-validation'\n    # './900-render-html'\n    ]\n  probes_and_matchers = [\n    [ \"A short text\", \"<p>A short text</p>\", null, ]\n    # [\"```\\nCODE\\n```\",\"<pre><code>\\nCODE\\n</code></pre>\",null]\n    # [\"\\n# A Headline\\n\\n> Quote\\n> ```\\n> CODE\\n> ```\",\"\\n<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote\\n<pre><code>\\nCODE\\n</code></pre>\\n</blockquote>\",null]\n    # [\"First.\\n\\nSecond.\",\"<p>First.</p>\\n\\n<p>Second.</p>\",null]\n    # [\"# A Headline\\n\\n> Quote\\n\",\"<h1>A Headline</h1>\\n\\n<blockquote>\\n<p>Quote</p>\\n</blockquote>\\n\",null]\n    ]\n  #.........................................................................................................\n  result  = null\n  quiet   = true\n  quiet   = false\n  for [ text, matcher, error, ] in probes_and_matchers\n    dm  = await DM.create { text, }\n    dont_enforce_vnr_uniqueness dm\n    # dm  = await DM.create { text, db_path: ':memory:', }\n    #.......................................................................................................\n    await DM.parse_document dm, { quiet, phase_names, }\n    sql = \"\"\"\n      with v1 as ( select\n          *,\n          count(*) over ( partition by vnr ) as dcount\n        from main )\n      select * from v1\n        where dcount > 1\n        order by\n          vnr_blob,\n          ref;\"\"\"\n    #.......................................................................................................\n    dcount = 0\n    for row from dm.mirage.dbr.$.query sql\n      dcount++\n      delete row.vnr_blob\n      warn row\n    #.......................................................................................................\n    if dcount > 0\n      T.fail \"found #{dcount} duplicate rows\"\n    else\n      T.ok true\n    #.......................................................................................................\n    # debug '^984232-1^', await DM.render_html    dm, { quiet, }\n    # result    = await DM.retrieve_html  dm, { quiet: true, }\n    if not quiet\n      urge 'µ77782', '\\n' + as_numbered_lines text\n      info 'µ77782', '\\n' + as_numbered_lines result if result?\n      # await H.show_overview   dm\n      # await H.show_html       dm\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 5000, }\n  # test @[ \"stamped datoms must be stamped (duh)\" ]\n  test @[ \"VNRs must be unique\" ]\n  # test @[ \"may bring own transform\" ]\n  # await @[ \"may bring own transform\" ] null, ->\n  # test @[ \"xxx2\" ], { timeout: 1e4, }\n  # test @[ \"xxx2\" ], { timeout: 1e4, }\n  # test @[ \"wye with duplex pair\"            ]\n\n\n"
  ]
}