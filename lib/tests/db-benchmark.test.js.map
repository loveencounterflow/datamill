{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/db-benchmark.test.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B;;EACA,KAAA,GAA4B,QAAA,CAAE,MAAF,EAAU,CAAV,CAAA;WAAiB,UAAA,CAAW,CAAX,EAAc,MAAA,GAAS,IAAvB;EAAjB,EAhB5B;;;EAkBA,EAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,EAEE,KAFF,EAGE,MAHF,EAIE,KAJF,EAKE,MALF,CAAA,GAK4B,EAAE,CAAC,MAAH,CAAA,CAL5B;;EAMA,CAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,QAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,QAHF,EAIE,OAJF,EAKE,OALF,EAME,OANF,CAAA,GAM4B,QAAQ,CAAC,KANrC;;EAOA,GAAA,GAA4B,OAAA,CAAQ,QAAR;;EAC5B,MAAA,GAA4B;;EAC5B,KAAA,GAA4B,MAAA,CAAO,OAAP;;EAC5B,IAAA,GAA4B,MAAA,CAAO,MAAP;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAtC5B;;;EA0CA,OAAA,CAAQ,gCAAR,EAA0C,QAAA,CAAE,CAAF,CAAA;WACxC;MAAA,KAAA,EACE;QAAA,eAAA,EAAsC,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAe,CAAf;QAAT,CAAtC;QACA,+BAAA,EAAsC,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAe,CAAC,CAAC,cAAjB;QAAT,CADtC;QAEA,gBAAA,EAAsC,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,GAAG,CAAC,KAAL,CAAe,CAAC,CAAC,CAAjB;QAAT,CAFtC;QAGA,kBAAA,EAAsC,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,GAAG,CAAC,IAAL,CAAe,CAAC,CAAC,IAAjB;QAAT;MAHtC;IADF;EADwC,CAA1C,EA1CA;;;EAkDA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,CAAF,EAAK,QAAL,EAAe,SAAf,CAAA;IAChB,IAAG,QAAQ,CAAC,cAAZ;AACE,aAAO,CAAC,CAAC,oBAAF,CAAuB,CAAvB,EAA0B;QAAE,KAAA,EAAO;MAAT,CAA1B,EAA+C,SAA/C,EADT;;AAEA,WAAO;EAHS,EAlDlB;;;EAwDA,IAAC,CAAA,GAAD,GAAO,QAAA,CAAE,CAAF,EAAK,QAAL,EAAe,CAAf,CAAA;WAAsB,IAAC,CAAA,cAAD,CAAgB,CAAhB,EAAmB,QAAnB,EAA6B,CAAA,CAAE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC5D,UAAA;MACE,KAAqB,MAAA,CAAO,CAAP,EAAU,YAAV,CAArB;;AAAA,eAAO,IAAA,CAAK,CAAL,EAAP;;MACA,CAAC,CAAC,KAAF;MACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;MACA,IAAA,GAAO,CAAC,CAAC,IAAI,CAAC,WAAP,CAAA;MACP,IAAA,CAAK,EAAE,CAAC,GAAH,CAAS,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAT,EAAyB;QAAE,IAAF;QAAQ,GAAA,EAAK,SAAb;QAAwB;MAAxB,CAAzB,CAAL;AACA,aAAO;IAPmD,CAAF,CAA7B;EAAtB,EAxDP;;;EAkEA,IAAC,CAAA,GAAD,GAAO,QAAA,CAAE,CAAF,EAAK,QAAL,EAAe,CAAf,CAAA;WAAsB,IAAC,CAAA,cAAD,CAAgB,CAAhB,EAAmB,QAAnB,EAA6B,CAAA,CAAE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC5D,UAAA;MACE,KAAqB,MAAA,CAAO,CAAP,EAAU,YAAV,CAArB;;AAAA,eAAO,IAAA,CAAK,CAAL,EAAP;;MACA,CAAC,CAAC,KAAF;MACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;MACA,IAAA,GAAO,GAAA,GAAM,CAAC,CAAC,IAAR,GAAe;MACtB,IAAA,CAAK,EAAE,CAAC,GAAH,CAAS,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAT,EAAyB;QAAE,IAAF;QAAQ,GAAA,EAAK,SAAb;QAAwB;MAAxB,CAAzB,CAAL;AACA,aAAO;IAPmD,CAAF,CAA7B;EAAtB,EAlEP;;;EA4EA,IAAC,CAAA,SAAD,GAAa,QAAA,CAAE,QAAF,CAAA;WAAgB,IAAI,OAAJ,CAAY,KAAA,CAAE,OAAF,CAAA,GAAA;AACzC,UAAA,CAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,SAAA,EAAA,EAAA,EAAA;MAAE,QAAQ,CAAC,8BAAT,CAAwC,QAAxC;MACA,CAAA,GAAY,EADd;;MAGE,EAAA,GAAY;MACZ,CAAA,GAAY;QAAE,KAAA,EAAO;MAAT;MACZ,QAAA,GAAY,CAAA,MAAM,IAAC,CAAA,sBAAD,CAAwB;QAAE,IAAA,EAAM,QAAQ,CAAC;MAAjB,CAAxB,CAAN;MAEZ,MAAS,CAAA,CAAA,CAAA,GAAA,EAAA;eAAG,IAAI,OAAJ,CAAY,CAAE,OAAF,CAAA,GAAA;AAC1B,cAAA;UAAI,QAAA,GAAY;UACZ,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,aAAF,CAAgB,QAAhB,EAA0B,OAA1B,CAAd;UACA,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,QAAf,EAAyB,CAAzB,CAAd;UACA,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,QAAf,EAAyB,CAAzB,CAAd,EAHJ;;UAKI,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,CAAE,KAAF,CAAP,EAAmB,QAAA,CAAE,CAAF,CAAA;YAAS,IAAmB,CAAA,KAAK,KAAxB;qBAAA,EAAA,GAAK,IAAI,CAAC,GAAL,CAAA,EAAL;;UAAT,CAAnB,CAAd;UACA,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,QAAF,CAAW,QAAX,CAAd;UACA,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,QAAA,CAAA,CAAA;mBAAG,OAAA,CAAA;UAAH,CAAP,CAAd;UACA,IAAA,CAAK,QAAL,EAAe,UAAf;iBACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;QAVsB,CAAZ;MAAH,CAAA,IAPX;;MAmBE,EAAA,GAAY,IAAI,CAAC,GAAL,CAAA;MACZ,EAAA,GAAY,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,EAAA,GAAK,EAAjB;MACZ,GAAA,GAAY,EAAA,GAAK;MACjB,GAAA,GAAY,CAAE,CAAC,CAAC,KAAF,GAAU,EAAZ,CAAA,GAAmB;MAC/B,KAAA,GAAY,GAAA,GAAM;MAClB,OAAA,GAAY,GAAG,CAAC,OAAJ,CAAc,CAAd;MACZ,OAAA,GAAY,GAAG,CAAC,OAAJ,CAAc,CAAd;MACZ,SAAA,GAAY,KAAK,CAAC,OAAN,CAAc,CAAd;MACZ,IAAA,CAAA;MACA,IAAA,CAAK,QAAL,EAAe,CAAA,UAAA,CAAA,CAAa,GAAG,CAAC,KAAJ,CAAU,QAAQ,CAAC,cAAnB,CAAb,CAAA,CAAf;MACA,IAAA,CAAK,QAAL,EAAe,CAAA,GAAA,CAAA,CAAM,QAAQ,CAAC,CAAf,CAAA,CAAf;MACA,IAAA,CAAK,QAAL,EAAe,CAAA,OAAA,CAAA,CAAU,OAAV,CAAA,OAAA,CAAA,CAA2B,CAAC,CAAC,KAA7B,CAAA,WAAA,CAAf;MACA,IAAA,CAAK,QAAL,EAAe,CAAA,CAAA,CAAG,OAAH,CAAA,sBAAA,CAAf;MACA,IAAA,CAAK,QAAL,EAAe,CAAA,MAAA,CAAA,CAAS,SAAT,CAAA,mBAAA,CAAf;aACA,OAAA,CAAQ,QAAR;IAlCuC,CAAZ;EAAhB,EA5Eb;;;EAiHA,IAAC,CAAA,sBAAD,GAA0B,QAAA,CAAE,QAAF,CAAA;WAAgB,IAAI,OAAJ,CAAY,KAAA,CAAE,OAAF,CAAA,GAAA;AACtD,UAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,EAAA,EAAA;MAAE,EAAA,GAAY,IAAI,CAAC,GAAL,CAAA;MACZ,EAAE,CAAC,UAAH,CAAc,CAAC,CAAC,eAAF,CAAkB,gBAAlB,CAAd;MACA,QAAA,GAAY,CAAA,MAAM,QAAQ,CAAC,MAAT,CAAgB,QAAhB,CAAN;MACZ,KAAA,GAAY;MACZ,KAAA,GAAY;MACZ,MAAM,QAAQ,CAAC,cAAT,CAA8B,QAA9B,EAAwC,CAAE,KAAF,CAAxC;MACN,EAAA,GAAY,IAAI,CAAC,GAAL,CAAA;MACZ,EAAA,GAAY,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,EAAA,GAAK,EAAjB;MACZ,GAAA,GAAY,EAAA,GAAK;MACjB,OAAA,GAAY,GAAG,CAAC,OAAJ,CAAc,CAAd;MACZ,OAAA,CAAQ,CAAA,cAAA,CAAA,CAAiB,OAAjB,CAAA,gBAAA,CAAR,EAVF;;;;;;aAgBE,OAAA,CAAQ,QAAR;IAjBoD,CAAZ;EAAhB,EAjH1B;;;EAqIA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,IAAI,EAAN,EAAU,OAAO,IAAjB,CAAA;AACpB,QAAA,EAAA,EAAA,IAAA,EAAA;IAAE,QAAQ,CAAC,KAAT,CAAe,CAAf;;MACA,OAAQ;;IACR,EAAA,GAAQ,OAAA,CAAQ,eAAR;IACR,KAAA,GAAQ,CAAE,CAAE,EAAE,CAAC,QAAH,CAAY,CAAA,QAAA,CAAA,CAAW,CAAX,EAAA,CAAA,CAAgB,IAAhB,CAAA,CAAZ,CAAF,CAAsC,CAAC,QAAvC,CAAgD,OAAhD,CAAF,CAA2D,CAAC,KAA5D,CAAkE,IAAlE;IACR,KAAA;;AAAU;MAAA,KAAA,uCAAA;;qBAAA,IAAI,CAAC,OAAL,CAAa,MAAb,EAAqB,EAArB;MAAA,CAAA;;;IACV,KAAA;;AAAU;MAAA,KAAA,uCAAA;;YAA4B,IAAA,KAAU;uBAAtC;;MAAA,CAAA;;;AACV,WAAO;EAPW,EArIpB;;;EA+IA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,IAAI,EAAN,EAAU,OAAO,IAAjB,CAAA;AACnB,QAAA,IAAA,EAAA;IAAE,KAAA,GAAQ,IAAC,CAAA,gBAAD,CAAkB,CAAlB,EAAqB,yBAArB;IACR,KAAA;;AAAU;MAAA,KAAA,uCAAA;;qBAAK,IAAI,CAAC,MAAL,CAAA,CAAA,GAAgB,GAAnB,GAA4B,EAA5B,GAAoC;MAAtC,CAAA;;;AACV,WAAO,KAAK,CAAC,IAAN,CAAW,IAAX;EAHU,EA/InB;;;EAuJA,IAAO,qBAAP;IAMK,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;;;;;AACL,UAAA,QAAA,EAAA,CAAA,EAAA,IAAA;;MACM,CAAA,GAAW;MACX,IAAA,GAAW,IAAC,CAAA,eAAD,CAAiB,CAAjB,EAAoB,yBAApB;MACX,QAAA,GAAW,CAAA,MAAM,IAAC,CAAA,SAAD,CAAW;QAAE,CAAF;QAAK,IAAL;QAAW,cAAA,EAAgB;MAA3B,CAAX,CAAN;aACX,QAAA,GAAW,CAAA,MAAM,IAAC,CAAA,SAAD,CAAW;QAAE,CAAF;QAAK,IAAL;QAAW,cAAA,EAAgB;MAA3B,CAAX,CAAN;IALZ,CAAA,IANL;;;EAvJA;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/TESTS/DB-BENCHMARK'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\n#...........................................................................................................\nPD                        = require 'steampipes'\n{ $\n  $watch\n  $show\n  $drain\n  stamp\n  select }                = PD.export()\nH                         = require '../helpers'\nDATAMILL                  = require '../..'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = DATAMILL.types\nVNR                       = require '../vnr'\n$fresh                    = true\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nFS                        = require 'fs'\n\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'datamill_db_benchmark_settings', ( x ) ->\n  tests:\n    \"x is a object\":                      ( x ) -> @isa.object    x\n    \"x.resume_from_db is a boolean\":      ( x ) -> @isa.boolean   x.resume_from_db\n    \"x.n is a count\":                     ( x ) -> @isa.count     x.n\n    \"x.text is a text\":                   ( x ) -> @isa.text      x.text\n\n#-----------------------------------------------------------------------------------------------------------\n@wrap_transform = ( S, settings, transform ) ->\n  if settings.resume_from_db\n    return H.resume_from_db_after S, { realm: 'input', }, transform\n  return transform\n\n#-----------------------------------------------------------------------------------------------------------\n@$t1 = ( S, settings, X ) -> @wrap_transform S, settings, $ ( d, send ) ->\n  # help 'Âµ12111-1', jr d\n  return send d unless select d, '^mktscript'\n  X.count++\n  send stamp d\n  text = d.text.toUpperCase()\n  send PD.set ( VNR.deepen d ), { text, ref: 'bnch/t1', $fresh, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$t2 = ( S, settings, X ) -> @wrap_transform S, settings, $ ( d, send ) ->\n  # urge 'Âµ12111-2', jr d\n  return send d unless select d, '^mktscript'\n  X.count++\n  send stamp d\n  text = '*' + d.text + '*'\n  send PD.set ( VNR.deepen d ), { text, ref: 'bnch/t1', $fresh, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@benchmark = ( settings ) -> new Promise ( resolve ) =>\n  validate.datamill_db_benchmark_settings settings\n  n         = 5\n  #.........................................................................................................\n  t0        = null\n  X         = { count: 0, }\n  datamill  = await @create_and_populate_db { text: settings.text, }\n  #.........................................................................................................\n  await do => new Promise ( resolve ) =>\n    pipeline  = []\n    pipeline.push H.new_db_source datamill, 'input'\n    pipeline.push @$t1 datamill, settings, X\n    pipeline.push @$t2 datamill, settings, X\n    # pipeline.push $show()\n    pipeline.push $watch { first, }, ( d ) -> t0 = Date.now() if d is first\n    pipeline.push H.$feed_db datamill\n    pipeline.push $drain -> resolve()\n    help 'Âµ66743', \"starting\"\n    PD.pull pipeline...\n  #.........................................................................................................\n  t1        = Date.now()\n  dt        = Math.max 1, t1 - t0\n  dts       = dt / 1000\n  ops       = ( X.count / dt ) * 1000\n  score     = ops / 10000\n  dts_txt   = dts.toFixed   1\n  ops_txt   = ops.toFixed   1\n  score_txt = score.toFixed 3\n  help()\n  help 'Âµ34422', \"resuming: #{CND.truth settings.resume_from_db}\"\n  help 'Âµ34422', \"n: #{settings.n}\"\n  help 'Âµ34422', \"needed #{dts_txt} s for #{X.count} operations\"\n  help 'Âµ34422', \"#{ops_txt} operations per second\"\n  help 'Âµ34422', \"score #{score_txt} (bigger is better)\"\n  resolve datamill\n\n#-----------------------------------------------------------------------------------------------------------\n@create_and_populate_db = ( settings ) -> new Promise ( resolve ) =>\n  t0        = Date.now()\n  FS.unlinkSync H.project_abspath 'db/datamill.db'\n  datamill  = await DATAMILL.create settings\n  quiet     = false\n  quiet     = true\n  await DATAMILL.parse_document       datamill, { quiet, }\n  t1        = Date.now()\n  dt        = Math.max 1, t1 - t0\n  dts       = dt / 1000\n  dts_txt   = dts.toFixed   1\n  whisper \"Âµ33442 needed #{dts_txt} s to prepare DB\"\n  # await DATAMILL.render_html          datamill, { quiet, }\n  # await @_demo_list_html_rows         datamill\n  #.......................................................................................................\n  # await H.show_overview               datamill\n  # await H.show_html                   datamill\n  resolve datamill\n\n#-----------------------------------------------------------------------------------------------------------\n@get_random_words = ( n = 10, path = null ) ->\n  validate.count n\n  path ?= '/usr/share/dict/words'\n  CP    = require 'child_process'\n  words = ( ( CP.execSync \"shuf -n #{n} #{path}\" ).toString 'utf-8' ).split '\\n'\n  words = ( word.replace /'s$/g, '' for word in words )\n  words = ( word for word in words when word isnt '' )\n  return words\n\n#-----------------------------------------------------------------------------------------------------------\n@get_random_text = ( n = 10, path = null ) ->\n  words = @get_random_words n, '/usr/share/dict/italian'\n  words = ( ( if Math.random() > 0.7 then '' else word ) for word in words )\n  return words.join '\\n'\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @[ \"benchmark\" ], { timeout: 20, }\n      # file_path:      project_abspath 'src/tests/demo-short-headlines.md'\n      # file_path:      project_abspath 'src/tests/demo.md'\n      # file_path:      project_abspath 'src/tests/demo-medium.md'\n      # file_path:      project_abspath 'src/tests/demo-simple-paragraphs.md'\n  do =>\n    # after 10, =>\n      n        = 2000\n      text     = @get_random_text n, '/usr/share/dict/italian'\n      datamill = await @benchmark { n, text, resume_from_db: true, }\n      datamill = await @benchmark { n, text, resume_from_db: false, }\n\n      # after 1000, =>\n    # await H.show_overview datamill\n\n"
  ]
}