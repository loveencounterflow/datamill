// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, PD, VNR, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT to be written; observe this will simplify `$blank_lines()`. */
  this.$trim = function(S) {
    return $((d, send) => {
      var new_text;
      if (!select(d, '^line')) {
        return send(d);
      }
      if ((new_text = d.text.trimEnd()) !== d.text) {
        d = PD.set(d, 'text', new_text);
      }
      send(d);
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$blank_lines = function(S) {
    var flush, is_first_line, linecount, prv_dest, prv_vnr, send, within_blank;
    prv_vnr = null;
    prv_dest = null;
    linecount = 0;
    send = null;
    within_blank = false;
    is_first_line = true;
    //.........................................................................................................
    H.register_key(S, '^blank', {
      is_block: false
    });
    //.........................................................................................................
    flush = (advance = false) => {
      var $vnr;
      if (prv_vnr == null) {
        return null;
      }
      within_blank = false;
      $vnr = VNR.advance(prv_vnr);
      // if advance  then  $vnr = VNR.deepen VNR.advance  prv_vnr
      // else              $vnr = VNR.deepen              prv_vnr
      send(H.fresh_datom('^blank', {
        linecount,
        $vnr,
        dest: prv_dest
      }));
      return linecount = 0;
    };
    //.........................................................................................................
    return $({last}, (d, send_) => {
      var is_line;
      send = send_;
      //.......................................................................................................
      if (d === last) {
        flush(true);
        return null;
      }
      //.......................................................................................................
      is_line = select(d, '^line');
      //.......................................................................................................
      /* Insert blank if first line isn't blank: */
      if (is_line && is_first_line) {
        is_first_line = false;
        if (d.text !== '') {
          send(H.fresh_datom('^blank', {
            linecount: 0,
            $vnr: [0],
            dest: d.dest
          }));
        }
      }
      //.......................................................................................................
      /* line contains material */
      if (is_line && (d.text !== '')) {
        if (within_blank) {
          flush(false);
        }
        prv_dest = d.dest;
        prv_vnr = d.$vnr;
        return send(d);
      }
      //.......................................................................................................
      /* line is empty / blank */
      if (is_line) {
        send(d = stamp(VNR.deepen(d)));
        if (!within_blank) {
          linecount = 0;
        }
        linecount += +1;
        within_blank = true;
      }
      //.......................................................................................................
      /* TAINT use API to ensure all pertinent values are captured */
      prv_dest = d.dest;
      prv_vnr = d.$vnr;
      send(d);
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$blanks_at_dest_changes = function(S) {
    return $({last}, (d, send) => {
      var $vnr, db, ref, ref1, row;
      if (d !== last) {
        return send(d);
      }
      db = S.mirage.dbw;
      ref = db.read_changed_dest_last_lines();
      for (row of ref) {
        d = H.datom_from_row(S, row);
        if (select(d, '^blank')) {
          break;
        }
        send(stamp(d));
        d = VNR.deepen(d);
        send(d);
        $vnr = VNR.advance(d.$vnr);
        d = H.fresh_datom('^blank', {
          linecount: 0,
          $vnr,
          dest: d.dest
        });
        send(d);
        debug('µ44552-1', jr(d));
      }
      ref1 = db.read_changed_dest_first_lines();
      for (row of ref1) {
        d = H.datom_from_row(S, row);
        if (select(d, '^blank')) {
          break;
        }
        send(stamp(d));
        d = VNR.deepen(d);
        send(d);
        $vnr = VNR.recede(d.$vnr);
        d = H.fresh_datom('^blank', {
          linecount: 0,
          $vnr,
          dest: d.dest
        });
        send(d);
        debug('µ44552-2', jr(d));
      }
      return null;
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$trim(S));
    pipeline.push(this.$blank_lines(S));
    pipeline.push(this.$blanks_at_dest_changes(S));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=010-consolidate-whitespace.js.map
