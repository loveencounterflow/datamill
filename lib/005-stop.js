// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, PD, VNR, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //-----------------------------------------------------------------------------------------------------------
  this.$stop = function(S) {
    var has_stopped, pattern;
    pattern = /^<stop\/?>$/;
    has_stopped = false;
    return $((d, send) => {
      /* TAINT use API call */
      var $vnr, message;
      if (has_stopped) {
        // debug 'µ09012', d
        // debug 'µ09012', stamp d
        return send(stamp(d));
      }
      if (!select(d, '^line')) {
        return send(d);
      }
      if ((d.text.match(pattern)) == null) {
        return send(d);
      }
      send(stamp(d));
      has_stopped = true;
      $vnr = VNR.new_level(d.$vnr, 0);
      message = "µ09011 encountered `<stop>` tag; discarding rest of document";
      $vnr = VNR.advance($vnr);
      send(H.fresh_datom('~notice', {message, $vnr}));
      return null;
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$stop(S));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=005-stop.js.map
