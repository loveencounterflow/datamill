{
  "version": 3,
  "file": "vnr.js",
  "sourceRoot": "..",
  "sources": [
    "src/vnr.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\nPD                        = require 'pipedreams'\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\n@deepen = ( d_or_vnr, nr = 0 ) =>\n  ### Given a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has an index of `0` appended, thus representing the pre-first `vnr` for a level of lines\n  derived from the one that the original `vnr` pointed to. ###\n  unless isa.list d_or_vnr then return PD.set d_or_vnr, '$vnr', @deepen d_or_vnr.$vnr\n  validate.vnr d_or_vnr\n  R       = assign [], d_or_vnr\n  R.push nr\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@advance      = ( d_or_vnr ) => @_advance_or_recede d_or_vnr, +1\n@recede       = ( d_or_vnr ) => @_advance_or_recede d_or_vnr, -1\n\n#-----------------------------------------------------------------------------------------------------------\n@_lower_bound = ( vnr ) =>\n  ### Return a new VNR `z` such that `( as_hollerith vnr ) > ( as_hollerith z )` holds; this is needed to\n  iterate over all rows within a given limit. ###\n  validate.vnr vnr\n  return [ vnr[ 0 ] - 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_upper_bound = ( vnr ) =>\n  ### Return a new VNR `z` such that `( as_hollerith vnr ) < ( as_hollerith z )` holds; this is needed to\n  iterate over all rows within a given limit. ###\n  validate.vnr vnr\n  return [ vnr[ 0 ] + 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_advance_or_recede = ( d_or_vnr, delta ) =>\n  ### Given a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the\n  next line in the same level that is derived from the same line as its predecessor. ###\n  unless isa.list d_or_vnr then return PD.set d_or_vnr, '$vnr', @_advance_or_recede d_or_vnr.$vnr\n  validate.vnr d_or_vnr\n  idx       = d_or_vnr.length - 1\n  R         = assign [], d_or_vnr\n  R[ idx ] += delta\n  return R\n\n\n"
  ]
}