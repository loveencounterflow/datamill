{
  "version": 3,
  "file": "helpers.js",
  "sourceRoot": "..",
  "sources": [
    "src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nPATH                      = require 'path'\nVNR                       = require './vnr'\n{ to_width\n  width_of }              = require 'to-width'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\nXXX_COLORIZER             = require './experiments/colorizer'\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cwd_abspath              = CND.cwd_abspath\n@cwd_relpath              = CND.cwd_relpath\n@here_abspath             = CND.here_abspath\n@_drop_extension          = ( path ) => path[ ... path.length - ( PATH.extname path ).length ]\n@project_abspath          = ( P... ) => CND.here_abspath __dirname, '..', P...\n\n#-----------------------------------------------------------------------------------------------------------\n@badge_from_filename = ( filename ) ->\n  basename  = PATH.basename filename\n  return 'DATAMILL/' + ( basename .replace /^(.*?)\\.[^.]+$/, '$1' ).toUpperCase()\n\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@format_object = ( d ) =>\n  R = {}\n  R[ k ] = d[ k ] for k in ( k for k of d ).sort()\n  return jr R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datom = ( P ... ) =>\n  R = PD.new_datom P...\n  # R = PD.set R, 'vnr_txt',  ( jr R.$vnr ) if R.$vnr?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@fresh_datom = ( P ... ) =>\n  R = PD.new_datom P...\n  # R = PD.set R, 'vnr_txt',  ( jr R.$vnr ) if R.$vnr?\n  R = PD.set R, '$fresh',    true\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@swap_key = ( d, key, $vnr = null ) ->\n  ### Given a datom `d`, compute the first `$vnr` for the next level (or use the optional `$vnr` argument)\n  and set the `key` on a copy. Make sure `$fresh` is set and `$dirty` is unset.\n  ###\n  $vnr ?= VNR.new_level d.$vnr, 1\n  R     = d\n  R     = PD.set    R, 'key',    key\n  R     = PD.set    R, '$vnr',   $vnr\n  R     = PD.set    R, '$fresh', true\n  R     = PD.unset  R, '$dirty'\n  return R\n\n\n#===========================================================================================================\n# DB QUERIES\n#-----------------------------------------------------------------------------------------------------------\n@previous_line_is_blank = ( S, vnr ) =>\n  return true unless ( d = @get_previous_datom S, vnr )?\n  return ( d.text? and d.text.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@next_line_is_blank = ( S, vnr ) =>\n  return true unless ( d = @get_next_datom S, vnr )?\n  return ( d.text? and d.text.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@get_previous_datom = ( S, vnr ) =>\n  ### TAINT consider to use types ###\n  unless vnr.length is 1\n    throw new Error \"µ33442 `get_next_datom()` not supported for nested vnrs, got #{rpr vnr}\"\n  ### TAINT need inverse to advance ###\n  return null unless vnr[ 0 ] > 1\n  vnr_txt = jr [ vnr[ 0 ] - 1 ]\n  return @datom_from_vnr S, vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@get_next_datom = ( S, vnr ) =>\n  ### TAINT consider to use types ###\n  unless vnr.length is 1\n    throw new Error \"µ33442 `get_next_datom()` not supported for nested vnrs, got #{rpr vnr}\"\n  return @datom_from_vnr S, VNR.advance vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@row_from_vnr = ( S, vnr ) =>\n  dbr     = S.mirage.dbr\n  vnr_txt = jr vnr\n  return dbr.$.first_row dbr.datom_from_vnr { vnr_txt, }\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_vnr = ( S, vnr ) =>\n  return null unless ( row = @row_from_vnr S, vnr )?\n  return @datom_from_row S, row\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_row = ( S, row ) =>\n  ### TAINT how to convert vnr in ICQL? ###\n  # debug 'µ22373', rpr row\n  # debug 'µ22373', rpr row.vnr_txt\n  # debug 'µ22373', rpr row.p\n  vnr_txt     = row.vnr_txt\n  $vnr        = JSON.parse vnr_txt\n  p           = if row.p? then ( JSON.parse row.p ) else {}\n  R           = PD.thaw PD.new_datom row.key, { $vnr, }\n  R.region    = row.region\n  R.text      = row.text  if row.text?\n  R.$stamped  = true      if ( row.stamped ? false )\n  R[ k ]      = p[ k ] for k of p when p[ k ]?\n  return PD.freeze R\n\n#-----------------------------------------------------------------------------------------------------------\n@p_from_datom = ( S, d ) =>\n  R     = {}\n  count = 0\n  for k, v of d\n    continue if k is 'key'\n    continue if k is 'text'\n    continue if k is 'region'\n    continue if k.startsWith '$'\n    continue unless v?\n    count  += 1\n    R[ k ]  = v\n  R = null if count is 0\n  return JSON.stringify R\n\n#-----------------------------------------------------------------------------------------------------------\n@row_from_datom = ( S, d ) =>\n  ### TAINT how to convert booleans in ICQL? ###\n  key       = d.key\n  stamped   = if ( PD.is_stamped d ) then 1 else 0\n  vnr_txt   = JSON.stringify d.$vnr\n  region    = d.region  ? null\n  text      = d.text    ? null\n  p         = @p_from_datom S, d\n  R         = { key, vnr_txt, region, text, p, stamped, }\n  # MIRAGE.types.validate.mirage_main_row R if do_validate\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@feed_source = ( S, source, limit = Infinity ) =>\n  dbr = S.mirage.db\n  nr  = 0\n  #.........................................................................................................\n  for row from dbr.read_unstamped_lines()\n    nr += +1\n    break if nr > limit\n    source.send @datom_from_row S, row\n  #.........................................................................................................\n  source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$feed_db = ( S ) =>\n  dbw = S.mirage.dbw\n  return $watch ( d ) =>\n    ### TAINT how to convert vnr in ICQL? ###\n    row = @row_from_datom S, d\n    try\n      ### TAINT consider to use upsert instead https://www.sqlite.org/lang_UPSERT.html ###\n      ### NOTE Make sure to test first for `$fresh`/inserts, then for `$dirty`/updates, since a `$fresh`\n      datom may have undergone changes (which doesn't make the correct opertion an update). ###\n      if      d.$fresh then dbw.insert row\n      else if d.$dirty then dbw.update row\n    catch error\n      warn 'µ12133', \"when trying to insert or update row\"\n      warn 'µ12133', jr row\n      warn 'µ12133', \"an error occurred:\"\n      warn 'µ12133', \"#{error.message}\"\n      if error.message.startsWith 'UNIQUE constraint failed'\n        urge 'µ88768', \"conflict occurred because\"\n        urge 'µ88768', jr @row_from_vnr S, d.$vnr\n        urge 'µ88768', \"is already in DB\"\n      throw error\n    return null\n\n\n#===========================================================================================================\n# PHASES\n#-----------------------------------------------------------------------------------------------------------\n@repeat_phase = ( S, phase ) =>\n  validate.datamill_phase_repeat phase.repeat_phase\n  return false unless phase.repeat_phase?\n  return phase.repeat_phase if isa.boolean phase.repeat_phase\n  return phase.repeat_phase S\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( S ) => $watch ( d ) =>\n  if d.$stamped then color = CND.grey\n  else\n    switch d.key\n      when '^word' then color = CND.gold\n      else color = CND.white\n  info color jr d\n\n#-----------------------------------------------------------------------------------------------------------\n@get_tty_width = ( S ) =>\n  return R if ( R = process.stdout.columns )?\n  { execSync, } = require 'child_process'\n  return parseInt ( execSync \"tput cols\", { encoding: 'utf-8', } ), 10\n\n#-----------------------------------------------------------------------------------------------------------\n@show_overview = ( S, raw = false ) =>\n  ### TAINT consider to convert row to datom before display ###\n  line_width  = @get_tty_width S\n  dbr         = S.mirage.db\n  level       = 0\n  omit_count  = 0\n  #.........................................................................................................\n  for row from dbr.read_lines() # { limit: 30, }\n    if raw\n      info @format_object row\n      continue\n    if ( row.key is '^line' ) and ( row.stamped ) and ( row.text is '' )\n      omit_count += +1\n      continue\n    switch row.key\n      when '^line'            then  _color  = CND.YELLOW\n      when '^block'           then  _color  = CND.gold\n      when '^mktscript'       then  _color  = CND.RED\n      when '~warning'         then  _color  = CND.RED\n      when '~notice'          then  _color  = CND.cyan\n      when '^literal'         then  _color  = CND.GREEN\n      when '^literal-blank'   then  _color  = CND.GREEN\n      when '^p'               then  _color  = CND.BLUE\n      when '<h'               then  _color  = CND.VIOLET\n      when '>h'               then  _color  = CND.VIOLET\n      else                          _color  = @color_from_text row.key[ 1 .. ]\n    #.......................................................................................................\n    if false and ( row.key is '^blank' )\n      key     = to_width '',          12\n      vnr     = to_width '',          12\n      region  = to_width '',          8\n      text    = ''\n      p       = ''\n    #.......................................................................................................\n    else\n      key     = to_width row.key,     12\n      vnr     = to_width row.vnr_txt, 12\n      region  = to_width row.region,  8\n      text    = if row.text?  then ( jr row.text      ) else ''\n      p       = if row.p?     then row.p                else ''\n      p       = '' if ( not p? ) or ( p is 'null' )\n    #.......................................................................................................\n    value   = text + ' ' + p\n    # value   = value[ .. 80 ]\n    stamp   = if row.stamped then 'S' else ' '\n    line    = \"#{vnr} │ #{region} │ #{stamp} │ #{key} │ #{value}\"\n    line    = to_width line, line_width\n    dent    = '  '.repeat level\n    level   = switch row.key[ 0 ]\n      when '<' then level + 1\n      when '>' then level - 1\n      else          level\n    level   = Math.max level, 0\n    color   = if ( row.stamped or row.key is '^blank' ) then CND.grey else ( P... ) -> CND.reverse _color P...\n    # color = if row.stamped then _color else ( P... ) -> CND.reverse _color P...\n    echo color line\n    # echo dent + color line\n  #.........................................................................................................\n  echo \"#{omit_count} rows omitted from this view\"\n  for row from dbr.get_stats()\n    echo \"#{row.key}: #{row.count}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_color_cache = {}\n@color_from_text = ( text ) ->\n  return R if ( R = _color_cache[ text ] )?\n  R = ( P... ) -> ( XXX_COLORIZER.ansi_code_from_text text ) + CND._pen P...\n  # R = ( P... ) -> CND.reverse ( XXX_COLORIZER.ansi_code_from_text text ) + CND._pen P...\n  _color_cache[ text ] = R\n  return R\n\n"
  ]
}