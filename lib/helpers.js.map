{
  "version": 3,
  "file": "helpers.js",
  "sourceRoot": "..",
  "sources": [
    "src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nPATH                      = require 'path'\nVNR                       = require './vnr'\n{ to_width\n  width_of }              = require 'to-width'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n@cwd_abspath              = CND.cwd_abspath\n@cwd_relpath              = CND.cwd_relpath\n@here_abspath             = CND.here_abspath\n@_drop_extension          = ( path ) => path[ ... path.length - ( PATH.extname path ).length ]\n@project_abspath          = ( P... ) => CND.here_abspath __dirname, '..', P...\n\n#-----------------------------------------------------------------------------------------------------------\n@format_object = ( d ) =>\n  R = {}\n  R[ k ] = d[ k ] for k in ( k for k of d ).sort()\n  return jr R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datom = ( P ... ) =>\n  R = PD.new_datom P...\n  # R = PD.set R, 'vnr_txt',  ( jr R.$vnr ) if R.$vnr?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@fresh_datom = ( P ... ) =>\n  R = PD.new_datom P...\n  # R = PD.set R, 'vnr_txt',  ( jr R.$vnr ) if R.$vnr?\n  R = PD.set R, '$fresh',    true\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( S ) => $watch ( d ) =>\n  if d.$stamped then color = CND.grey\n  else\n    switch d.key\n      when '^word' then color = CND.gold\n      else color = CND.white\n  info color jr d\n\n#-----------------------------------------------------------------------------------------------------------\n@show_overview = ( S ) =>\n  dbr   = S.mirage.db\n  level = 0\n  #.........................................................................................................\n  for row from dbr.read_lines() # { limit: 30, }\n    # debug 'µ10001', rpr row\n    if ( row.key is '^mktscript' ) and ( row.value is '' )\n      continue\n    if ( row.key is '^blank' )\n      echo CND.white '-'.repeat 100\n      continue\n    switch row.key\n      when '^mktscript' then  _color  = CND.YELLOW\n      when '^blank'     then  _color  = CND.grey\n      when '~warning'   then  _color  = CND.RED\n      when '^literal'   then  _color  = CND.GREEN\n      when '<h'         then  _color  = CND.VIOLET\n      when '>h'         then  _color  = CND.VIOLET\n      else                    _color  = CND.white\n    key   = row.key.padEnd      12\n    vnr   = row.vnr_txt.padEnd  12\n    value = if ( isa.text row.value ) then row.value else rpr row.value\n    value = value[ .. 80 ]\n    stamp = if row.stamped then 'S' else ' '\n    line  = \"#{vnr} #{stamp} #{key} #{rpr value}\"\n    line  = to_width line, 100\n    dent  = '  '.repeat level\n    level = switch row.key[ 0 ]\n      when '<' then level + 1\n      when '>' then level - 1\n      else          level\n    color = if row.stamped then CND.grey else ( P... ) -> CND.reverse _color P...\n    # color = if row.stamped then _color else ( P... ) -> CND.reverse _color P...\n    echo dent + color line\n  #.........................................................................................................\n  for row from dbr.get_stats()\n    echo \"#{row.key}: #{row.count}\"\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# DB QUERIES\n#-----------------------------------------------------------------------------------------------------------\n@previous_line_is_blank = ( S, vnr ) =>\n  return true unless ( d = @get_previous_datom S, vnr )?\n  return ( d.value.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@next_line_is_blank = ( S, vnr ) =>\n  return true unless ( d = @get_next_datom S, vnr )?\n  return ( d.value.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@get_previous_datom = ( S, vnr ) =>\n  ### TAINT consider to use types ###\n  unless vnr.length is 1\n    throw new Error \"µ33442 `get_next_datom()` not supported for nested vnrs, got #{rpr vnr}\"\n  ### TAINT need inverse to advance ###\n  return null unless vnr[ 0 ] > 1\n  vnr_txt = jr [ vnr[ 0 ] - 1 ]\n  return @datom_from_vnr S, S, vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@get_next_datom = ( S, vnr ) =>\n  ### TAINT consider to use types ###\n  unless vnr.length is 1\n    throw new Error \"µ33442 `get_next_datom()` not supported for nested vnrs, got #{rpr vnr}\"\n  return @datom_from_vnr S, VNR.advance vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_vnr = ( S, vnr ) =>\n  dbr     = S.mirage.dbr\n  vnr_txt = jr vnr\n  return null unless ( row = dbr.$.first_row dbr.datom_from_vnr { vnr_txt, } )?\n  return @datom_from_row S, row\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_row = ( S, row ) =>\n  ### TAINT how to convert vnr in ICQL? ###\n  vnr_txt     = row.vnr_txt\n  $vnr        = JSON.parse vnr_txt\n  R           = PD.new_datom row.key, { value: row.value, $vnr, }\n  R           = PD.set R, '$stamped', true if row.stamped\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@row_from_datom = ( S, d ) =>\n  ### TAINT how to convert booleans in ICQL? ###\n  stamped   = if ( PD.is_stamped d ) then 1 else 0\n  vnr_txt   = jr d.$vnr\n  value     = if ( isa.text d.value ) then d.value else jr d.value\n  R         = { key: d.key, vnr_txt, value, stamped, }\n  # MIRAGE.types.validate.mirage_main_row R if do_validate\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@feed_source = ( S, source, limit = Infinity ) =>\n  dbr = S.mirage.db\n  nr  = 0\n  #.........................................................................................................\n  for row from dbr.read_unstamped_lines()\n    nr += +1\n    break if nr > limit\n    source.send @datom_from_row S, row\n  #.........................................................................................................\n  source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$feed_db = ( S ) =>\n  dbw = S.mirage.dbw\n  return $watch ( d ) =>\n    ### TAINT how to convert vnr in ICQL? ###\n    row = @row_from_datom S, d\n    try\n      ### TAINT consider to use upsert instead https://www.sqlite.org/lang_UPSERT.html ###\n      if      d.$fresh then dbw.insert row\n      else if d.$dirty then dbw.update row\n    catch error\n      warn \"µ12133 when trying to insert or update row #{jr row}\"\n      warn \"µ12133 an error occurred:\"\n      warn \"µ12133 #{error.message}\"\n      throw error\n    return null\n"
  ]
}