{
  "version": 3,
  "file": "helpers.js",
  "sourceRoot": "..",
  "sources": [
    "src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATAMILL/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nPATH                      = require 'path'\nVNR                       = require './vnr'\n{ to_width\n  width_of }              = require 'to-width'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  declare\n  size_of\n  type_of }               = types\nXXX_COLORIZER             = require './experiments/colorizer'\nDM                        = require '..'\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cwd_abspath              = CND.cwd_abspath\n@cwd_relpath              = CND.cwd_relpath\n@here_abspath             = CND.here_abspath\n@_drop_extension          = ( path ) => path[ ... path.length - ( PATH.extname path ).length ]\n@project_abspath          = ( P... ) => CND.here_abspath __dirname, '..', P...\n\n#-----------------------------------------------------------------------------------------------------------\n@badge_from_filename = ( filename ) ->\n  basename  = PATH.basename filename\n  return 'DATAMILL/' + ( basename .replace /^(.*?)\\.[^.]+$/, '$1' ).toUpperCase()\n\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@format_object = ( d ) =>\n  R = {}\n  R[ k ] = d[ k ] for k in ( k for k of d ).sort()\n  return jr R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datom = ( P ... ) =>\n  R = PD.new_datom P...\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@fresh_datom = ( P ... ) =>\n  R = PD.new_datom P...\n  R = PD.set R, '$fresh',    true\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@swap_key = ( d, key, $vnr = null ) ->\n  ### Given a datom `d`, compute the first `$vnr` for the next level (or use the optional `$vnr` argument)\n  and set the `key` on a copy. Make sure `$fresh` is set and `$dirty` is unset.\n  ###\n  $vnr ?= VNR.new_level d.$vnr, 1\n  R     = d\n  R     = PD.set    R, 'key',    key\n  R     = PD.set    R, '$vnr',   $vnr\n  R     = PD.set    R, '$fresh', true\n  R     = PD.unset  R, '$dirty'\n  return R\n\n\n#===========================================================================================================\n# DB QUERIES\n#-----------------------------------------------------------------------------------------------------------\n@row_from_vnr = ( S, vnr ) =>\n  validate.vnr vnr\n  dbr     = S.mirage.dbr\n  vnr     = JSON.stringify vnr\n  return dbr.$.first_row dbr.datom_from_vnr { vnr, }\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_vnr = ( S, vnr ) =>\n  return null unless ( row = @row_from_vnr S, vnr )?\n  return @datom_from_row S, row\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@register_new_key = ( S, key, settings ) =>\n  validate.datamill_register_key_settings\n  db              = S.mirage.dbw\n  is_block        = cast.boolean 'number', ( settings.is_block        ? false )\n  has_paragraphs  = cast.boolean 'number', ( settings.has_paragraphs  ? false )\n  try\n    db.register_key { key, is_block, has_paragraphs, }\n  catch error\n    throw error unless error.message.startsWith \"UNIQUE constraint failed\"\n    # throw new Error \"µ77754 key #{rpr key} already registered\"\n    warn \"µ77754 key #{rpr key} already registered\"\n  @_key_registry_cache = null\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@register_key = ( S, key, settings ) =>\n  ### TAINT code duplication ###\n  validate.datamill_register_key_settings\n  db                    = S.mirage.dbw\n  is_block              = ( settings.is_block        ? false )\n  has_paragraphs        = ( settings.has_paragraphs  ? false )\n  unless ( entry = db.$.first_row db.get_key_entry { key, } )?\n    return @register_new_key S, key, settings\n  definition            = { key, is_block, has_paragraphs, }\n  entry.is_block        = cast.number 'boolean', ( entry.is_block       ? 0 )\n  entry.has_paragraphs  = cast.number 'boolean', ( entry.has_paragraphs ? 0 )\n  unless CND.equals definition, entry\n    throw new Error \"µ87332 given key definition #{jr definition} doesn't match esisting entry #{rpr entry}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_key_registry_cache = null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_key_registry = ( S ) =>\n  return @_key_registry_cache if @_key_registry_cache?\n  db                    = S.mirage.dbw\n  R                     = {}\n  R[ row.key ] = row for row from db.read_key_registry()\n  @_key_registry_cache  = PD.freeze R\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@datom_from_row = ( S, row ) =>\n  vnr         = row.vnr\n  $vnr        = JSON.parse vnr\n  p           = if row.p? then ( JSON.parse row.p ) else {}\n  R           = PD.thaw PD.new_datom row.key, { $vnr, }\n  R.dest      = row.dest\n  R.ref       = row.ref\n  R.text      = row.text  if row.text?\n  R.$stamped  = true      if ( row.stamped ? false )\n  R[ k ]      = p[ k ] for k of p when p[ k ]?\n  return PD.freeze R\n\n#-----------------------------------------------------------------------------------------------------------\n@p_from_datom = ( S, d ) =>\n  R     = {}\n  count = 0\n  for k, v of d\n    continue if k is 'key'\n    continue if k is 'text'\n    continue if k is 'dest'\n    continue if k is 'ref'\n    continue if k.startsWith '$'\n    continue unless v?\n    count  += 1\n    R[ k ]  = v\n  R = null if count is 0\n  return JSON.stringify R\n\n#-----------------------------------------------------------------------------------------------------------\n@row_from_datom = ( S, d ) =>\n  key       = d.key\n  vnr       = d.$vnr\n  stamped   = d.$stamped  ? false\n  dest      = d.dest      ? S.mirage.default_dest\n  text      = d.text      ? null\n  ref       = d.ref       ? null\n  p         = @p_from_datom S, d\n  R         = { key, vnr, dest, text, p, stamped, ref, }\n  # R         = { key, vnr, vnr_blob, dest, text, p, stamped, }\n  # MIRAGE.types.validate.mirage_main_row R if do_validate\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@feed_source = ( S, source, limit = Infinity ) =>\n  dbr           = S.mirage.db\n  nr            = 0\n  #.........................................................................................................\n  if DM._is_reprising S\n    validate.datamill_inclusive_region S.control.reprise\n    { first_vnr\n      last_vnr\n      phase }       = S.control.reprise\n    ### TAINT do casting in DB module ###\n    first_vnr_blob  = dbr.$.as_hollerith first_vnr\n    last_vnr_blob   = dbr.$.as_hollerith last_vnr\n    rows            = dbr.read_unstamped_lines { first_vnr_blob, last_vnr_blob, }\n  #.........................................................................................................\n  else\n    rows            = dbr.read_unstamped_lines()\n  #.........................................................................................................\n  for row from rows\n    nr += +1\n    break if nr > limit\n    source.send @datom_from_row S, row\n  #.........................................................................................................\n  source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$feed_db = ( S ) =>\n  debug 'µ88755', jr ( k for k of S )\n  dbw = S.mirage.dbw\n  return $watch ( d ) =>\n    ### TAINT how to convert vnr in ICQL? ###\n    row     = @row_from_datom S, d\n    methods = []\n    try\n      ### TAINT consider to use upsert instead https://www.sqlite.org/lang_UPSERT.html ###\n      ### NOTE Make sure to test first for `$fresh`/inserts, then for `$dirty`/updates, since a `$fresh`\n      datom may have undergone changes (which doesn't make the correct opertion an update). ###\n      if d.$fresh\n        methods.push 'insert fresh'\n        dbw.insert row\n      else if d.$dirty\n        ### NOTE force insert when update was without effect; this happens when `$vnr` was\n        affected by a `PD.set()` call (ex. `VNR.advance $vnr; send PD.set d, '$vnr', $vnr`). ###\n        { changes, } = dbw.update row\n        if changes is 0\n          methods.push 'insert dirty'\n          dbw.insert row\n    catch error\n      warn 'µ12133', \"when trying to #{methods.join ' -> '} row\"\n      warn 'µ12133', jr row\n      warn 'µ12133', \"an error occurred:\"\n      warn 'µ12133', \"#{error.message}\"\n      if error.message.startsWith 'UNIQUE constraint failed'\n        urge 'µ88768', \"conflict occurred because\"\n        urge 'µ88768', jr @row_from_vnr S, d.$vnr\n        urge 'µ88768', \"is already in DB\"\n      throw error\n    return null\n\n#===========================================================================================================\n# PHASES\n#-----------------------------------------------------------------------------------------------------------\n@repeat_phase = ( S, phase ) =>\n  validate.datamill_phase_repeat phase.repeat_phase\n  return false unless phase.repeat_phase?\n  return phase.repeat_phase if isa.boolean phase.repeat_phase\n  return phase.repeat_phase S\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( S ) => $watch ( d ) =>\n  if d.$stamped then color = CND.grey\n  else\n    switch d.key\n      when '^word' then color = CND.gold\n      else color = CND.white\n  info color jr d\n\n#-----------------------------------------------------------------------------------------------------------\n@get_tty_width = ( S ) =>\n  return R if ( R = process.stdout.columns )?\n  { execSync, } = require 'child_process'\n  return parseInt ( execSync \"tput cols\", { encoding: 'utf-8', } ), 10\n\n#-----------------------------------------------------------------------------------------------------------\n@show_overview = ( S, settings ) =>\n  ### TAINT consider to convert row to datom before display ###\n  line_width    = @get_tty_width S\n  dbr           = S.mirage.db\n  level         = 0\n  omit_count    = 0\n  show_stamped  = false\n  show_blanks   = false\n  #.........................................................................................................\n  defaults =\n    raw:        false\n    hilite:     null\n  settings = assign {}, defaults, settings\n  #.........................................................................................................\n  for row from dbr.read_lines() # { limit: 30, }\n    if settings.raw\n      info @format_object row\n      continue\n    if ( row.key is '^line' ) and ( row.stamped ) and ( row.text is '' )\n      omit_count += +1\n      continue\n    if ( not show_blanks ) and ( row.key is '^blank' )\n      omit_count += +1\n      continue\n    if ( not show_stamped ) and row.stamped\n      omit_count += +1\n      continue\n    switch row.key\n      when '^line'            then  _color  = CND.YELLOW\n      when '^block'           then  _color  = CND.gold\n      when '^mktscript'       then  _color  = CND.ORANGE\n      when '~warning'         then  _color  = CND.RED\n      when '~notice'          then  _color  = CND.cyan\n      when '^literal'         then  _color  = CND.GREEN\n      when '^literal-blank'   then  _color  = CND.GREEN\n      when '^p'               then  _color  = CND.BLUE\n      when '<h'               then  _color  = CND.VIOLET\n      when '>h'               then  _color  = CND.VIOLET\n      else                          _color  = @color_from_text row.key[ 1 .. ]\n    #.......................................................................................................\n    stamp   = if row.stamped then '*' else ''\n    key     = to_width row.key,         15\n    vnr     = to_width stamp + row.vnr, 12\n    dest    = to_width row.dest,        4\n    ref     = to_width row.ref ? '',    9\n    text    = if row.text? then ( jr row.text ) else null\n    p       = row.p ? null\n    p       = null if ( p is 'null' )\n    #.......................................................................................................\n    combi   = []\n    combi.push text if text?\n    combi.push p    if p?\n    value   = combi.join ' / '\n    # value   = value[ .. 80 ]\n    line    = \"#{vnr}│#{dest}│#{ref}│#{key}│#{value}\"\n    line    = to_width line, line_width\n    dent    = '  '.repeat level\n    level   = switch row.key[ 0 ]\n      when '<' then level + 1\n      when '>' then level - 1\n      else          level\n    level   = Math.max level, 0\n    #.......................................................................................................\n    if settings.hilite? and ( settings.hilite is row.key )\n      color = ( P... ) -> CND.reverse CND.pink P...\n    else if row.stamped\n      color = CND.grey\n    else if row.key is '^blank'\n      color = CND.yellow\n    else\n      if row.key[ 0 ] is '>'\n        color = ( P... ) -> _color P...\n      else\n        color = ( P... ) -> CND.reverse _color P...\n    #.......................................................................................................\n    ### TAINT experimental, needs better implementation ###\n    xxxxx = 44\n    if row.stamped\n      echo ( color line[ ... xxxxx ] ) + CND.grey line[ xxxxx .. ]\n    else if line[ xxxxx ] is '\"'\n      echo ( color line[ ... xxxxx ] ) + CND.reverse CND.YELLOW line[ xxxxx .. ]\n    else\n      echo ( color line[ ... xxxxx ] ) + CND.RED line[ xxxxx .. ]\n    # echo dent + color line\n  #.........................................................................................................\n  echo \"#{omit_count} rows omitted from this view\"\n  for row from dbr.get_stats()\n    echo \"#{row.key}: #{row.count}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_color_cache = {}\n@color_from_text = ( text ) ->\n  return R if ( R = _color_cache[ text ] )?\n  R = ( P... ) -> ( XXX_COLORIZER.ansi_code_from_text text ) + CND._pen P...\n  # R = ( P... ) -> CND.reverse ( XXX_COLORIZER.ansi_code_from_text text ) + CND._pen P...\n  _color_cache[ text ] = R\n  return R\n\n"
  ]
}