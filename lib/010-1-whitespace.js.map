{
  "version": 3,
  "file": "010-1-whitespace.js",
  "sourceRoot": "..",
  "sources": [
    "src/010-1-whitespace.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\nDM                        = require '..'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$trim = ( S ) ->\n  ref           = 'ws1/trm'\n  return $ ( d, send ) =>\n    return send d unless select d, '^line'\n    if ( new_text = d.text.trimEnd() ) isnt d.text\n      d = PD.set d, { text: new_text, ref, }\n    send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$group_blank_lines = ( S ) ->\n  pipeline = []\n  #.........................................................................................................\n  $group = => PD.$group_by ( d ) ->\n    return 'blank' if ( select d, '^line' ) and ( d.text is '' )\n    return 'other'\n  #.........................................................................................................\n  $unpack = => $ ( group, send ) =>\n    buffer = group.value\n    #.......................................................................................................\n    if group.name is 'blank'\n      d         = buffer[ 0 ]\n      $vnr      = VNR.deepen d.$vnr\n      linecount = buffer.length\n      ref       = 'ws1/gbl'\n      send H.fresh_datom '^blank', { $vnr, linecount, ref, }\n      for d in buffer\n        send stamp d\n    #.......................................................................................................\n    else\n      for d in buffer\n        send d\n    return null\n  #.........................................................................................................\n  pipeline.push $group()\n  pipeline.push $unpack()\n  return PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$ensure_blanks_at_ends = ( S ) ->\n  ### Make sure to include blanks as first and last lines in document or fragment. ###\n  H.register_key S, '^blank', { is_block: false, }\n  #.........................................................................................................\n  # return H.resume_from_db_after S, { realm: 'html', }, PD.mark_position $ ( pd, send ) =>\n  return H.leapfrog_stamped PD.mark_position $ ( pd, send ) =>\n    { is_first\n      is_last\n      d       } = pd\n    #.......................................................................................................\n    ### Make sure the first thing in document or fragment is a blank: ###\n    if is_first and not select d, '^blank'\n      send stamp d\n      ref   = 'ws1/ebae1'\n      $vnr  = VNR.deepen d.$vnr\n      send H.fresh_datom '^blank', { $vnr: ( VNR.recede $vnr ), linecount: 0, ref, }\n      send PD.set d, { $vnr, $fresh: true, ref, }\n      ### If the sole line in document or fragment is not a blank line, make sure it is followed by a\n      blank; we do this here and not in the next clause, below, to avoid sending a duplicate of the\n      the text line: ###\n      if is_last\n        send H.fresh_datom '^blank', { $vnr: ( VNR.advance $vnr ), linecount: 0, ref, }\n    #.......................................................................................................\n    ### Make sure the last thing in document or fragment is a blank: ###\n    else if is_last and not select d, '^blank'\n      send stamp d\n      ref   = 'ws1/ebae2'\n      $vnr  = VNR.deepen d.$vnr\n      send H.fresh_datom '^blank', { $vnr: ( VNR.advance $vnr ), linecount: 0, ref, }\n      send PD.set d, { $vnr, $fresh: true, ref, }\n    else\n      send d\n    return null\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$trim                    S\n  pipeline.push @$group_blank_lines       S\n  pipeline.push @$ensure_blanks_at_ends   S\n  return PD.pull pipeline...\n\n"
  ]
}