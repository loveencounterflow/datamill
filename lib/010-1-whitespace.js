// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, DM, H, PD, VNR, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  DM = require('..');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //-----------------------------------------------------------------------------------------------------------
  this.$trim = function(S) {
    var ref;
    ref = 'ws1/trm';
    return $((d, send) => {
      var new_text;
      if (!select(d, '^line')) {
        return send(d);
      }
      if ((new_text = d.text.trimEnd()) !== d.text) {
        d = PD.set(d, {
          text: new_text,
          ref
        });
      }
      send(d);
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$blank_lines = function(S) {
    var flush, linecount, prv_dest, prv_vnr, send, within_blank;
    prv_vnr = null;
    prv_dest = null;
    linecount = 0;
    send = null;
    within_blank = false;
    //.........................................................................................................
    H.register_key(S, '^blank', {
      is_block: false
    });
    //.........................................................................................................
    flush = () => {
      var $vnr, ref;
      if (prv_vnr == null) {
        return null;
      }
      within_blank = false;
      $vnr = VNR.advance(prv_vnr);
      ref = 'ws1/bl-A';
      send(H.fresh_datom('^blank', {
        linecount,
        $vnr,
        dest: prv_dest,
        ref
      }));
      return linecount = 0;
    };
    //.........................................................................................................
    return PD.mark_position($((pd, send_) => {
      var d, is_first, is_last, is_line, ref;
      ({is_first, is_last, d} = pd);
      //.......................................................................................................
      send = send_;
      //.......................................................................................................
      if (is_last) {
        flush(true);
        return null;
      }
      //.......................................................................................................
      is_line = select(d, '^line');
      //.......................................................................................................
      /* Insert blank if first line isn't blank: */
      if (is_line && is_first) {
        if (d.text !== '') {
          ref = 'ws1/bl-B';
        }
      }
      if (!is_line) {
        // send H.fresh_datom '^blank', { linecount: 0, $vnr: [ 0 ], dest: d.dest, ref, }
        //.......................................................................................................
        return send(d);
      }
      //.......................................................................................................
      /* line is empty / blank */
      if (d.text === '') {
        if (!within_blank) {
          linecount = 0;
        }
        linecount += +1;
        within_blank = true;
        prv_dest = d.dest;
        prv_vnr = VNR.deepen(d.$vnr);
        return send(stamp(d));
      }
      if (within_blank) {
        //.......................................................................................................
        /* line contains material */
        flush(false);
      }
      prv_dest = d.dest;
      prv_vnr = d.$vnr;
      send(d);
      //.......................................................................................................
      return null;
    }));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$blank_lines_2 = function(S) {
    H.register_key(S, '^blank', {
      is_block: false
    });
    //.........................................................................................................
    return PD.mark_position($((pd, send) => {
      var $vnr, d, is_first, is_last, ref;
      ({is_first, is_last, d} = pd);
      //.......................................................................................................
      /* Make sure the first thing in document or fragment is a blank: */
      if (is_first && !select(d, '^blank')) {
        send(stamp(d));
        ref = 'ws1/b2-1';
        $vnr = VNR.deepen(d.$vnr);
        send(H.fresh_datom('^blank', {
          $vnr: VNR.recede($vnr),
          linecount: 0,
          ref
        }));
        send(PD.set(d, {
          $vnr,
          $fresh: true,
          ref
        }));
        /* If the sole line in document or fragment is not a blank line, make sure it is followed by a
        blank; we do this here and not in the next clause, below, to avoid sending a duplicate of the
        the text line: */
        if (is_last) {
          send(H.fresh_datom('^blank', {
            $vnr: VNR.advance($vnr),
            linecount: 0,
            ref
          }));
        }
      //.......................................................................................................
      /* Make sure the last thing in document or fragment is a blank: */
      } else if (is_last && !select(d, '^blank')) {
        send(stamp(d));
        ref = 'ws1/b2-2';
        $vnr = VNR.deepen(d.$vnr);
        send(H.fresh_datom('^blank', {
          $vnr: VNR.advance($vnr),
          linecount: 0,
          ref
        }));
        send(PD.set(d, {
          $vnr,
          $fresh: true,
          ref
        }));
      } else {
        send(d);
      }
      return null;
    }));
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$trim(S));
    pipeline.push(this.$blank_lines(S));
    pipeline.push(this.$blank_lines_2(S));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=010-1-whitespace.js.map
