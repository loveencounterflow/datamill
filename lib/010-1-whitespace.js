// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, DM, H, PD, VNR, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  DM = require('..');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //-----------------------------------------------------------------------------------------------------------
  this.$trim = function(S) {
    var ref;
    ref = 'ws1/trm';
    return $((d, send) => {
      var new_text;
      if (!select(d, '^line')) {
        return send(d);
      }
      if ((new_text = d.text.trimEnd()) !== d.text) {
        d = PD.set(d, {
          text: new_text,
          ref
        });
      }
      send(d);
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$group_by = (S) => {
    /* TAINT, simplify, generalize, implement as standard transform `$group_by()` */
    var buffer, group;
    group = null;
    buffer = null;
    return $({last}, (d, send) => {
      if (d === last) {
        if ((buffer != null) && buffer.length > 0) {
          send([group, buffer]);
          buffer = null;
        }
        return;
      }
      if (!select(d, '^line')) {
        return send(d);
      }
      if (d.text === '') {
        if ((group != null) && (group !== 'blank')) {
          send([group, buffer]);
          buffer = null;
        }
        group = 'blank';
        if (buffer == null) {
          buffer = [];
        }
        buffer.push(d);
      } else {
        if ((group != null) && (group !== 'line')) {
          send([group, buffer]);
          buffer = null;
        }
        group = 'line';
        if (buffer == null) {
          buffer = [];
        }
        buffer.push(d);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$blank_lines_1 = function(S) {
    var $unpack, pipeline;
    pipeline = [];
    //.........................................................................................................
    $unpack = (S) => {
      return $((d, send) => {
        var $vnr, buffer, d1, group, i, j, len, len1, linecount, ref, sub_d;
        if (!isa.list(d)) {
          return send(d);
        }
        [group, buffer] = d;
        switch (group) {
          //...................................................................................................
          case 'line':
            for (i = 0, len = buffer.length; i < len; i++) {
              sub_d = buffer[i];
              send(sub_d);
            }
            break;
          //...................................................................................................
          case 'blank':
            d1 = buffer[0];
            $vnr = VNR.deepen(d1.$vnr);
            linecount = buffer.length;
            ref = 'ws1/bl1';
            send(H.fresh_datom('^blank', {$vnr, linecount, ref}));
            for (j = 0, len1 = buffer.length; j < len1; j++) {
              sub_d = buffer[j];
              send(stamp(sub_d));
            }
            break;
          default:
            //...................................................................................................
            throw new Error(`Âµ11928 unknown group ${rpr(group)}`);
        }
        return null;
      });
    };
    //.........................................................................................................
    pipeline.push(this.$group_by(S));
    pipeline.push($unpack(S));
    return PD.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$blank_lines_2 = function(S) {
    /* Make sure to include blanks as first and last lines in document or fragment. */
    H.register_key(S, '^blank', {
      is_block: false
    });
    //.........................................................................................................
    return PD.mark_position($((pd, send) => {
      var $vnr, d, is_first, is_last, ref;
      ({is_first, is_last, d} = pd);
      //.......................................................................................................
      /* Make sure the first thing in document or fragment is a blank: */
      if (is_first && !select(d, '^blank')) {
        send(stamp(d));
        ref = 'ws1/b2-1';
        $vnr = VNR.deepen(d.$vnr);
        send(H.fresh_datom('^blank', {
          $vnr: VNR.recede($vnr),
          linecount: 0,
          ref
        }));
        send(PD.set(d, {
          $vnr,
          $fresh: true,
          ref
        }));
        /* If the sole line in document or fragment is not a blank line, make sure it is followed by a
        blank; we do this here and not in the next clause, below, to avoid sending a duplicate of the
        the text line: */
        if (is_last) {
          send(H.fresh_datom('^blank', {
            $vnr: VNR.advance($vnr),
            linecount: 0,
            ref
          }));
        }
      //.......................................................................................................
      /* Make sure the last thing in document or fragment is a blank: */
      } else if (is_last && !select(d, '^blank')) {
        send(stamp(d));
        ref = 'ws1/b2-2';
        $vnr = VNR.deepen(d.$vnr);
        send(H.fresh_datom('^blank', {
          $vnr: VNR.advance($vnr),
          linecount: 0,
          ref
        }));
        send(PD.set(d, {
          $vnr,
          $fresh: true,
          ref
        }));
      } else {
        send(d);
      }
      return null;
    }));
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$trim(S));
    pipeline.push(this.$blank_lines_1(S));
    pipeline.push(this.$blank_lines_2(S));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=010-1-whitespace.js.map
