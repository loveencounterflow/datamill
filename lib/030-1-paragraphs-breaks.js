// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, PD, VNR, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  // ### Whether in-place updates are OK ###
  // prefer_updates = true

  //-----------------------------------------------------------------------------------------------------------
  this.$breaks = function(S) {
    var key_registry, prv_was_break;
    H.register_key(S, '^break', {
      is_block: false
    });
    key_registry = H.get_key_registry(S);
    prv_was_break = false;
    //.........................................................................................................
    return $({first}, (d, send) => {
      /* TAINT code duplication */
      var $vnr, dest, is_block, is_closer, is_opener, ref;
      if (d === first) {
        return;
      }
      if (PD.is_stamped(d)) {
        return send(d);
      }
      //.......................................................................................................
      if (select(d, '^blank')) {
        if (!prv_was_break) {
          ref = 'µ15600';
          dest = d.dest;
          $vnr = VNR.new_level(d.$vnr, 0);
          $vnr = VNR.advance($vnr);
          send(H.fresh_datom('^break', {$vnr, dest, ref}));
          prv_was_break = true;
        }
        return send(d);
      }
      //.......................................................................................................
      is_block = key_registry[d.key].is_block;
      is_opener = select(d, '<');
      is_closer = select(d, '>');
      //.......................................................................................................
      if ((!prv_was_break) && is_block) {
        if (is_opener) {
          /* TAINT code duplication */
          ref = 'µ15601';
          dest = d.dest;
          $vnr = VNR.new_level(d.$vnr, 0);
          $vnr = VNR.advance($vnr);
          send(H.fresh_datom('^break', {$vnr, dest, ref}));
          $vnr = VNR.advance($vnr);
          send(PD.set(d, '$vnr', $vnr));
          prv_was_break = true;
          send(stamp(d));
          return;
        } else {
          /* TAINT code duplication */
          ref = 'µ15602';
          dest = d.dest;
          $vnr = VNR.new_level(d.$vnr, 0);
          $vnr = VNR.advance($vnr);
          send(PD.set(d, '$vnr', $vnr));
          $vnr = VNR.advance($vnr);
          send(H.fresh_datom('^break', {$vnr, dest, ref}));
          prv_was_break = true;
          send(stamp(d));
          return;
        }
      }
      //.......................................................................................................
      prv_was_break = false;
      return send(d);
    });
  };

  // return send d unless select d, '^blank'
  // send stamp d
  // $vnr    = VNR.new_level d.$vnr, 0
  // $vnr    = VNR.advance $vnr; send H.fresh_datom '^p', { blanks: d.linecount, $vnr, }

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$breaks(S));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=030-1-paragraphs-breaks.js.map
