{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'DATAMILL/TYPES'\n{ debug }                 = GUY.trm.get_loggers 'DATAMILL/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\nbase_types                = null\nserver_types              = null\ndocument_types            = null\nmisfit                    = Symbol 'misfit'\nPATH                      = require 'node:path'\n{ DBay }                  = require 'dbay'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  { Document }              = require './document'\n  #.........................................................................................................\n  declare.dbay                  override: true, isa: ( x ) -> x?.constructor?.name is 'DBay'\n  declare.datamill_document     override: true, isa: ( x ) -> x instanceof Document\n  #.........................................................................................................\n  return base_types\n\n#-----------------------------------------------------------------------------------------------------------\nget_server_types = ->\n  return server_types if server_types?\n  #.........................................................................................................\n  server_types                = new Intertype get_base_types()\n  { declare }                 = server_types\n  #.........................................................................................................\n  declare.datamill_host       'nonempty.text'\n  declare.datamill_port       ( x ) ->\n    return false unless @isa.integer x\n    return false unless 1024 <= x <= 65535\n    return true\n  #.........................................................................................................\n  declare.datamill_server_cfg\n    fields:\n      host:               'datamill_host'\n      port:               'datamill_port'\n      doc:                'datamill_document'\n    default:\n      host:               'localhost'\n      port:               3456\n      paths:\n        public:     PATH.resolve __dirname, '../public'\n        favicon:    PATH.resolve __dirname, '../public/favicon.png'\n        src:        PATH.resolve __dirname, '../src'\n      file_server:\n        # Enable or disable accepting ranged requests. Disabling this will not send Accept-Ranges and ignore the\n        # contents of the Range request header. defaults to true.\n        acceptRanges:     true\n        # Set Cache-Control response header, defaults to undefined, see docs: Cache-Control in MDN.\n        cacheControl:     undefined\n        # Enable or disable etag generation, defaults to true.\n        etag:             true\n        # Enable or disable Last-Modified header, defaults to true. Uses the file system's last modified value.\n        # defaults to true.\n        lastModified:     true\n        # Set ignore rules. defaults to undefined. ( path ) => boolean\n        ignore:           undefined\n        # If true, serves after await next(), allowing any downstream middleware to respond first. defaults to false.\n        defer:            false\n  #...........................................................................................................\n  return server_types\n\n#-----------------------------------------------------------------------------------------------------------\nget_document_types = ->\n  return document_types if document_types?\n  #.........................................................................................................\n  document_types                = new Intertype get_base_types()\n  { declare }                   = document_types\n  #.........................................................................................................\n  declare.doc_fad_id    'nonempty.text'     ### TAINT should check with DB whether known ###\n  declare.doc_src_path 'nonempty.text'     ### TAINT should be more precise ###\n  declare.doc_src_id    'nonempty.text'     ### TAINT should be more precise ###\n  declare.doc_region_id 'nonempty.text'     ### TAINT should be more precise ###\n  declare.doc_home      'nonempty.text'     ### TAINT should be more precise ###\n  declare.doc_src_hash ( x ) -> ( @isa.text x ) and ( /^[0-9a-f]{17}$/.test x )\n  #.........................................................................................................\n  declare.doc_document_cfg\n    fields:\n      db:                 'dbay'\n      home:               'doc_home'\n      _loc_marker_re:     'regex'\n    default:\n      db:                 null\n      home:               null\n      ### TAINT use more permissive identifier syntax ###\n      _loc_marker_re:     /<(?<left_slash>\\/?)dm:loc#(?<doc_loc_id>[-_a-zA-Z0-9]*)(?<right_slash>\\/?)>/ug\n    create: ( x ) ->\n      return x unless ( not x? ) or ( @isa.object x )\n      R     = { @registry.doc_document_cfg.default..., x..., }\n      R.db             ?= new DBay()\n      return R\n  #...........................................................................................................\n  declare.doc_add_source_cfg\n    fields:\n      doc_src_id:        'doc_src_id'\n      doc_src_path:      'doc_src_path'\n      doc_src_hash:      'optional.doc_src_hash'\n      # doc_fad_id:         'doc_fad_id'\n    default:\n      doc_src_id:        null\n      doc_src_path:      null\n      doc_src_hash:      null\n      # doc_fad_id:         null\n  #...........................................................................................................\n  declare.doc_update_source_cfg\n    fields:\n      doc_src_id:        'doc_src_id'\n      doc_src_path:      'doc_src_path'\n      doc_src_hash:      'doc_src_hash'\n    default:\n      doc_src_id:        null\n      doc_src_path:      null\n      doc_src_hash:      null\n  #...........................................................................................................\n  declare.walk_raw_lines_cfg\n    isa:        'optional.list.of.nonempty.text'\n    create:     ( x ) ->\n      return [] unless x\n      return x\n  #...........................................................................................................\n  declare.walk_xxx_lines_cfg\n    isa:        'optional.list.of.nonempty.text'\n    create:     ( x ) ->\n      return [] unless x\n      return x\n  #...........................................................................................................\n  return document_types\n\nmodule.exports = { misfit, get_base_types, get_server_types, get_document_types, }\n\n\n\n"
  ]
}