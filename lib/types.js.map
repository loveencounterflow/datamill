{
  "version": 3,
  "file": "types.js",
  "sourceRoot": "..",
  "sources": [
    "src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-PARSER/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_phase_repeat', ( x ) ->\n  return true unless x?\n  return true if @isa.boolean x\n  return @isa.function x\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_region', ( x ) ->\n  tests:\n    \"x is an inclusive or an exclusive region\": ( x ) ->\n      is_inclusive = @isa.datamill_inclusive_region x\n      is_exclusive = @isa.datamill_exclusive_region x\n      return ( is_inclusive or is_exclusive ) and not ( is_inclusive and is_exclusive )\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_exclusive_region', ( x ) ->\n  tests:\n    \"x is an object\":                 ( x ) -> @isa.object x\n    \"x.start_vnr is a vnr\":           ( x ) -> isa.vnr x.start_vnr\n    \"x.stop_vnr is a vnr\":            ( x ) -> isa.vnr x.stop_vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_inclusive_region', ( x ) ->\n  tests:\n    \"x is an object\":                 ( x ) -> @isa.object x\n    \"x.first_vnr is a vnr\":           ( x ) -> isa.vnr x.first_vnr\n    \"x.last_vnr is a vnr\":            ( x ) -> isa.vnr x.last_vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_reprising_message', ( x ) ->\n  tests:\n    \"x is an object\":                   ( x ) -> @isa.object x\n    \"x.key is '^reprise'\":              ( x ) -> @isa.key is '^reprise'\n    \"x.phase is a nonempty_text\":       ( x ) -> isa.nonempty_text x.phase\n    \"x is a datamill_region\":           ( x ) -> isa.datamill_region x\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_register_key_settings', ( x ) ->\n  tests:\n    \"x is a object\":                  ( x ) -> @isa.object    x\n    \"x.is_block is a boolean\":        ( x ) -> @isa.boolean   x.is_block\n    \"x.has_paragraphs is a ?boolean\": ( x ) -> ( not x.has_paragraphs? ) or @isa.boolean x.has_paragraphs\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_realm', ( x ) ->\n  tests:\n    \"x is a nonempty text\":           ( x ) -> @isa.nonempty_text x\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_run_phase_settings', ( x ) ->\n  tests:\n    \"x is a object\":                      ( x ) -> @isa.object          x\n    \"x.from_realm is a datamill_realm\":   ( x ) -> @isa.datamill_realm  x.from_realm\n    # \"x.to_realm is a datamill_realm\":     ( x ) -> @isa.datamill_realm  x.to_realm\n    # \"x.transform is a function\":          ( x ) -> @isa.function        x.transform\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_resume_from_db_settings', ( x ) ->\n  tests:\n    \"x is a datamill_run_phase_settings\": ( x ) -> @isa.datamill_run_phase_settings x\n    \"x.feed_db is a boolean\":             ( x ) -> @isa.boolean                     x.feed_db\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'datamill_copy_realms_settings', ( x ) ->\n#   tests:\n#     \"x is a object\":                      ( x ) -> @isa.object        x\n#     \"x.from is a object\":                 ( x ) -> @isa.object        x.from\n#     \"x.to is a object\":                   ( x ) -> @isa.object        x.to\n#     \"x.from.realm is a nonempty text\":    ( x ) -> @isa.nonempty_text x.from.realm\n#     \"x.from.select is a ?function\":       ( x ) -> ( not x.from.select?) or ( @isa.function x.from.select )\n#     \"x.to.realm is a nonempty text\":      ( x ) -> @isa.nonempty_text x.to.realm\n\n\n  # tests:\n  #   \"optional x is function or boolean\":\n#     \"x is a object\":                          ( x ) -> @isa.object          x\n#     \"x has key 'key'\":                        ( x ) -> @has_key             x, 'key'\n#     \"x has key 'vlnr_txt'\":                   ( x ) -> @has_key             x, 'vlnr_txt'\n#     \"x has key 'value'\":                      ( x ) -> @has_key             x, 'value'\n#     \"x.key is a nonempty text\":               ( x ) -> @isa.nonempty_text   x.key\n#     \"x.vlnr_txt is a nonempty text\":          ( x ) -> @isa.nonempty_text   x.vlnr_txt\n#     \"x.vlnr_txt starts, ends with '[]'\":      ( x ) -> ( x.vlnr_txt.match /^\\[.*\\]$/ )?\n#     \"x.vlnr_txt is a JSON array of integers\": ( x ) ->\n#       # debug 'Âµ55589', x\n#       ( @isa.list ( lst = JSON.parse x.vlnr_txt ) ) and \\\n#       ( lst.every ( xx ) => ( @isa.integer xx ) and ( @isa.positive xx ) )\n\n\n"
  ]
}