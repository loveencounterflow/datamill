{
  "version": 3,
  "file": "types.js",
  "sourceRoot": "..",
  "sources": [
    "src/types.coffee"
  ],
  "names": [],
  "mappings": ";AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,SAAA,GAA4B,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC;;EACpD,SAAA,GAA4B,IAAI,SAAJ,CAAc,MAAM,CAAC,OAArB,EAhB5B;;;EAmBA,IAAC,CAAA,OAAD,CAAS,uBAAT,EAAkC,QAAA,CAAE,CAAF,CAAA;IAChC,IAAmB,SAAnB;AAAA,aAAO,KAAP;;IACA,IAAe,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAb,CAAf;AAAA,aAAO,KAAP;;AACA,WAAO,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAd;EAHyB,CAAlC,EAnBA;;;EAyBA,IAAC,CAAA,OAAD,CAAS,oBAAT,EAA+B,QAAA,CAAE,CAAF,CAAA;WAC7B;MAAA,KAAA,EACE;QAAA,gBAAA,EAAkC,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAM,SAAN,CAAA,IAAc,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;QAAvB,CAAlC;QACA,sBAAA,EAAkC,QAAA,CAAE,CAAF,CAAA;iBAAS,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,SAAV;QAAT,CADlC;QAEA,qBAAA,EAAkC,QAAA,CAAE,CAAF,CAAA;iBAAS,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,QAAV;QAAT;MAFlC;IADF;EAD6B,CAA/B,EAzBA;;;EAgCA,IAAC,CAAA,OAAD,CAAS,gCAAT,EAA2C,QAAA,CAAE,CAAF,CAAA;WACzC;MAAA,KAAA,EACE;QAAA,eAAA,EAAkC,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAe,CAAf;QAAT,CAAlC;QACA,yBAAA,EAAkC,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAe,CAAC,CAAC,QAAjB;QAAT,CADlC;QAEA,gCAAA,EAAkC,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAM,wBAAN,CAAA,IAA6B,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,cAAf;QAAtC;MAFlC;IADF;EADyC,CAA3C;;EAhCA;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-PARSER/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_phase_repeat', ( x ) ->\n  return true unless x?\n  return true if @isa.boolean x\n  return @isa.function x\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_S_confine', ( x ) ->\n  tests:\n    \"x is a ?object\":                 ( x ) -> ( not x? ) or @isa.object x\n    \"x.start_vnr is a vnr\":           ( x ) -> isa.vnr x.start_vnr\n    \"x.stop_vnr is a vnr\":            ( x ) -> isa.vnr x.stop_vnr\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'datamill_register_key_settings', ( x ) ->\n  tests:\n    \"x is a object\":                  ( x ) -> @isa.object    x\n    \"x.is_block is a boolean\":        ( x ) -> @isa.boolean   x.is_block\n    \"x.has_paragraphs is a ?boolean\": ( x ) -> ( not x.has_paragraphs? ) or @isa.boolean x.has_paragraphs\n\n\n  # tests:\n  #   \"optional x is function or boolean\":\n#     \"x is a object\":                          ( x ) -> @isa.object          x\n#     \"x has key 'key'\":                        ( x ) -> @has_key             x, 'key'\n#     \"x has key 'vlnr_txt'\":                   ( x ) -> @has_key             x, 'vlnr_txt'\n#     \"x has key 'value'\":                      ( x ) -> @has_key             x, 'value'\n#     \"x.key is a nonempty text\":               ( x ) -> @isa.nonempty_text   x.key\n#     \"x.vlnr_txt is a nonempty text\":          ( x ) -> @isa.nonempty_text   x.vlnr_txt\n#     \"x.vlnr_txt starts, ends with '[]'\":      ( x ) -> ( x.vlnr_txt.match /^\\[.*\\]$/ )?\n#     \"x.vlnr_txt is a JSON array of integers\": ( x ) ->\n#       # debug 'Âµ55589', x\n#       ( @isa.list ( lst = JSON.parse x.vlnr_txt ) ) and \\\n#       ( lst.every ( xx ) => ( @isa.integer xx ) and ( @isa.positive xx ) )\n\n\n"
  ]
}