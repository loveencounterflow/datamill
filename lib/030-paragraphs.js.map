{
  "version": 3,
  "file": "030-paragraphs.js",
  "sourceRoot": "..",
  "sources": [
    "src/030-paragraphs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n'use strict'\n\n############################################################################################################\nH                         = require './helpers'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = H.badge_from_filename __filename\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nrequire                   './exception-handler'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nVNR                       = require './vnr'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $watch\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n\n\n  # key_registry    = H.get_key_registry S\n  # block_depth     = 0\n    # is_block  = key_registry[ d.key ].is_block\n    # is_opener = select d, '<'\n    # is_closer = select d, '>'\n    # if is_block\n    #   if is_opener then block_depth++\n    #   else              block_depth--\n    # return send d unless block_depth is 0\n\n#-----------------------------------------------------------------------------------------------------------\n@$paragraphs = ( S ) ->\n  H.register_key S, '<p', { is_block: true, }\n  H.register_key S, '>p', { is_block: true, }\n  within_p        = false\n  prv_was_blank   = false\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    #.......................................................................................................\n    if select d, '^blank'\n      if within_p\n        send stamp d\n        ref           = 'pco/p1'\n        dest          = d.dest\n        $vnr          = VNR.deepen d.$vnr, 0\n        send PD.set d, { $vnr, dest, ref, $fresh: true, }\n        send H.fresh_datom '>p', { $vnr: ( VNR.recede $vnr ), dest, ref, }\n        within_p      = false\n      else\n        send d\n      prv_was_blank = true\n    #.......................................................................................................\n    else if select d, '^line'\n      if prv_was_blank\n        ref           = 'pco/p2'\n        dest          = d.dest\n        $vnr          = VNR.deepen d.$vnr, 0\n        send H.fresh_datom '<p', { $vnr: ( VNR.recede $vnr ), dest, ref, }\n        send PD.set d, { $vnr, ref, }\n        within_p      = true\n        send stamp d\n      else\n        send d\n      prv_was_blank = false\n    #.......................................................................................................\n    send d\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$experiment = ( S ) ->\n#   H.register_key S, '^x', { is_block: false, }\n#   #.........................................................................................................\n#   return $ { last, }, ( d, send ) =>\n#     return send d unless d is last\n#     send H.fresh_datom '^x', { $vnr: [ 10, -1, ], dest: 'xxx', }\n#     send H.fresh_datom '^x', { $vnr: [ 10,  0, ], dest: 'xxx', }\n#     return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$paragraphs  S\n  # pipeline.push @$experiment  S\n  return PD.pull pipeline...\n\n"
  ]
}