// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, PD, VNR, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  // ### Whether in-place updates are OK ###
  // prefer_updates = true

  //-----------------------------------------------------------------------------------------------------------
  this.$paragraphs = function(S) {
    /* TAINT avoid to send `^p` after block-level element */
    var key_registry;
    key_registry = H.get_key_registry(S);
    // debug 'µ11121', key_registry
    //.........................................................................................................
    return $({first}, (d, send) => {
      var color;
      if (d === first) {
        return;
      }
      // debug 'µ11121', jr d
      //.......................................................................................................
      if (select(d, '^blank')) {
        urge('µ11121', CND.pink("blank"));
      //.......................................................................................................
      } else if (select(d, '^line')) {
        urge('µ11121', CND.yellow("line", CND.reverse(d.text)));
      //.......................................................................................................
      } else if (key_registry[d.key].is_block) {
        color = d.key.startsWith('<') ? CND.green : CND.red;
        urge('µ11121', color("block", jr(d)));
      } else {
        //.......................................................................................................
        urge('µ11121', CND.blue("other", jr(d)));
      }
      //.......................................................................................................
      return send(d);
    });
  };

  // return send d unless select d, '^blank'
  // send stamp d
  // $vnr    = VNR.new_level d.$vnr, 0
  // $vnr    = VNR.advance $vnr; send H.fresh_datom '^p', { blanks: d.linecount, $vnr, }

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$paragraphs(S));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=030-paragraphs.js.map
