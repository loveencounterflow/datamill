// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, PD, VNR, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................

  //-----------------------------------------------------------------------------------------------------------
  this.$paragraphs = function(S) {
    var prv_was_blank, within_p;
    H.register_key(S, '<p', {
      is_block: true
    });
    H.register_key(S, '>p', {
      is_block: true
    });
    within_p = false;
    prv_was_blank = false;
    //.........................................................................................................
    return $((d, send) => {
      var $vnr, dest, ref;
      //.......................................................................................................
      if (select(d, '^blank')) {
        if (within_p) {
          send(stamp(d));
          ref = 'pco/p1';
          dest = d.dest;
          $vnr = VNR.deepen(d.$vnr, 0);
          send(PD.set(d, {
            $vnr,
            dest,
            ref,
            $fresh: true
          }));
          send(H.fresh_datom('>p', {
            $vnr: VNR.recede($vnr),
            dest,
            ref
          }));
          within_p = false;
        } else {
          send(d);
        }
        prv_was_blank = true;
      //.......................................................................................................
      } else if (select(d, '^line')) {
        if (prv_was_blank) {
          ref = 'pco/p2';
          dest = d.dest;
          $vnr = VNR.deepen(d.$vnr, 0);
          send(H.fresh_datom('<p', {
            $vnr: VNR.recede($vnr),
            dest,
            ref
          }));
          send(PD.set(d, {$vnr, ref}));
          within_p = true;
          send(stamp(d));
        } else {
          send(d);
        }
        prv_was_blank = false;
      } else {
        //.......................................................................................................
        send(d);
      }
      //.......................................................................................................
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$assemble_paragraphs = function(S) {
    var collect, collector, flush, last_vnr, leapfrogger, send, within_p;
    collector = [];
    within_p = false;
    send = null;
    leapfrogger = function(d) {
      return PD.is_stamped(d);
    };
    last_vnr = null;
    H.register_key(S, '^hunk', {
      is_block: false
    });
    //.........................................................................................................
    collect = function(d) {
      if (collector == null) {
        collector = [];
      }
      collector.push(d);
      send(stamp(d));
      return null;
    };
    //.........................................................................................................
    flush = function(d) {
      var $vnr, text, x;
      collect(d);
      text = ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = collector.length; i < len; i++) {
          x = collector[i];
          results.push(x.text);
        }
        return results;
      })()).join('\n');
      collector = null;
      $vnr = VNR.deepen(d.$vnr);
      send(H.fresh_datom('^hunk', {
        text,
        $vnr,
        ref: 'pco/asp'
      }));
      within_p = false;
      return null;
    };
    //.........................................................................................................
    return PD.leapfrog(leapfrogger, PD.lookaround($((d3, send_) => {
      var d, nxt, prv;
      send = send_;
      [prv, d, nxt] = d3;
      if (!select(d, '^line')) {
        return send(d);
      }
      //.......................................................................................................
      if ((select(prv, '<p')) && ((select(nxt, '>p')) || (select(nxt, '^blank')))) {
        flush(d);
      //.......................................................................................................
      } else if (select(prv, '<p')) {
        within_p = true;
        collect(d);
      //.......................................................................................................
      } else if ((select(nxt, '>p')) || (select(nxt, '^blank'))) {
        flush(d);
      //.......................................................................................................
      } else if ((select(d, '^line')) && within_p) {
        collect(d);
      } else {
        //.......................................................................................................
        send(d);
      }
      //.......................................................................................................
      return null;
    })));
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$paragraphs(S));
    // pipeline.push $watch ( d ) -> info 'Âµ99872', ( CND.truth PD.is_stamped d ), ( CND.white d.key ), ( CND.blue jr d )
    // pipeline.push PD.leapfrog ( ( d ) -> PD.is_stamped d ), $watch ( d ) -> info d.$vnr, d.key, d.text
    pipeline.push(this.$assemble_paragraphs(S));
    // pipeline.push @$experiment  S
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=030-paragraphs.js.map
