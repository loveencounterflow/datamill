// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, $watch, CND, H, PD, VNR, assign, badge, debug, declare, echo, first, help, info, isa, jr, last, rpr, select, size_of, stamp, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  H = require('./helpers');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = H.badge_from_filename(__filename);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  require('./exception-handler');

  first = Symbol('first');

  last = Symbol('last');

  VNR = require('./vnr');

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $watch, $async, select, stamp} = PD);

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //-----------------------------------------------------------------------------------------------------------
  this.mark_preamble = function(S) {
    /* TAINT code duplication */
    var d, dbr, dbw, dest, first_lnr, first_vnr_txt, key, last_lnr, last_vnr_txt, pattern, row, rows, size, start_lnr, start_vnr_txt;
    key = '^line';
    pattern = '<start/>';
    dest = 'preamble';
    dbr = S.mirage.dbr;
    dbw = S.mirage.dbw;
    rows = dbr.$.all_rows(dbr.find_eq_pattern({key, pattern}));
    first_lnr = null;
    last_lnr = null;
    switch (size = size_of(rows)) {
      case 0:
        warn("no document preamble found");
        /* TAINT consider to store these values in DB */
        S.dests.preamble.from = null;
        S.dests.preamble.to = null;
        break;
      case 1:
        row = rows[0];
        d = H.datom_from_row(S, row);
        first_lnr = 1;
        start_lnr = d.$vnr[0];
        last_lnr = start_lnr - 1;
        first_vnr_txt = jr([first_lnr]);
        start_vnr_txt = jr([start_lnr]);
        last_vnr_txt = jr([last_lnr]);
        dbw.set_dest({dest, first_vnr_txt, last_vnr_txt});
        dbw.stamp({
          vnr_txt: start_vnr_txt
        });
        help(`document preamble found on lines 1 thru ${last_lnr}`);
        break;
      default:
        throw new Error(`µ22231 found ${size} ${pattern} tags, only up to one are allowed`);
    }
    /* TAINT consider to store these values in DB */
    S.dests.postscript.from = first_lnr;
    S.dests.postscript.to = last_lnr;
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.mark_postscript = function(S) {
    /* TAINT code duplication */
    /* TAINT can just ignore all <stop/> tags after first */
    var d, dbr, dbw, first_lnr, first_vnr_txt, key, last_lnr, last_vnr_txt, pattern, row, rows, size;
    key = '^line';
    pattern = '<stop/>';
    dbr = S.mirage.dbr;
    dbw = S.mirage.dbw;
    rows = dbr.$.all_rows(dbr.find_eq_pattern({key, pattern}));
    first_lnr = null;
    last_lnr = null;
    switch (size = size_of(rows)) {
      case 0:
        warn("no document terminator found");
        break;
      /* TAINT consider to store these values in DB */
      case 1:
        row = rows[0];
        d = H.datom_from_row(S, row);
        first_lnr = d.$vnr[0];
        last_lnr = dbr.$.first_value(dbr.count_lines());
        first_vnr_txt = jr([first_lnr]);
        last_vnr_txt = jr([last_lnr]);
        dbw.stamp({first_vnr_txt, last_vnr_txt});
        help(`document postscript found on lines ${first_lnr} thru ${last_lnr}`);
        break;
      default:
        throw new Error(`µ22231 found ${size} ${pattern} tags, only up to one are allowed`);
    }
    /* TAINT consider to store these values in DB */
    S.dests.postscript.from = first_lnr;
    S.dests.postscript.to = last_lnr;
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  /* NOTE pseudo-transforms that run before first datom is sent */
  this.$start = function(S) {
    return $watch({first}, (d) => {
      if (d === first) {
        return this.mark_preamble(S);
      }
    });
  };

  this.$stop = function(S) {
    return $watch({first}, (d) => {
      if (d === first) {
        return this.mark_postscript(S);
      }
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$transform = function(S) {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$start(S));
    pipeline.push(this.$stop(S));
    return PD.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=005-start-stop.js.map
