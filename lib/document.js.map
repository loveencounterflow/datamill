{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/document.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATAMILL/DOCUMENT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of }               = types\n{ SQL \n  sql }                   = require 'dbay'\n{ I, V, L, }              = sql\n#...........................................................................................................\nFS                        = require 'node:fs'\nPATH                      = require 'node:path'\n{ get_base_types\n  get_document_types }    = require './types'\n{ XE }                    = require './_xemitter'\n\n\n#===========================================================================================================\n# DECORATORS\n#-----------------------------------------------------------------------------------------------------------\nclass Decorators\n  \n  ### NOTE this could meaningfully go into a static DBay submodule to assist in building client APIs ###\n\n  #---------------------------------------------------------------------------------------------------------\n  @get_all_first_values: ( table, field ) ->\n    -> @db.all_first_values SQL\"select #{I field} from #{I @cfg.prefix+table} order by 1;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  @get_all_rows: ( table ) ->\n    -> @db.all_rows SQL\"select * from #{I @cfg.prefix+table} order by 1;\"\n\n#===========================================================================================================\nclass Document\n\n  #=========================================================================================================\n  # CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    GUY.props.hide @, 'types', get_document_types()\n    @cfg        = @types.create.doc_document_cfg cfg\n    GUY.props.hide @, 'db',             @cfg.db;            delete @cfg.db\n    GUY.props.hide @, 'file_adapters',  @cfg.file_adapters; delete @cfg.file_adapters\n    @_procure_infrastructure()\n    @_add_layout()\n    @_listen_to_signals()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db.set_foreign_keys_state false\n    @db SQL\"\"\"\n      drop table if exists #{prefix}file;\"\"\"\n    @db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    # TABLES\n    # #.......................................................................................................\n    # @db SQL\"\"\"\n    #   create table #{prefix}fads (\n    #       doc_fad_id            text not null,\n    #       doc_fad_name          text not null,\n    #       comment               text,\n    #     primary key ( doc_fad_id ) );\"\"\"\n    #.......................................................................................................\n    @db.create_function\n      name:           'abspath'\n      deterministic:  true\n      varargs:        false\n      call:           @get_doc_file_abspath.bind @\n    @db.create_function\n      name:           'is_blank'\n      deterministic:  true\n      varargs:        false\n      call:           ( text ) => if ( @text_is_blank text ) then 1 else 0\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}files (\n          doc_file_id           text not null,\n          doc_file_path         text not null,\n          doc_file_hash         text,\n          doc_file_abspath      text not null generated always as ( abspath( doc_file_path ) ) virtual,\n          -- doc_fad_id            text not null references #{prefix}fads,\n          -- doc_file_parameters   json not null,\n        primary key ( doc_file_id ) );\"\"\"\n    #.......................................................................................................\n    self = @\n    @db.create_table_function\n      name:         \"read_file_lines\"\n      parameters:   [ 'doc_file_id', ]\n      columns:      [ 'doc_line_nr', 'doc_line_txt', 'doc_par_nr', ]\n      rows:         ( doc_file_abspath ) ->\n        doc_line_nr   = 0\n        doc_par_nr    = 0\n        prv_was_blank = true\n        for doc_line_txt from GUY.fs.walk_lines doc_file_abspath\n          doc_par_nr++ if ( not ( is_blank = self.text_is_blank doc_line_txt ) ) and prv_was_blank\n          prv_was_blank = is_blank\n          doc_line_nr++\n          yield { doc_line_nr, doc_par_nr: ( if is_blank then 0 else doc_par_nr ), doc_line_txt, }\n        return null\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}lines as select\n          F.doc_file_id               as doc_file_id,\n          L.doc_line_nr               as doc_line_nr,\n          L.doc_par_nr                as doc_par_nr,\n          L.doc_line_txt              as doc_line_txt\n          -- is_blank( L.doc_line_txt )  as doc_line_is_blank\n        from #{prefix}files                   as F,\n        read_file_lines( F.doc_file_abspath ) as L\n        order by 1, 2;\"\"\"\n    #.......................................................................................................\n    @_insert_file     = @db.prepare_insert { into: \"#{prefix}files\", returning: '*', }\n    @_upsert_file     = @db.prepare_insert { into: \"#{prefix}files\", returning: '*', on_conflict: { update: true, }, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_doc_file_abspath: ( doc_file_path ) -> PATH.resolve @cfg.home, doc_file_path\n  text_is_blank:        ( text          ) -> text is '' or /^\\s*$/.test text\n\n  #---------------------------------------------------------------------------------------------------------\n  get_doc_file_ids:   Decorators.get_all_first_values 'files',      'doc_file_id'\n  # get_doc_fads:       Decorators.get_all_rows         'fads'\n\n  #---------------------------------------------------------------------------------------------------------\n  add_file: ( cfg ) ->\n    cfg = @types.create.doc_add_file_cfg cfg\n    { doc_file_id\n      doc_file_path\n      doc_file_hash } = cfg\n    doc_file_abspath  = @get_doc_file_abspath doc_file_path\n    doc_file_hash    ?= GUY.fs.get_content_hash doc_file_abspath, { fallback: null, }\n    return @db.first_row @_insert_file, { doc_file_id, doc_file_path, doc_file_hash, }\n\n  #---------------------------------------------------------------------------------------------------------\n  update_file: ( cfg ) ->\n    cfg = @types.create.doc_update_file_cfg cfg\n    return @db.first_row @_upsert_file, cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_layout: ( cfg ) ->\n    ### TAINT put path to layout into cfg ###\n    doc_file_path = PATH.resolve __dirname, '../assets/layout.dm.html'\n    @add_file { doc_file_id: 'layout', doc_file_path, }\n\n\n  #=========================================================================================================\n  # SIGNAL PROCESSING\n  #---------------------------------------------------------------------------------------------------------\n  _listen_to_signals: ->\n    # XE.listen_to          '^mykey',     ( d       ) ->  keys.listen   .push d.$key\n    # XE.contract           '^otherkey',  ( d       ) ->  keys.contract .push d.$key; return \"some value\"\n    #.......................................................................................................\n    XE.listen_to_all ( key, d ) -> whisper '^23-1^', GUY.trm.reverse \"signal: #{rpr d}\"\n    XE.listen_to_unheard ( key, d ) -> warn GUY.trm.reverse \"unheard signal: #{rpr d}\"\n    #.......................................................................................................\n    XE.listen_to '^maybe-file-changed', ( d ) =>\n      ###\n        * test whether file is registered\n        * retrieve content hash\n        * compare with registered content hash\n        * if changed:\n          * update DB content\n          * `XE.emit '^file-changed', { doc_file_id, doc_file_path, }`\n      ###\n      file            = @_file_from_abspath d.doc_file_abspath\n      doc_file_hash   = GUY.fs.get_content_hash file.doc_file_abspath, { fallback: null, }\n      if file.doc_file_hash isnt doc_file_hash\n        file.doc_file_hash = doc_file_hash\n        @update_file file\n        XE.emit '^file-changed', file\n      return null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _file_from_abspath: ( doc_file_abspath ) -> @db.first_row SQL\"\n    select * from #{@cfg.prefix}files where doc_file_abspath = $doc_file_abspath\", { doc_file_abspath, }\n\n\n# #===========================================================================================================\n# # FILE ADAPTERS (FADs)\n# #===========================================================================================================\n# class File_adapter_abc\n#   @comment: \"abstract base class for files\"\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ->\n#     GUY.props.hide @, 'types', get_document_types()\n#     return undefined\n\n\n# #===========================================================================================================\n# class External_file_abc extends File_adapter_abc\n#   @comment: \"abstract base class for external files\"\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( cfg ) ->\n#     super cfg\n#     @cfg   = @types.create.new_external_file_cfg cfg\n#     return undefined\n\n#   #---------------------------------------------------------------------------------------------------------\n#   write:        null\n#   walk_chunks:  null\n#   walk_lines:   null\n\n# #===========================================================================================================\n# class External_text_file extends File_adapter_abc\n#   @comment: \"adapter for external text files\"\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( cfg ) ->\n#     super()\n#     debug '^354^', { cfg, }\n#     @cfg   = @types.create.new_external_text_file_cfg cfg\n#     return undefined\n\n#   #---------------------------------------------------------------------------------------------------------\n#   walk_lines: ->\n#     yield 'helo'\n#     yield 'world'\n#     return null\n\n\n############################################################################################################\n### Abstract base classes use class name, instantiable classes short acronym with `x` meaning 'external',\n`txt` being most common file name extension for text files: ###\n# file_adapters   =\n#   File_adapter_abc:   File_adapter_abc\n#   External_file_abc:  External_file_abc\n#   xtxt:               External_text_file\n# module.exports  = { Document, File_adapter_abc, file_adapters, }\nmodule.exports  = { Document, }\n\n\n\n\n\n"
  ]
}