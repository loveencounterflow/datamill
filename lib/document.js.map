{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/document.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATAMILL/DOCUMENT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of }               = types\n{ SQL \n  sql }                   = require 'dbay'\n{ I, V, L, }              = sql\n#...........................................................................................................\nFS                        = require 'node:fs'\nPATH                      = require 'node:path'\n{ get_base_types\n  get_document_types }    = require './types'\n{ XE }                    = require './_xemitter'\n\n\n#===========================================================================================================\n# DECORATORS\n#-----------------------------------------------------------------------------------------------------------\nclass Decorators\n  \n  ### NOTE this could meaningfully go into a static DBay submodule to assist in building client APIs ###\n\n  #---------------------------------------------------------------------------------------------------------\n  @get_all_first_values: ( table, field ) ->\n    -> @db.all_first_values SQL\"select #{I field} from #{I table} order by 1;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  @get_all_rows: ( table ) ->\n    -> @db.all_rows SQL\"select * from #{I table} order by 1;\"\n\n#===========================================================================================================\nclass Document\n\n  #=========================================================================================================\n  # CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    GUY.props.hide @, 'types', get_document_types()\n    @cfg        = @types.create.doc_document_cfg cfg\n    GUY.props.hide @, 'db',             @cfg.db;            delete @cfg.db\n    @_procure_infrastructure()\n    @_add_layout()\n    @_listen_to_signals()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    # @db.set_foreign_keys_state false\n    # @db SQL\"\"\"\n    #   drop table if exists doc_file;\"\"\"\n    # @db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    @db.create_function\n      name:           'abspath'\n      deterministic:  true\n      varargs:        false\n      call:           @get_doc_src_abspath.bind @\n    #.......................................................................................................\n    @db.create_function\n      name:           'is_blank'\n      deterministic:  true\n      varargs:        false\n      call:           ( text ) => if ( @text_is_blank text ) then 1 else 0\n    #.......................................................................................................\n    self = @\n    @db.create_table_function\n      name:         \"read_file_lines\"\n      parameters:   [ 'doc_src_id', ]\n      columns:      [ 'doc_line_nr', 'doc_line_txt', 'doc_par_nr', ]\n      rows:         ( doc_src_abspath ) ->\n        doc_line_nr   = 0\n        doc_par_nr    = 0\n        prv_was_blank = true\n        for doc_line_txt from GUY.fs.walk_lines doc_src_abspath\n          doc_par_nr++ if ( not ( is_blank = self.text_is_blank doc_line_txt ) ) and prv_was_blank\n          prv_was_blank = is_blank\n          doc_line_nr++\n          yield { doc_line_nr, doc_par_nr: ( if is_blank then 0 else doc_par_nr ), doc_line_txt, }\n        return null\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table doc_sources (\n          doc_src_id            text not null,\n          doc_src_path         text not null,\n          doc_src_hash         text,\n          doc_src_abspath      text not null generated always as ( abspath( doc_src_path ) ) virtual,\n          -- doc_fad_id            text not null references doc_fads,\n          -- doc_src_parameters   json not null,\n        primary key ( doc_src_id ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view doc_live_raw_lines as select\n          F.doc_src_id                as doc_src_id,\n          L.doc_line_nr               as doc_line_nr,\n          L.doc_par_nr                as doc_par_nr,\n          L.doc_line_txt              as doc_line_txt\n          -- is_blank( L.doc_line_txt )  as doc_line_is_blank\n        from doc_sources                   as F,\n        read_file_lines( F.doc_src_abspath ) as L\n        order by F.doc_src_id, doc_line_nr;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table doc_raw_lines (\n          doc_src_id    text    not null references doc_sources on delete cascade,\n          doc_line_nr   integer not null,\n          doc_par_nr    integer not null,\n          doc_line_txt  text    not null,\n        primary key ( doc_src_id, doc_line_nr ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table doc_locs (\n          doc_src_id    text    not null references doc_sources on delete cascade,\n          doc_loc_id    text    not null,\n          doc_loc_kind  text    not null,\n          doc_line_nr   integer not null /* references doc_raw_lines */,\n          doc_loc_start integer not null,\n          doc_loc_stop  integer not null,\n          doc_loc_mark  integer not null,\n        primary key ( doc_src_id, doc_loc_id, doc_loc_kind ),\n        check ( doc_loc_kind in ( 'start', 'stop' ) ) );\"\"\"\n    #.......................................................................................................\n    @_insert_source_ps  = @db.prepare_insert { into: \"doc_sources\", returning: '*', }\n    @_upsert_source_ps  = @db.prepare_insert { into: \"doc_sources\", returning: '*', on_conflict: { update: true, }, }\n    @_delete_source_ps  = @db.prepare SQL\"\"\"delete from doc_sources where doc_src_id = $doc_src_id;\"\"\"\n    @_insert_lines_2ps  = @db.alt.prepare SQL\"\"\"\n      insert into doc_raw_lines\n        select * from doc_live_raw_lines\n          where doc_src_id = $doc_src_id;\"\"\"\n    @_raw_lines_ps      = @db.prepare SQL\"\"\"\n      select\n          $doc_src_nr as doc_src_nr,\n          *\n        from doc_raw_lines\n        where doc_src_id = $doc_src_id\n        order by doc_line_nr;\"\"\"\n    @_insert_loc_2ps    = @db.alt.prepare_insert { into: \"doc_locs\", }\n    @_last_line_ps      = @db.prepare SQL\"\"\"\n      select * from doc_raw_lines\n        where true\n          and doc_src_id = $doc_src_id\n          and doc_line_nr = (\n            select max( doc_line_nr )\n              from doc_raw_lines\n              where true\n              and doc_src_id = $doc_src_id );\"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_doc_src_abspath:  ( doc_src_path  ) -> PATH.resolve @cfg.home, doc_src_path\n  text_is_blank:        ( text          ) -> text is '' or /^\\s*$/.test text\n\n  #---------------------------------------------------------------------------------------------------------\n  get_doc_src_ids:   Decorators.get_all_first_values 'doc_sources', 'doc_src_id'\n  # get_doc_fads:       Decorators.get_all_rows         'fads'\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_raw_lines: ( region_ids... ) ->\n    region_ids = region_ids.flat Infinity\n    for region_id, idx in region_ids\n      { doc_src_id\n        doc_loc_id } = @_split_region_id region_id\n      ### TAINT reject unknown doc_src_id, doc_loc_id ###\n      doc_src_nr = idx + 1\n      for line from @db @_raw_lines_ps, { doc_src_nr, doc_src_id, }\n        yield line\n      # yield from @db @_raw_lines_ps, { doc_src_nr, doc_src_id, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _split_region_id: ( region_id ) ->\n    @types.validate.nonempty.text region_id\n    match = region_id.match /^(?<doc_src_id>[^#]+)#(?<doc_loc_id>.+)$/\n    return { doc_src_id: region_id, doc_loc_id: '*', } unless match?\n    return match.groups\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_loc_lines: ( cfg, P... ) ->\n    return @walk_xxx_lines [ arguments..., ] if ( P.length isnt 0 )\n    cfg  ?= []\n    cfg   = @types.create.walk_xxx_lines_cfg cfg\n    return [] if cfg.length is 0\n    sql   = []\n    { L } = @db.sql\n    for doc_src_id, idx in cfg\n      sql.push \\\n        SQL\"select #{L idx + 1} as doc_src_nr, * \" + \\\n          SQL\"from doc_xxx_lines as R where R.doc_src_id = #{L doc_src_id}\\n\"\n    return @db sql.join 'union all\\n'\n\n  #---------------------------------------------------------------------------------------------------------\n  add_source: ( cfg ) ->\n    cfg = @types.create.doc_add_source_cfg cfg\n    { doc_src_id\n      doc_src_path\n      doc_src_hash } = cfg\n    doc_src_abspath  = @get_doc_src_abspath doc_src_path\n    doc_src_hash    ?= GUY.fs.get_content_hash doc_src_abspath, { fallback: null, }\n    source           = @db.first_row @_insert_source_ps, { doc_src_id, doc_src_path, doc_src_hash, }\n    @db.alt @_insert_lines_2ps, { doc_src_id, }\n    ### TAINT only when licensed by extension `*.dm.*` or settings ###\n    @_add_locs_for_source source\n    return source\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_locs_for_source: ( source ) ->\n    @db.alt =>\n      for loc from @_walk_locs_of_source source\n        @db.alt @_insert_loc_2ps, loc\n      return null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_locs_of_source: ( source ) ->\n    { doc_src_id, }  = source\n    #.......................................................................................................\n    { doc_line_nr\n      stop        } = @_get_last_position_in_file doc_src_id\n    yield {\n      doc_src_id, doc_line_nr: 1, doc_loc_id: '*', doc_loc_kind: 'start',\n      doc_loc_start: 0, doc_loc_stop: 0, doc_loc_mark: 0, }\n    yield {\n      doc_src_id, doc_line_nr: doc_line_nr, doc_loc_id: '*', doc_loc_kind: 'stop',\n      doc_loc_start: stop, doc_loc_stop: stop, doc_loc_mark: stop, }\n    #.......................................................................................................\n    for line from @walk_raw_lines [ doc_src_id, ]\n      { doc_line_nr } = line\n      for match from line.doc_line_txt.matchAll @cfg._loc_marker_re\n        { left_slash\n          doc_loc_id\n          right_slash           } = match.groups\n        [ text ]                  = match\n        length                    = text.length\n        { index: doc_loc_start, } = match\n        doc_loc_stop              = doc_loc_start + length\n        doc_loc_mark              = null\n        doc_loc_kind              = null\n        # debug '^57-1^', line.doc_src_id, line.doc_line_nr, { doc_loc_start, length, left_slash, right_slash, name, }\n        if ( left_slash is '' ) and ( right_slash is '' )\n          doc_loc_kind  = 'start'\n          doc_loc_mark  = doc_loc_stop\n        else if ( left_slash is '/' ) and ( right_slash is '' )\n          doc_loc_kind  = 'stop'\n          doc_loc_mark  = doc_loc_start\n        else if ( left_slash is '' ) and ( right_slash is '/' )\n          doc_loc_kind  = 'start'\n          doc_loc_mark  = doc_loc_stop\n          yield {\n            doc_src_id, doc_line_nr, doc_loc_id, doc_loc_kind,\n            doc_loc_start, doc_loc_stop, doc_loc_mark, }\n          doc_loc_kind  = 'stop'\n        else\n          ### TAINT use custom error class, proper source location data ###\n          throw new Error \"^datamill/document@1^ illegal location marker: #{rpr text}\"\n        yield {\n          doc_src_id, doc_line_nr, doc_loc_id, doc_loc_kind,\n          doc_loc_start, doc_loc_stop, doc_loc_mark, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_last_position_in_file: ( doc_src_id ) ->\n    { doc_line_nr\n      doc_line_txt  } = @db.first_row @_last_line_ps, { doc_src_id, }\n    return { doc_line_nr, stop: doc_line_txt.length, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _delete_source: ( doc_src_id ) -> @db @_delete_source_ps, { doc_src_id, }\n\n  #---------------------------------------------------------------------------------------------------------\n  update_source: ( cfg ) ->\n    cfg = @types.create.doc_update_file_cfg cfg\n    return @db.first_row @_upsert_source_ps, cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_layout: ( cfg ) ->\n    ### TAINT put path to layout into cfg ###\n    doc_src_path = PATH.resolve __dirname, '../assets/layout.dm.html'\n    @add_source { doc_src_id: 'layout', doc_src_path, }\n\n\n  #=========================================================================================================\n  # SIGNAL PROCESSING\n  #---------------------------------------------------------------------------------------------------------\n  _listen_to_signals: ->\n    # XE.listen_to          '^mykey',     ( d       ) ->  keys.listen   .push d.$key\n    # XE.contract           '^otherkey',  ( d       ) ->  keys.contract .push d.$key; return \"some value\"\n    #.......................................................................................................\n    XE.listen_to_all ( key, d ) -> whisper '^23-1^', GUY.trm.reverse \"signal: #{rpr d}\"\n    XE.listen_to_unheard ( key, d ) -> warn GUY.trm.reverse \"unheard signal: #{rpr d}\"\n    #.......................................................................................................\n    XE.listen_to '^maybe-source-changed', ( d ) =>\n      ###\n        * test whether source is registered\n        * retrieve content hash\n        * compare with registered content hash\n        * if changed:\n          * update DB content\n          * `XE.emit '^source-changed', { doc_src_id, doc_src_path, }`\n      ###\n      source         = @_file_from_abspath d.doc_src_abspath\n      doc_src_hash   = GUY.fs.get_content_hash source.doc_src_abspath, { fallback: null, }\n      if source.doc_src_hash isnt doc_src_hash\n        source.doc_src_hash = doc_src_hash\n        @update_source source\n        XE.emit '^source-changed', source\n      return null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _file_from_abspath: ( doc_src_abspath ) -> @db.first_row SQL\"\n    select * from doc_sources where doc_src_abspath = $doc_src_abspath\", { doc_src_abspath, }\n\n\n\n############################################################################################################\nmodule.exports  = { Document, }\n\n\n\n\n\n"
  ]
}