{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/document.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATAMILL/DOCUMENT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of }               = types\n{ SQL \n  sql }                   = require 'dbay'\n{ I, V, L, }              = sql\n#...........................................................................................................\n# FS                        = require 'node:fs'\n# PATH                      = require 'node:path'\n{ get_base_types\n  get_document_types }      = require './types'\n\n\n#===========================================================================================================\n# DECORATORS\n#-----------------------------------------------------------------------------------------------------------\nclass Decorators\n  \n  ### NOTE this could meaningfully go into a static DBay submodule to assist in building client APIs ###\n\n  #---------------------------------------------------------------------------------------------------------\n  @get_all_first_values: ( table, field ) ->\n    -> @db.all_first_values SQL\"select #{I field} from #{I @cfg.prefix+table} order by 1;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  @get_all_rows: ( table ) ->\n    -> @db.all_rows SQL\"select * from #{I @cfg.prefix+table} order by 1;\"\n\n#===========================================================================================================\nclass Document\n\n  #=========================================================================================================\n  # CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    GUY.props.hide @, 'types', get_document_types()\n    @cfg        = @types.create.datamill_document_cfg cfg\n    GUY.props.hide @, 'db',             @cfg.db;            delete @cfg.db\n    GUY.props.hide @, 'file_adapters',  @cfg.file_adapters; delete @cfg.file_adapters\n    @_procure_infrastructure()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db.set_foreign_keys_state false\n    @db SQL\"\"\"\n      drop table if exists #{prefix}file;\"\"\"\n    @db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    # TABLES\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}file_kinds (\n          doc_file_kind           text not null,\n          doc_file_kind_classname text not null,\n          comment                 text,\n        primary key ( doc_file_kind ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}files (\n          doc_file_id         text not null,\n          doc_file_kind       text not null references #{prefix}file_kinds,\n          doc_file_parameters json not null,\n        primary key ( doc_file_id ) );\"\"\"\n    #.......................................................................................................\n    insert_file_kind = @db.prepare_insert { into: \"#{prefix}file_kinds\", }\n    @db =>\n      for doc_file_kind, clasz of @file_adapters\n        doc_file_kind_classname = clasz.name\n        comment                 = clasz.comment ? null\n        @db insert_file_kind, { doc_file_kind, doc_file_kind_classname, comment, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_doc_file_ids:   Decorators.get_all_first_values 'files',      'doc_file_id'\n  get_doc_file_kinds: Decorators.get_all_rows         'file_kinds'\n\n  #---------------------------------------------------------------------------------------------------------\n  new_file: ( cfg ) ->\n\n\n#===========================================================================================================\nclass File_adapter_abc\n  @comment: \"abstract base class for files\"\n\n\n#===========================================================================================================\nclass External_file_abc extends File_adapter_abc\n  @comment: \"abstract base class for external files\"\n\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg   @types.create.new_external_file_cfg cfg\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  write:        null\n  walk_chunks:  null\n  walk_lines:   null\n\n#===========================================================================================================\nclass External_text_file extends External_file_abc\n  @comment: \"adapter for external text files\"\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg   @types.create.new_external_text_file_cfg cfg\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_lines: ->\n    yield 'helo'\n    yield 'world'\n    return null\n\n\n############################################################################################################\n### Abstract base classes use class name, instantiable classes short acronym with `x` meaning 'external',\n`txt` being most common file name extension for text files: ###\nfile_adapters   =\n  File_adapter_abc:   File_adapter_abc\n  External_file_abc:  External_file_abc\n  xtxt:               External_text_file\nmodule.exports  = { Document, File_adapter_abc, file_adapters, }\n\n\n\n\n\n"
  ]
}