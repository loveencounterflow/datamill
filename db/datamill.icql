
-- ---------------------------------------------------------------------------------------------------------
fragment create_table_main_first( default_dest, default_key ):
  drop table if exists main;
  drop table if exists keys;
  -- .......................................................................................................
  create table keys (
    key       text    not null unique primary key,
    is_block  boolean not null );
  insert into keys ( key, is_block ) values
    ( $default_key, false );
  -- .......................................................................................................
  create table main (
    vnr       json    unique not null primary key,
    stamped   boolean not null default false,
    dest      text    not null default $default_dest,
    key       text    not null default $default_key,
    text      text,
    p         json    default 'null',
    ref       text,
    vnr_blob  blob    unique not null );
  insert into main ( vnr, vnr_blob, text ) values
fragment create_table_main_middle( vnr, text ):
  ( $vnr, json_as_hollerith( $vnr ), $text )

-- ---------------------------------------------------------------------------------------------------------
query read_lines( limit ):
  select
      *
    from main
    order by vnr_blob
    limit $limit;

-- ---------------------------------------------------------------------------------------------------------
query read_lines():
  select
      *
    from main
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query find_eq_pattern( key, pattern ):
  select
      *
    from main
    where true
      and ( key = $key )
      and ( text = $pattern )
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query find_like_pattern( pattern ):
  select
      *
    from main
    where text like $pattern
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query get_key_entry( key ):
  select
      key,
      is_block
    from keys
    where key = $key;

-- ---------------------------------------------------------------------------------------------------------
query read_key_registry():
  select
      key,
      is_block
    from keys;

-- ---------------------------------------------------------------------------------------------------------
query count_lines():
  select count(*) from main;

-- ---------------------------------------------------------------------------------------------------------
query get_stats():
  select null as key, null as count where false union all
    select 'all lines',     count(*) from main                    union all
    select 'active lines',  count(*) from main where not stamped  union all
    select 'stamped lines', count(*) from main where     stamped  union all
    select null, null where false;

-- ---------------------------------------------------------------------------------------------------------
procedure _insert( key, vnr, vnr_blob, dest, text, p, stamped, ref ):
  insert into
    main    (  key,  vnr,  vnr_blob,  dest,  text,  p,  stamped,  ref )
    values  ( $key, $vnr, $vnr_blob, $dest, $text, $p, $stamped, $ref );

-- ---------------------------------------------------------------------------------------------------------
procedure _update( key, vnr, vnr_blob, dest, text, p, stamped, ref ):
  update main
    set (  key,  vnr,  vnr_blob,  dest,   text,  p,  stamped,  ref ) =
        ( $key, $vnr, $vnr_blob, $dest,  $text, $p, $stamped, $ref )
    where vnr = $vnr;

-- ---------------------------------------------------------------------------------------------------------
procedure _update( vnr ):
  update main
    set (  vnr,  vnr_blob ) =
        ( $vnr, $vnr_blob )
    where vnr = $vnr;

-- ---------------------------------------------------------------------------------------------------------
procedure stamp( vnr_blob ):
  update main set stamped = true where vnr_blob = $vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
procedure stamp( first_vnr_blob, last_vnr_blob ):
  update main set stamped = 1
    where vnr_blob between $first_vnr_blob and $last_vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query read_unstamped_lines():
  select
      *
    from main
    where not stamped
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
procedure set_dest( dest, first_vnr_blob, last_vnr_blob ):
  update main set ( dest ) = ( $dest )
    where vnr_blob between $first_vnr_blob and $last_vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
procedure register_key( key, is_block ):
  insert into keys (  key,  is_block )
    values         ( $key, $is_block );

-- ---------------------------------------------------------------------------------------------------------
query datom_from_vnr( vnr ):
  select *
    from main
    where vnr = $vnr;


-- ---------------------------------------------------------------------------------------------------------
procedure create_view_dest_changes_backward():
  drop view if exists dest_changes_backward;
  create view dest_changes_backward as select
      lead( dest ) over ( order by vnr_blob ) as nxt_dest,
      *
    from main;

-- ---------------------------------------------------------------------------------------------------------
procedure create_view_dest_changes_forward():
  drop view if exists dest_changes_forward;
  create view dest_changes_forward as select
      lag( dest ) over ( order by vnr_blob ) as prv_dest,
      *
    from main;

-- ---------------------------------------------------------------------------------------------------------
query read_changed_dest_last_lines():
  select * from dest_changes_backward
    where dest != nxt_dest
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query read_changed_dest_first_lines():
  select * from dest_changes_forward
    where dest != prv_dest
    order by vnr_blob;
