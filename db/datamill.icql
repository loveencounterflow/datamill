
-- ---------------------------------------------------------------------------------------------------------
fragment create_table_main_first( path, default_dest, default_key, default_realm ):
  pragma foreign_keys = off;
  drop table if exists main;
  drop table if exists keys;
  drop table if exists realms;
  drop table if exists sources;
  pragma foreign_keys = on;
  -- .......................................................................................................
  create table sources (
    id              integer not null unique primary key, /* alias for system rowid */
    path            text    not null );
  insert into sources ( id,  path )
    values            (  1, $path );
  -- .......................................................................................................
  create table realms (
    realm           text    not null unique primary key );
  insert into realms  (          realm )
    values            ( $default_realm );
  -- .......................................................................................................
  create table keys (
    key             text    not null unique primary key,
    is_block        boolean not null default false,
    has_paragraphs  boolean not null default false
    check ( not ( ( not is_block ) and has_paragraphs ) ) );
  insert into keys  (          key, is_block )
    values          ( $default_key,    false );
  -- .......................................................................................................
  create table main (
    vnr       json    unique not null,
    stamped   boolean not null default false,
    dest      text    not null default $default_dest,
    sid       integer not null default 1 references sources ( id ),
    realm     text    not null default $default_realm references realms ( realm ),
    ref       text    default 'mirage',
    key       text    not null default $default_key references keys ( key ),
    text      text,
    p         json    default 'null',
    vnr_blob  blob    unique not null,
    primary key ( realm, vnr_blob ) );
  insert into main ( vnr, vnr_blob, text ) values
fragment create_table_main_middle( vnr, text ):
  ( $vnr, json_as_hollerith( $vnr ), $text )

-- ---------------------------------------------------------------------------------------------------------
query read_lines( limit ):
  select
      *
    from main
    order by vnr_blob
    limit $limit;

-- ---------------------------------------------------------------------------------------------------------
query read_lines():
  select
      *
    from main
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query read_lines( realm ):
  select
      *
    from main
    where ( realm = $realm )
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query find_eq_pattern( key, pattern ):
  select
      *
    from main
    where true
      and ( key = $key )
      and ( text = $pattern )
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query find_like_pattern( pattern ):
  select
      *
    from main
    where text like $pattern
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query count_lines():
  select count(*) from main;

-- ---------------------------------------------------------------------------------------------------------
query get_stats():
  select null as key, null as count where false union all
    select 'all lines',     count(*) from main                    union all
    select 'active lines',  count(*) from main where not stamped  union all
    select 'stamped lines', count(*) from main where     stamped  union all
    select null, null where false;

-- ---------------------------------------------------------------------------------------------------------
procedure _insert( realm, key, vnr, vnr_blob, dest, text, ref, p, stamped ):
  insert into
    main    (  realm,  key,  vnr,  vnr_blob,  dest,  text,  ref,  p,  stamped )
    values  ( $realm, $key, $vnr, $vnr_blob, $dest, $text, $ref, $p, $stamped );

-- ---------------------------------------------------------------------------------------------------------
procedure _update( realm, key, vnr, vnr_blob, dest, text, ref, p, stamped ):
  update main
    set (  realm,  key,  vnr,  vnr_blob,  dest,   text,  ref,  p,  stamped ) =
        ( $realm, $key, $vnr, $vnr_blob, $dest,  $text, $ref, $p, $stamped )
    where vnr = $vnr;

-- ---------------------------------------------------------------------------------------------------------
procedure stamp( vnr_blob ):
  update main set stamped = true where vnr_blob = $vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
procedure stamp( first_vnr_blob, last_vnr_blob ):
  update main set stamped = 1
    where vnr_blob between $first_vnr_blob and $last_vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query read_unstamped_lines():
  select
      *
    from main
    where not stamped
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query read_unstamped_lines( start_vnr_blob, stop_vnr_blob ):
  select
      *
    from main
    where true
      and ( not stamped )
      and ( $start_vnr_blob <= vnr_blob ) and ( vnr_blob < $stop_vnr_blob )
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query read_unstamped_lines( lower_vnr_blob, upper_vnr_blob ):
  select
      *
    from main
    where true
      and ( not stamped )
      and ( $lower_vnr_blob < vnr_blob ) and ( vnr_blob < $upper_vnr_blob )
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query read_unstamped_lines( first_vnr_blob, last_vnr_blob ):
  select
      *
    from main
    where true
      and ( not stamped )
      and ( $first_vnr_blob <= vnr_blob ) and ( vnr_blob <= $last_vnr_blob )
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
procedure set_dest( dest, first_vnr_blob, last_vnr_blob ):
  update main set ( dest ) = ( $dest )
    where vnr_blob between $first_vnr_blob and $last_vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query datom_from_vnr( vnr ):
  select *
    from main
    where vnr = $vnr;

-- ---------------------------------------------------------------------------------------------------------
procedure create_view_dest_changes_backward():
  drop view if exists dest_changes_backward;
  create view dest_changes_backward as select
      lead( dest ) over ( order by vnr_blob ) as nxt_dest,
      *
    from main
    where not stamped;

-- ---------------------------------------------------------------------------------------------------------
procedure create_view_dest_changes_forward():
  drop view if exists dest_changes_forward;
  create view dest_changes_forward as select
      lag( dest ) over ( order by vnr_blob ) as prv_dest,
      *
    from main
    where not stamped;

-- ---------------------------------------------------------------------------------------------------------
query read_changed_dest_last_lines():
  select * from dest_changes_backward
    where dest != nxt_dest
    order by vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query read_changed_dest_first_lines():
  select * from dest_changes_forward
    where dest != prv_dest
    order by vnr_blob;


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
query texts_preceded_by_block_keys():
  with v1 as ( select
      lag( m.key ) over ( order by vnr_blob ) as prv_key,
      m.*
    from main as m
    where true
      and ( not stamped ) )
    select
        v1.*
      from v1
      join keys as k on ( k.key = v1.prv_key and k.key like '<%' and k.is_block )
      where true
        and ( v1.text is not null )
      order by v1.vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
query texts_followed_by_block_keys():
  with v1 as ( select
      lead( m.key ) over ( order by vnr_blob ) as nxt_key,
      m.*
    from main as m
    where true
      and ( not stamped ) )
    select
        v1.*
      from v1
      join keys as k on ( k.key = v1.nxt_key and k.key like '>%' and k.is_block )
      where true
        -- and ( v1.text is not null )
      order by v1.vnr_blob;

-- ---------------------------------------------------------------------------------------------------------
procedure create_view_rows_mktscript_and_block_tags():
  drop view if exists rows_mktscript_and_block_tags;
  create view rows_mktscript_and_block_tags as select
      *
    from main as m
    join keys as k on ( k.key = m.key )
    where true
      and ( k.is_block or m.key = '^mktscript' )
    order by m.vnr_blob;


-- =========================================================================================================
-- REALM REGISTRY
-- ---------------------------------------------------------------------------------------------------------
procedure register_realm( realm ):
  insert into realms ( realm ) values ( $realm );

-- ---------------------------------------------------------------------------------------------------------
query get_realm_entry( realm ):
  select
      realm
    from realms
    where realm = $realm;

-- ---------------------------------------------------------------------------------------------------------
query read_realm_registry():
  select
      realm
    from realms;


-- =========================================================================================================
-- KEY REGISTRY
-- ---------------------------------------------------------------------------------------------------------
procedure register_key( key, is_block, has_paragraphs ):
  insert into keys (  key,  is_block,  has_paragraphs )
    values         ( $key, $is_block, $has_paragraphs );

-- ---------------------------------------------------------------------------------------------------------
query get_key_entry( key ):
  select
      key,
      is_block,
      has_paragraphs
    from keys
    where key = $key;

-- ---------------------------------------------------------------------------------------------------------
query read_key_registry():
  select
      key,
      is_block,
      has_paragraphs
    from keys;

